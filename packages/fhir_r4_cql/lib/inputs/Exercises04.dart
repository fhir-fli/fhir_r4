// ignore_for_file: file_names

import 'package:fhir_r4/fhir_r4.dart';

import 'package:fhir_r4_cql/fhir_r4_cql.dart';


final exercises04 = <String, dynamic>{
  'Closed-Open Interval': FhirBoolean(true),
  'Closed-Open Decimal Interval': FhirBoolean(true),
  'Closed-Closed DateTime Interval': FhirBoolean(true),
  'Interval Contains': FhirBoolean(true),
  'Interval In': FhirBoolean(true),
  'Start Of Interval': FhirBoolean(true),
  'End of Interval': FhirBoolean(true),
  'Width of Interval': FhirBoolean(true),
  'Size of Interval': FhirBoolean(true),
  'Interval Equality': FhirBoolean(true),
  'Interval Before': FhirBoolean(true),
  'Interval After': FhirBoolean(true),
  'Interval Meets': FhirBoolean(true),
  'Interval Overlaps': FhirBoolean(true),
  'Interval Starts': FhirBoolean(true),
  'Interval Included In': FhirBoolean(true),
  'Interval Includes': FhirBoolean(true),
  'Interval Ends': FhirBoolean(true),
  'IntervalX': CqlInterval<FhirDate>(
      low: FhirDate.fromString('2021-03-01'),
      high: FhirDate.fromString('2021-03-10')),
  'IntervalY': CqlInterval<FhirDate>(
      low: FhirDate.fromString('2021-03-04'),
      high: FhirDate.fromString('2021-03-30')),
  'Interval Starts Before Start': FhirBoolean(true),
  'Interval Starts 3 Days Before Start': FhirBoolean(true),
  'Interval Starts 3 Days Or More Before Start': FhirBoolean(true),
  'Interval Starts Within 3 days of Start': FhirBoolean(true),
  'Integer List': [1, 2, 3, 4, 5],
  'Choice List': [1, 'abc', null],
  'Tuple List': <dynamic>[
    <String, dynamic>{"X": 1, "Y": 1},
    <String, dynamic>{"X": 2, "Y": 2}
  ],
  'List Indexer': FhirBoolean(true),
  'List Index Of': FhirBoolean(true),
  'List Contains': FhirBoolean(false),
  'List Length': FhirBoolean(true),
  'List First': FhirBoolean(true),
  'List Last': FhirBoolean(true),
  'Singleton From': FhirBoolean(true),
  'List Take': FhirBoolean(true),
  'List Skip': FhirBoolean(true),
  'List Tail': FhirBoolean(true),
  'ListX': [1, 2, 3, 4, 5],
  'ListY': [2, 3, 4],
  'List Contains (2)': FhirBoolean(true),
  'List In (2)': FhirBoolean(true),
  'List Includes': FhirBoolean(true),
  'List Included In': FhirBoolean(true),
  'ListA': [
    FhirInteger(1),
    FhirInteger(2),
    FhirInteger(3),
    FhirInteger(4),
    FhirInteger(5)
  ],
  'ListB': [
    FhirInteger(4),
    FhirInteger(5),
    FhirInteger(6),
    FhirInteger(7),
    FhirInteger(8)
  ],
  'List Union': FhirBoolean(true),
  'Choice List Union': FhirBoolean(true),
  'List Intersect': FhirBoolean(true),
  'List Except': FhirBoolean(true),
  'Aggregate Count': FhirBoolean(true),
  'Aggregate Sum': FhirBoolean(true),
  'Aggregate Min': FhirBoolean(true),
  'Aggregate Max': FhirBoolean(true),
  'Aggregate Avg': FhirBoolean(true),
  'Aggregate Median': FhirBoolean(true),
  'Aggregate Mode': FhirBoolean(true),
  'Aggregate Variance': FhirBoolean(false),
  'Aggregate StdDev': FhirBoolean(false),
  'Aggregate Population Variance': FhirBoolean(true),
  'Aggregate Population StdDev': FhirBoolean(true),
  'Aggregate All True': FhirBoolean(true),
  'Aggregate Any True': FhirBoolean(true),
  'Combine Expression': FhirBoolean(true),
  'Combine With Separator': FhirBoolean(true),
  'Split Expression': FhirBoolean(true),
  'Flatten Expression': FhirBoolean(true),
  'Distinct Expression': FhirBoolean(true),
  'Flatten Not Recursive': FhirBoolean(false),
  'Flatten Lists and Elements': FhirBoolean(false),
  'Collapse Expression': FhirBoolean(true),
  'Expand Expression': FhirBoolean(true),
};
