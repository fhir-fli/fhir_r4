bool fieldInQuantity(String field, String className) =>
    <String>[
      'id',
      'extension_',
      'value',
      'valueElement',
      'comparator',
      'comparatorElement',
      'unit',
      'unitElement',
      'system',
      'systemElement',
      'code',
      'codeElement',
    ].contains(editIfReserved(field)) &&
    isQuantity(className);

bool fieldInDataType(String field, String className) =>
    <String>[
      'id',
      'extension_',
    ].contains(editIfReserved(field)) &&
    isDataType(className);

bool fieldInBackboneType(String field, String className) =>
    <String>[
      'id',
      'extension_',
      'modifierExtension',
    ].contains(editIfReserved(field)) &&
    isBackboneType(className);

bool fieldInDomainResource(String field, String className) =>
    <String>[
      'resourceType',
      'id',
      'meta',
      'implicitRules',
      'implicitRulesElement',
      'language',
      'languageElement',
      'text',
      'contained',
      'extension_',
      'modifierExtension',
    ].contains(editIfReserved(field)) &&
    isResourceType(className);

bool typeToGenerate(String type) {
  return !<String>[
    'resourcelist',
    'base64binary',
    'boolean',
    'canonical',
    'code',
    'date',
    'datetime',
    'decimal',
    'id',
    'instant',
    'integer',
    'markdown',
    'oid',
    'positiveint',
    'string',
    'time',
    'unsignedint',
    'uri',
    'url',
    'uuid',
    'xhtml',
    'element',
  ].contains(type.toLowerCase());
}

bool isResourceType(String fileName) => <String>[
      'account',
      'activitydefinition',
      'administrableproductdefinition',
      'adverseevent',
      'allergyintolerance',
      'appointment',
      'appointmentresponse',
      'auditevent',
      'basic',
      'binary',
      'biologicallyderivedproduct',
      'bodystructure',
      'bundle',
      'capabilitystatement',
      'careplan',
      'careteam',
      'catalogentry',
      'chargeitem',
      'chargeitemdefinition',
      'citation',
      'claim',
      'claimresponse',
      'clinicalimpression',
      'clinicalusedefinition',
      'codesystem',
      'communication',
      'communicationrequest',
      'compartmentdefinition',
      'composition',
      'conceptmap',
      'condition',
      'consent',
      'contract',
      'coverage',
      'coverageeligibilityrequest',
      'coverageeligibilityresponse',
      'detectedissue',
      'device',
      'devicedefinition',
      'devicemetric',
      'devicerequest',
      'deviceusestatement',
      'diagnosticreport',
      'documentmanifest',
      'documentreference',
      'encounter',
      'endpoint',
      'enrollmentrequest',
      'enrollmentresponse',
      'episodeofcare',
      'eventdefinition',
      'evidence',
      'evidencereport',
      'evidencevariable',
      'examplescenario',
      'explanationofbenefit',
      'familymemberhistory',
      'flag',
      'goal',
      'graphdefinition',
      'group',
      'guidanceresponse',
      'healthcareservice',
      'imagingstudy',
      'immunization',
      'immunizationevaluation',
      'immunizationrecommendation',
      'implementationguide',
      'ingredient',
      'insuranceplan',
      'invoice',
      'library',
      'linkage',
      'list',
      'location',
      'manufactureditemdefinition',
      'measure',
      'measurereport',
      'media',
      'medication',
      'medicationadministration',
      'medicationdispense',
      'medicationknowledge',
      'medicationrequest',
      'medicationstatement',
      'medicinalproductdefinition',
      'messagedefinition',
      'messageheader',
      'molecularsequence',
      'namingsystem',
      'nutritionorder',
      'nutritionproduct',
      'observation',
      'observationdefinition',
      'operationdefinition',
      'operationoutcome',
      'organization',
      'organizationaffiliation',
      'packagedproductdefinition',
      'parameters',
      'patient',
      'paymentnotice',
      'paymentreconciliation',
      'person',
      'plandefinition',
      'practitioner',
      'practitionerrole',
      'procedure',
      'provenance',
      'questionnaire',
      'questionnaireresponse',
      'regulatedauthorization',
      'relatedperson',
      'requestgroup',
      'researchdefinition',
      'researchelementdefinition',
      'researchstudy',
      'researchsubject',
      'riskassessment',
      'schedule',
      'searchparameter',
      'servicerequest',
      'slot',
      'specimen',
      'specimendefinition',
      'structuredefinition',
      'structuremap',
      'subscription',
      'subscriptionstatus',
      'subscriptiontopic',
      'substance',
      'substancedefinition',
      'supplydelivery',
      'supplyrequest',
      'task',
      'terminologycapabilities',
      'testreport',
      'testscript',
      'valueset',
      'verificationresult',
      'visionprescription',
      'fhirlist',
      'fhirgroup',
      'fhirendpoint',
    ].contains(fileName.split('_').first.toLowerCase());

String editIfReserved(String name) => const <String>[
      'abstract',
      'else',
      'import',
      'show',
      'as',
      'enum',
      'in',
      'static',
      'assert',
      'export',
      'interface',
      'super',
      'async',
      'extends',
      'is',
      'switch',
      'await',
      'extension',
      'late',
      'sync',
      'break',
      'external',
      'library',
      'this',
      'case',
      'factory',
      'mixin',
      'throw',
      'catch',
      'false',
      'new',
      'true',
      'class',
      'final',
      'null',
      'try',
      'const',
      'finally',
      'on',
      'typedef',
      'continue',
      'for',
      'operator',
      'var',
      'covariant',
      'function',
      'part',
      'void',
      'default',
      'get',
      'required',
      'while',
      'deferred',
      'hide',
      'rethrow',
      'with',
      'do',
      'if',
      'return',
      'yield',
      'dynamic',
      'implements',
      'set',
    ].contains(name)
        ? '${name}_'
        : name;

String changeName(String typeName) =>
    const <String, String>{
      'string': 'FhirString',
      'base64Binary': 'FhirBase64Binary',
      'boolean': 'FhirBoolean',
      'canonical': 'FhirCanonical',
      'code': 'FhirCode',
      'date': 'FhirDate',
      'decimal': 'FhirDecimal',
      'dateTime': 'FhirDateTime',
      'uri': 'FhirUri',
      'url': 'FhirUrl',
      'id': 'FhirId',
      'instant': 'FhirInstant',
      'integer': 'FhirInteger',
      'integer64': 'FhirInteger64',
      'markdown': 'FhirMarkdown',
      'oid': 'FhirOid',
      'positiveInt': 'FhirPositiveInt',
      'time': 'FhirTime',
      'unsignedInt': 'FhirUnsignedInt',
      'uuid': 'FhirUuid',
      'Duration': 'FhirDuration',
      'xhtml': 'FhirMarkdown',
      'Meta': 'FhirMeta',
      'Expression': 'FhirExpression',
      'List': 'FhirList',
      'Extension': 'FhirExtension',
      'ResourceList': 'Resource',
      'Group': 'FhirGroup',
      'Endpoint': 'FhirEndpoint',
    }[typeName.replaceAll('?', '')] ??
    typeName;

String fhirToDartType(String typeName, [bool isClassName = false]) {
  typeName = typeName.replaceAll('_', '');
  typeName = changeName(typeName);
  if (isResourceType(typeName) && isClassName) {
    return '$typeName extends DomainResource';
  } else if (isDataType(typeName) && isClassName) {
    return '$typeName extends DataType';
  } else if (isQuantity(typeName) && isClassName) {
    return '$typeName extends Quantity';
  } else if (isBackboneType(typeName) && isClassName) {
    return '$typeName extends BackboneType';
  } else {
    return typeName;
  }
}

bool isDataType(String className) {
  return <String>[
    'Address',
    'Annotation',
    'Attachment',
    'CodeableConcept',
    'Coding',
    'ContactDetail',
    'ContactPoint',
    'Contributor',
    'DataRequirement',
    'Expression',
    'Extension',
    'FhirExtension',
    'HumanName',
    'Identifier',
    'Meta',
    'FhirMeta',
    'Money',
    'Narrative',
    'ParameterDefinition',
    'Period',
    'Quantity',
    'Range',
    'Ratio',
    'RatioRange',
    'Reference',
    'RelatedArtifact',
    'SampledData',
    'Signature',
    'TriggerDefinition',
    'UsageContext',
  ].contains(className);
}

bool isQuantity(String className) {
  return <String>[
    'Age',
    'Count',
    'Distance',
    'Duration',
    'FhirDuration',
  ].contains(className);
}

bool isBackboneType(String className) {
  return <String>[
    'Dosage',
    'ElementDefinition',
    'MarketingStatus',
    'Population',
    'ProdCharacteristic',
    'ProductShelfLife',
    'Timing',
  ].contains(className);
}
