bool shouldGenerate(String type) {
  const List<String> excludedTypes = <String>[
    'resourcelist',
    'base64binary',
    'boolean',
    'canonical',
    'code',
    'date',
    'datetime',
    'decimal',
    'id',
    'instant',
    'integer',
    'markdown',
    'oid',
    'positiveint',
    'string',
    'time',
    'unsignedint',
    'uri',
    'url',
    'uuid',
    'xhtml',
    'resource',
    'domainresource',
    'backboneelement',
    'element',
  ];
  return !excludedTypes.contains(type.toLowerCase());
}

String fhirToDartTypes(String typeName) =>
    const <String, String>{
      'string': 'FhirString',
      'base64binary': 'FhirBase64Binary',
      'boolean': 'FhirBoolean',
      'canonical': 'FhirCanonical',
      'code': 'FhirCode',
      'date': 'FhirDate',
      'decimal': 'FhirDecimal',
      'datetime': 'FhirDateTime',
      'uri': 'FhirUri',
      'url': 'FhirUrl',
      'id': 'FhirId',
      'instant': 'FhirInstant',
      'integer': 'FhirInteger',
      'integer64': 'FhirInteger64',
      'markdown': 'FhirMarkdown',
      'oid': 'FhirOid',
      'positiveint': 'FhirPositiveInt',
      'time': 'FhirTime',
      'unsignedint': 'FhirUnsignedInt',
      'uuid': 'FhirUuid',
      'duration': 'FhirDuration',
      'xhtml': 'FhirMarkdown',
      'meta': 'FhirMeta',
      'expression': 'FhirExpression',
      'list': 'FhirList',
      'extension': 'FhirExtension',
      'resourceList': 'Resource',
      'group': 'FhirGroup',
      'endpoint': 'FhirEndpoint',
      'http://hl7.org/fhirpath/system.string': 'FhirString',
    }[typeName.toLowerCase()] ??
    typeName;

bool isPrimitiveType(String fieldName) => <String>[
      'base64binary',
      'fhirbase64binary',
      'fhir.base64binary',
      'bool',
      'boolean',
      'fhirboolean',
      'fhir.boolean',
      'canonical',
      'code',
      'fhircode',
      'fhir.code',
      'date',
      'fhirdate',
      'fhir.date',
      'datetime',
      'fhirdatetime',
      'fhir.datetime',
      'double',
      'decimal',
      'fhirdecimal',
      'fhir.decimal',
      'num',
      'id',
      'instant',
      'int',
      'integer',
      'fhirinteger',
      'fhir.integer',
      'integer64',
      'markdown',
      'oid',
      'positiveint',
      'string',
      'fhirstring',
      'fhir.string',
      'time',
      'fhirtime',
      'fhir.time',
      'unsignedint',
      'uri',
      'fhiruri',
      'fhir.uri',
      'url',
      'uuid',
    ].contains(fieldName.toLowerCase());

bool isDataType(String className) {
  return <String>[
    'address',
    'annotation',
    'attachment',
    'codeableconcept',
    'codeablereference',
    'coding',
    'contactdetail',
    'contactpoint',
    'contributor',
    'datarequirement',
    'expression',
    'extension',
    'fhirextension',
    'humanname',
    'identifier',
    'meta',
    'fhirmeta',
    'money',
    'narrative',
    'parameterdefinition',
    'period',
    'quantity',
    'range',
    'ratio',
    'ratiorange',
    'reference',
    'relatedartifact',
    'sampleddata',
    'signature',
    'triggerdefinition',
    'usagecontext',
  ].contains(className.toLowerCase());
}

bool isQuantity(String className) {
  return <String>[
    'age',
    'count',
    'distance',
    'duration',
    'fhirduration',
  ].contains(className.toLowerCase());
}

bool isBackboneType(String className) {
  return <String>[
    'dosage',
    'elementdefinition',
    'marketingstatus',
    'population',
    'prodcharacteristic',
    'productshelflife',
    'timing',
  ].contains(className.toLowerCase());
}

bool isResourceType(String className) => <String>[
      'account',
      'activitydefinition',
      'administrableproductdefinition',
      'adverseevent',
      'allergyintolerance',
      'appointment',
      'appointmentresponse',
      'auditevent',
      'basic',
      'binary',
      'biologicallyderivedproduct',
      'bodystructure',
      'bundle',
      'capabilitystatement',
      'careplan',
      'careteam',
      'catalogentry',
      'chargeitem',
      'chargeitemdefinition',
      'citation',
      'claim',
      'claimresponse',
      'clinicalimpression',
      'clinicalusedefinition',
      'codesystem',
      'communication',
      'communicationrequest',
      'compartmentdefinition',
      'composition',
      'conceptmap',
      'condition',
      'consent',
      'contract',
      'coverage',
      'coverageeligibilityrequest',
      'coverageeligibilityresponse',
      'detectedissue',
      'device',
      'devicedefinition',
      'devicemetric',
      'devicerequest',
      'deviceusestatement',
      'diagnosticreport',
      'documentmanifest',
      'documentreference',
      'encounter',
      'endpoint',
      'enrollmentrequest',
      'enrollmentresponse',
      'episodeofcare',
      'eventdefinition',
      'evidence',
      'evidencereport',
      'evidencevariable',
      'examplescenario',
      'explanationofbenefit',
      'familymemberhistory',
      'flag',
      'goal',
      'graphdefinition',
      'group',
      'guidanceresponse',
      'healthcareservice',
      'imagingstudy',
      'immunization',
      'immunizationevaluation',
      'immunizationrecommendation',
      'implementationguide',
      'ingredient',
      'insuranceplan',
      'invoice',
      'library',
      'linkage',
      'list',
      'location',
      'manufactureditemdefinition',
      'measure',
      'measurereport',
      'media',
      'medication',
      'medicationadministration',
      'medicationdispense',
      'medicationknowledge',
      'medicationrequest',
      'medicationstatement',
      'medicinalproductdefinition',
      'messagedefinition',
      'messageheader',
      'molecularsequence',
      'namingsystem',
      'nutritionorder',
      'nutritionproduct',
      'observation',
      'observationdefinition',
      'operationdefinition',
      'operationoutcome',
      'organization',
      'organizationaffiliation',
      'packagedproductdefinition',
      'parameters',
      'patient',
      'paymentnotice',
      'paymentreconciliation',
      'person',
      'plandefinition',
      'practitioner',
      'practitionerrole',
      'procedure',
      'provenance',
      'questionnaire',
      'questionnaireresponse',
      'regulatedauthorization',
      'relatedperson',
      'requestgroup',
      'researchdefinition',
      'researchelementdefinition',
      'researchstudy',
      'researchsubject',
      'riskassessment',
      'schedule',
      'searchparameter',
      'servicerequest',
      'slot',
      'specimen',
      'specimendefinition',
      'structuredefinition',
      'structuremap',
      'subscription',
      'subscriptionstatus',
      'subscriptiontopic',
      'substance',
      'substancedefinition',
      'supplydelivery',
      'supplyrequest',
      'task',
      'terminologycapabilities',
      'testreport',
      'testscript',
      'valueset',
      'verificationresult',
      'visionprescription',
      'fhirlist',
      'fhirgroup',
      'fhirendpoint',
    ].contains(className.toLowerCase());

String fhirFieldToDartName(String name) => const <String>[
      'abstract',
      'else',
      'import',
      'show',
      'as',
      'enum',
      'in',
      'static',
      'assert',
      'export',
      'interface',
      'super',
      'async',
      'extends',
      'is',
      'switch',
      'await',
      'extension',
      'late',
      'sync',
      'break',
      'external',
      'library',
      'this',
      'case',
      'factory',
      'mixin',
      'throw',
      'catch',
      'false',
      'new',
      'true',
      'class',
      'final',
      'null',
      'try',
      'const',
      'finally',
      'on',
      'typedef',
      'continue',
      'for',
      'operator',
      'var',
      'covariant',
      'function',
      'part',
      'void',
      'default',
      'get',
      'required',
      'while',
      'deferred',
      'hide',
      'rethrow',
      'with',
      'do',
      'if',
      'return',
      'yield',
      'dynamic',
      'implements',
      'set',
    ].contains(name)
        ? '${name}_'
        : name;

bool isSuperField(String field, String className) =>
    _fieldInQuantity(field, className) ||
    _fieldInDataType(field, className) ||
    _fieldInBackboneType(field, className) ||
    _fieldInDomainResource(field, className);

bool _fieldInQuantity(String field, String className) =>
    <String>[
      'id',
      'extension',
      'value',
      'valueelement',
      'comparator',
      'comparatorelement',
      'unit',
      'unitelement',
      'system',
      'systemelement',
      'code',
      'codeelement',
    ].contains(field.toLowerCase()) &&
    isQuantity(className);

bool _fieldInDataType(String field, String className) =>
    <String>[
      'id',
      'extension',
    ].contains(field.toLowerCase()) &&
    isDataType(className);

bool _fieldInBackboneType(String field, String className) =>
    <String>[
      'id',
      'extension',
      'modifierextension',
    ].contains(field.toLowerCase()) &&
    isBackboneType(className);

bool _fieldInDomainResource(String field, String className) =>
    <String>[
      'resourcetype',
      'id',
      'meta',
      'implicitrules',
      'implicitruleselement',
      'language',
      'languageelement',
      'text',
      'contained',
      'extension',
      'modifierextension',
    ].contains(field.toLowerCase()) &&
    isResourceType(className);
