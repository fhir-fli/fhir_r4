// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';

import 'src/fhir/object_box/data_types/address.dart';
import 'src/fhir/object_box/data_types/age.dart';
import 'src/fhir/object_box/element.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 1930364733509986665),
      name: 'ObjectBoxAddress',
      lastPropertyId: const IdUid(19, 4396830206988863795),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3025532709599069496),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7114252889120666091),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 792143727252307580),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 5440688610485592140),
            name: 'use',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7766666334409645341),
            name: 'useElementId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 1297093510714540098),
            relationTarget: 'ObjectBoxElement'),
        ModelProperty(
            id: const IdUid(5, 5312655109721548899),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2103522691653871847),
            name: 'typeElementId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 3624805817914382080),
            relationTarget: 'ObjectBoxElement'),
        ModelProperty(
            id: const IdUid(7, 4928882016118963351),
            name: 'text',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6534113775384727719),
            name: 'textElementId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 4487004022121569563),
            relationTarget: 'ObjectBoxElement'),
        ModelProperty(
            id: const IdUid(9, 3976778340211346667),
            name: 'line',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 1336613817632554570),
            name: 'city',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 4938378876217320822),
            name: 'cityElementId',
            type: 11,
            flags: 520,
            indexId: const IdUid(5, 3630961232452280014),
            relationTarget: 'ObjectBoxElement'),
        ModelProperty(
            id: const IdUid(12, 6145320448779210656),
            name: 'district',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 3597416862352524527),
            name: 'districtElementId',
            type: 11,
            flags: 520,
            indexId: const IdUid(6, 8461967999504274349),
            relationTarget: 'ObjectBoxElement'),
        ModelProperty(
            id: const IdUid(14, 5525413058865978195),
            name: 'state',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 6747358688291269538),
            name: 'stateElementId',
            type: 11,
            flags: 520,
            indexId: const IdUid(7, 8517790439797975700),
            relationTarget: 'ObjectBoxElement'),
        ModelProperty(
            id: const IdUid(16, 5566923514041713122),
            name: 'postalCode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 8458353176550972069),
            name: 'postalCodeElementId',
            type: 11,
            flags: 520,
            indexId: const IdUid(8, 2951815662022418437),
            relationTarget: 'ObjectBoxElement'),
        ModelProperty(
            id: const IdUid(18, 7874393948542207459),
            name: 'country',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 4396830206988863795),
            name: 'countryElementId',
            type: 11,
            flags: 520,
            indexId: const IdUid(9, 5286952456300101576),
            relationTarget: 'ObjectBoxElement')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 7550836324684246189),
            name: 'lineElement',
            targetId: const IdUid(3, 29429849315357451))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 2753892143828081578),
      name: 'ObjectBoxAge',
      lastPropertyId: const IdUid(12, 8427737148435769700),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3824362456807306361),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7004133197517168701),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(10, 3033809904812511409),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 6110849076658984946),
            name: 'value',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5561119327218484937),
            name: 'valueElementId',
            type: 11,
            flags: 520,
            indexId: const IdUid(11, 4362827504094317244),
            relationTarget: 'ObjectBoxElement'),
        ModelProperty(
            id: const IdUid(5, 4992976758890975107),
            name: 'comparator',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7330518884436207451),
            name: 'comparatorElementId',
            type: 11,
            flags: 520,
            indexId: const IdUid(12, 6738574949384050738),
            relationTarget: 'ObjectBoxElement'),
        ModelProperty(
            id: const IdUid(7, 647472371767855405),
            name: 'unit',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8337467181026232928),
            name: 'unitElementId',
            type: 11,
            flags: 520,
            indexId: const IdUid(13, 7782082312083750843),
            relationTarget: 'ObjectBoxElement'),
        ModelProperty(
            id: const IdUid(9, 8395798340785431251),
            name: 'system',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 6087197250930761127),
            name: 'systemElementId',
            type: 11,
            flags: 520,
            indexId: const IdUid(14, 6494495783673161783),
            relationTarget: 'ObjectBoxElement'),
        ModelProperty(
            id: const IdUid(11, 7752492968203554003),
            name: 'code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 8427737148435769700),
            name: 'codeElementId',
            type: 11,
            flags: 520,
            indexId: const IdUid(15, 1152147161357930316),
            relationTarget: 'ObjectBoxElement')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 29429849315357451),
      name: 'ObjectBoxElement',
      lastPropertyId: const IdUid(2, 5573405893573247908),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2726013188812058786),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5573405893573247908),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(16, 6909944258364404786),
            relationTarget: 'String')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Store openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) =>
    Store(getObjectBoxModel(),
        directory: directory,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 29429849315357451),
      lastIndexId: const IdUid(16, 6909944258364404786),
      lastRelationId: const IdUid(1, 7550836324684246189),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    ObjectBoxAddress: EntityDefinition<ObjectBoxAddress>(
        model: _entities[0],
        toOneRelations: (ObjectBoxAddress object) => [
              object.id,
              object.useElement,
              object.typeElement,
              object.textElement,
              object.cityElement,
              object.districtElement,
              object.stateElement,
              object.postalCodeElement,
              object.countryElement
            ],
        toManyRelations: (ObjectBoxAddress object) => {
              RelInfo<ObjectBoxAddress>.toMany(1, object.dbId!):
                  object.lineElement
            },
        getId: (ObjectBoxAddress object) => object.dbId,
        setId: (ObjectBoxAddress object, int id) {
          object.dbId = id;
        },
        objectToFB: (ObjectBoxAddress object, fb.Builder fbb) {
          final useOffset =
              object.use == null ? null : fbb.writeString(object.use!);
          final typeOffset =
              object.type == null ? null : fbb.writeString(object.type!);
          final textOffset =
              object.text == null ? null : fbb.writeString(object.text!);
          final lineOffset = object.line == null
              ? null
              : fbb.writeList(
                  object.line!.map(fbb.writeString).toList(growable: false));
          final cityOffset =
              object.city == null ? null : fbb.writeString(object.city!);
          final districtOffset = object.district == null
              ? null
              : fbb.writeString(object.district!);
          final stateOffset =
              object.state == null ? null : fbb.writeString(object.state!);
          final postalCodeOffset = object.postalCode == null
              ? null
              : fbb.writeString(object.postalCode!);
          final countryOffset =
              object.country == null ? null : fbb.writeString(object.country!);
          fbb.startTable(20);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addOffset(2, useOffset);
          fbb.addInt64(3, object.useElement.targetId);
          fbb.addOffset(4, typeOffset);
          fbb.addInt64(5, object.typeElement.targetId);
          fbb.addOffset(6, textOffset);
          fbb.addInt64(7, object.textElement.targetId);
          fbb.addOffset(8, lineOffset);
          fbb.addOffset(9, cityOffset);
          fbb.addInt64(10, object.cityElement.targetId);
          fbb.addOffset(11, districtOffset);
          fbb.addInt64(12, object.districtElement.targetId);
          fbb.addOffset(13, stateOffset);
          fbb.addInt64(14, object.stateElement.targetId);
          fbb.addOffset(15, postalCodeOffset);
          fbb.addInt64(16, object.postalCodeElement.targetId);
          fbb.addOffset(17, countryOffset);
          fbb.addInt64(18, object.countryElement.targetId);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ObjectBoxAddress(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              use: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              useElement: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 10, 0)),
              type: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              typeElement: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 14, 0)),
              text: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              textElement: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)),
              line: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGetNullable(buffer, rootOffset, 20),
              lineElement: ToMany(),
              city: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 22),
              cityElement: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0)),
              district: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 26),
              districtElement: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0)),
              state: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 30),
              stateElement: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0)),
              postalCode: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 34),
              postalCodeElement: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0)),
              country: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 38),
              countryElement: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 40, 0)))
            ..dbId = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          object.useElement.attach(store);
          object.typeElement.attach(store);
          object.textElement.attach(store);
          object.cityElement.attach(store);
          object.districtElement.attach(store);
          object.stateElement.attach(store);
          object.postalCodeElement.attach(store);
          object.countryElement.attach(store);
          InternalToManyAccess.setRelInfo(
              object.lineElement,
              store,
              RelInfo<ObjectBoxAddress>.toMany(1, object.dbId!),
              store.box<ObjectBoxAddress>());
          return object;
        }),
    ObjectBoxAge: EntityDefinition<ObjectBoxAge>(
        model: _entities[1],
        toOneRelations: (ObjectBoxAge object) => [
              object.id,
              object.valueElement,
              object.comparatorElement,
              object.unitElement,
              object.systemElement,
              object.codeElement
            ],
        toManyRelations: (ObjectBoxAge object) => {},
        getId: (ObjectBoxAge object) => object.dbId,
        setId: (ObjectBoxAge object, int id) {
          object.dbId = id;
        },
        objectToFB: (ObjectBoxAge object, fb.Builder fbb) {
          final comparatorOffset = object.comparator == null
              ? null
              : fbb.writeString(object.comparator!);
          final unitOffset =
              object.unit == null ? null : fbb.writeString(object.unit!);
          final systemOffset =
              object.system == null ? null : fbb.writeString(object.system!);
          final codeOffset =
              object.code == null ? null : fbb.writeString(object.code!);
          fbb.startTable(13);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addFloat64(2, object.value);
          fbb.addInt64(3, object.valueElement.targetId);
          fbb.addOffset(4, comparatorOffset);
          fbb.addInt64(5, object.comparatorElement.targetId);
          fbb.addOffset(6, unitOffset);
          fbb.addInt64(7, object.unitElement.targetId);
          fbb.addOffset(8, systemOffset);
          fbb.addInt64(9, object.systemElement.targetId);
          fbb.addOffset(10, codeOffset);
          fbb.addInt64(11, object.codeElement.targetId);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ObjectBoxAge(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              value: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 8),
              valueElement: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 10, 0)),
              comparator: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              comparatorElement: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 14, 0)),
              unit: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              unitElement: ToOne(
                  targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)),
              system: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 20),
              systemElement: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0)),
              code: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 24),
              codeElement: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0)))
            ..dbId = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          object.valueElement.attach(store);
          object.comparatorElement.attach(store);
          object.unitElement.attach(store);
          object.systemElement.attach(store);
          object.codeElement.attach(store);
          return object;
        }),
    ObjectBoxElement: EntityDefinition<ObjectBoxElement>(
        model: _entities[2],
        toOneRelations: (ObjectBoxElement object) => [object.id],
        toManyRelations: (ObjectBoxElement object) => {},
        getId: (ObjectBoxElement object) => object.dbId,
        setId: (ObjectBoxElement object, int id) {
          object.dbId = id;
        },
        objectToFB: (ObjectBoxElement object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ObjectBoxElement(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)))
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [ObjectBoxAddress] entity fields to define ObjectBox queries.
class ObjectBoxAddress_ {
  /// see [ObjectBoxAddress.dbId]
  static final dbId =
      QueryIntegerProperty<ObjectBoxAddress>(_entities[0].properties[0]);

  /// see [ObjectBoxAddress.id]
  static final id =
      QueryRelationToOne<ObjectBoxAddress, String>(_entities[0].properties[1]);

  /// see [ObjectBoxAddress.use]
  static final use =
      QueryStringProperty<ObjectBoxAddress>(_entities[0].properties[2]);

  /// see [ObjectBoxAddress.useElement]
  static final useElement =
      QueryRelationToOne<ObjectBoxAddress, ObjectBoxElement>(
          _entities[0].properties[3]);

  /// see [ObjectBoxAddress.type]
  static final type =
      QueryStringProperty<ObjectBoxAddress>(_entities[0].properties[4]);

  /// see [ObjectBoxAddress.typeElement]
  static final typeElement =
      QueryRelationToOne<ObjectBoxAddress, ObjectBoxElement>(
          _entities[0].properties[5]);

  /// see [ObjectBoxAddress.text]
  static final text =
      QueryStringProperty<ObjectBoxAddress>(_entities[0].properties[6]);

  /// see [ObjectBoxAddress.textElement]
  static final textElement =
      QueryRelationToOne<ObjectBoxAddress, ObjectBoxElement>(
          _entities[0].properties[7]);

  /// see [ObjectBoxAddress.line]
  static final line =
      QueryStringVectorProperty<ObjectBoxAddress>(_entities[0].properties[8]);

  /// see [ObjectBoxAddress.city]
  static final city =
      QueryStringProperty<ObjectBoxAddress>(_entities[0].properties[9]);

  /// see [ObjectBoxAddress.cityElement]
  static final cityElement =
      QueryRelationToOne<ObjectBoxAddress, ObjectBoxElement>(
          _entities[0].properties[10]);

  /// see [ObjectBoxAddress.district]
  static final district =
      QueryStringProperty<ObjectBoxAddress>(_entities[0].properties[11]);

  /// see [ObjectBoxAddress.districtElement]
  static final districtElement =
      QueryRelationToOne<ObjectBoxAddress, ObjectBoxElement>(
          _entities[0].properties[12]);

  /// see [ObjectBoxAddress.state]
  static final state =
      QueryStringProperty<ObjectBoxAddress>(_entities[0].properties[13]);

  /// see [ObjectBoxAddress.stateElement]
  static final stateElement =
      QueryRelationToOne<ObjectBoxAddress, ObjectBoxElement>(
          _entities[0].properties[14]);

  /// see [ObjectBoxAddress.postalCode]
  static final postalCode =
      QueryStringProperty<ObjectBoxAddress>(_entities[0].properties[15]);

  /// see [ObjectBoxAddress.postalCodeElement]
  static final postalCodeElement =
      QueryRelationToOne<ObjectBoxAddress, ObjectBoxElement>(
          _entities[0].properties[16]);

  /// see [ObjectBoxAddress.country]
  static final country =
      QueryStringProperty<ObjectBoxAddress>(_entities[0].properties[17]);

  /// see [ObjectBoxAddress.countryElement]
  static final countryElement =
      QueryRelationToOne<ObjectBoxAddress, ObjectBoxElement>(
          _entities[0].properties[18]);

  /// see [ObjectBoxAddress.lineElement]
  static final lineElement =
      QueryRelationToMany<ObjectBoxAddress, ObjectBoxElement>(
          _entities[0].relations[0]);
}

/// [ObjectBoxAge] entity fields to define ObjectBox queries.
class ObjectBoxAge_ {
  /// see [ObjectBoxAge.dbId]
  static final dbId =
      QueryIntegerProperty<ObjectBoxAge>(_entities[1].properties[0]);

  /// see [ObjectBoxAge.id]
  static final id =
      QueryRelationToOne<ObjectBoxAge, String>(_entities[1].properties[1]);

  /// see [ObjectBoxAge.value]
  static final value =
      QueryDoubleProperty<ObjectBoxAge>(_entities[1].properties[2]);

  /// see [ObjectBoxAge.valueElement]
  static final valueElement =
      QueryRelationToOne<ObjectBoxAge, ObjectBoxElement>(
          _entities[1].properties[3]);

  /// see [ObjectBoxAge.comparator]
  static final comparator =
      QueryStringProperty<ObjectBoxAge>(_entities[1].properties[4]);

  /// see [ObjectBoxAge.comparatorElement]
  static final comparatorElement =
      QueryRelationToOne<ObjectBoxAge, ObjectBoxElement>(
          _entities[1].properties[5]);

  /// see [ObjectBoxAge.unit]
  static final unit =
      QueryStringProperty<ObjectBoxAge>(_entities[1].properties[6]);

  /// see [ObjectBoxAge.unitElement]
  static final unitElement = QueryRelationToOne<ObjectBoxAge, ObjectBoxElement>(
      _entities[1].properties[7]);

  /// see [ObjectBoxAge.system]
  static final system =
      QueryStringProperty<ObjectBoxAge>(_entities[1].properties[8]);

  /// see [ObjectBoxAge.systemElement]
  static final systemElement =
      QueryRelationToOne<ObjectBoxAge, ObjectBoxElement>(
          _entities[1].properties[9]);

  /// see [ObjectBoxAge.code]
  static final code =
      QueryStringProperty<ObjectBoxAge>(_entities[1].properties[10]);

  /// see [ObjectBoxAge.codeElement]
  static final codeElement = QueryRelationToOne<ObjectBoxAge, ObjectBoxElement>(
      _entities[1].properties[11]);
}

/// [ObjectBoxElement] entity fields to define ObjectBox queries.
class ObjectBoxElement_ {
  /// see [ObjectBoxElement.dbId]
  static final dbId =
      QueryIntegerProperty<ObjectBoxElement>(_entities[2].properties[0]);

  /// see [ObjectBoxElement.id]
  static final id =
      QueryRelationToOne<ObjectBoxElement, String>(_entities[2].properties[1]);
}
