// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';

import 'src/fhir/object_box/address.dart';
import 'src/fhir/object_box/age.dart';
import 'src/fhir/object_box/annotation.dart';
import 'src/fhir/object_box/attachment.dart';
import 'src/fhir/object_box/codeableconcept.dart';
import 'src/fhir/object_box/codeablereference.dart';
import 'src/fhir/object_box/coding.dart';
import 'src/fhir/object_box/contactdetail.dart';
import 'src/fhir/object_box/contactpoint.dart';
import 'src/fhir/object_box/contributor.dart';
import 'src/fhir/object_box/count.dart';
import 'src/fhir/object_box/datarequirement.dart';
import 'src/fhir/object_box/distance.dart';
import 'src/fhir/object_box/dosage.dart';
import 'src/fhir/object_box/duration.dart';
import 'src/fhir/object_box/elementdefinition.dart';
import 'src/fhir/object_box/expression.dart';
import 'src/fhir/object_box/extension.dart';
import 'src/fhir/object_box/humanname.dart';
import 'src/fhir/object_box/identifier.dart';
import 'src/fhir/object_box/marketingstatus.dart';
import 'src/fhir/object_box/meta.dart';
import 'src/fhir/object_box/money.dart';
import 'src/fhir/object_box/narrative.dart';
import 'src/fhir/object_box/parameterdefinition.dart';
import 'src/fhir/object_box/period.dart';
import 'src/fhir/object_box/population.dart';
import 'src/fhir/object_box/prodcharacteristic.dart';
import 'src/fhir/object_box/productshelflife.dart';
import 'src/fhir/object_box/quantity.dart';
import 'src/fhir/object_box/range.dart';
import 'src/fhir/object_box/ratio.dart';
import 'src/fhir/object_box/ratiorange.dart';
import 'src/fhir/object_box/reference.dart';
import 'src/fhir/object_box/relatedartifact.dart';
import 'src/fhir/object_box/resource.dart';
import 'src/fhir/object_box/sampleddata.dart';
import 'src/fhir/object_box/signature.dart';
import 'src/fhir/object_box/timing.dart';
import 'src/fhir/object_box/triggerdefinition.dart';
import 'src/fhir/object_box/usagecontext.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 859998357377386175),
      name: 'Address',
      lastPropertyId: const IdUid(12, 4431310516507334362),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5394718144227536947),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5717719170767670218),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 7700999414151027410),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 2949295429293123263),
            name: 'use',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8562130889863459058),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7592724011794645050),
            name: 'text',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2289058132022742525),
            name: 'line',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 168942654057096541),
            name: 'city',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2784737030851221158),
            name: 'district',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7299940413044870493),
            name: 'state',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 4091740906964622739),
            name: 'postalCode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 3537971288403676629),
            name: 'country',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 4431310516507334362),
            name: 'periodId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 6643728656543391700),
            relationTarget: 'Period')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 7593352098260571960),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 137761991492611029),
      name: 'Age',
      lastPropertyId: const IdUid(7, 3975231044942449512),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2800677322998459027),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8725431783700697409),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 3699060417643381470),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 1590906317272255034),
            name: 'value',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6114386408546108789),
            name: 'comparator',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8105456187399377935),
            name: 'unit',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 745883312236515361),
            name: 'system',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3975231044942449512),
            name: 'code',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(2, 1975193067252695442),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 5431556367902580579),
      name: 'Annotation',
      lastPropertyId: const IdUid(6, 1782826315039778905),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5967796777360508962),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1882606449731119060),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 3728429224785622863),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 8376484027990762270),
            name: 'authorReferenceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(5, 974453008661095969),
            relationTarget: 'Reference'),
        ModelProperty(
            id: const IdUid(4, 7028950124689277030),
            name: 'authorString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5392677355476868670),
            name: 'time',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1782826315039778905),
            name: 'text',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(3, 3466262498283861499),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 502513322599364627),
      name: 'Attachment',
      lastPropertyId: const IdUid(10, 1618334011446902150),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3809769040696752117),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8787953165133226842),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(6, 2232813710055620268),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 1919198864000607596),
            name: 'contentType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2912467794083894350),
            name: 'language',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7342704357256478878),
            name: 'data',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6757155117974572618),
            name: 'url',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4297938770393190964),
            name: 'size',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1805098096559661789),
            name: 'hash',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2621354653532894697),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 1618334011446902150),
            name: 'creation',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(4, 8923640148731168126),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 4072455885617490063),
      name: 'CodeableConcept',
      lastPropertyId: const IdUid(3, 1636744629416251844),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3928998636915796334),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4342557177957994731),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(7, 4880238943899650747),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 1636744629416251844),
            name: 'text',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(5, 3288581468735413312),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896)),
        ModelRelation(
            id: const IdUid(6, 1850456831541168504),
            name: 'coding',
            targetId: const IdUid(7, 8873997066131547011))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 3951641162007793511),
      name: 'CodeableReference',
      lastPropertyId: const IdUid(4, 8202702454482765840),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4594866029663978183),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6252319825634848745),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(8, 7810576469908692357),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 800653024493435335),
            name: 'conceptId',
            type: 11,
            flags: 520,
            indexId: const IdUid(9, 1149062116839419798),
            relationTarget: 'CodeableConcept'),
        ModelProperty(
            id: const IdUid(4, 8202702454482765840),
            name: 'referenceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(10, 3048235262470197482),
            relationTarget: 'Reference')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(7, 2104075931275556718),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 8873997066131547011),
      name: 'Coding',
      lastPropertyId: const IdUid(7, 413044041085839474),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7201498583686957262),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8111917250297880293),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(11, 7225157592102425336),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 2776152502722103176),
            name: 'system',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8082469157648744511),
            name: 'version',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2266682692010921050),
            name: 'code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5973855582900858261),
            name: 'display',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 413044041085839474),
            name: 'userSelected',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(8, 376040402050253784),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 9136124542494256544),
      name: 'ContactDetail',
      lastPropertyId: const IdUid(3, 3430834541352276486),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6871228155571560006),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6272756432910039818),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(12, 1566019783934747148),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 3430834541352276486),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(9, 9139024149166595715),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896)),
        ModelRelation(
            id: const IdUid(10, 9062322146675767880),
            name: 'telecom',
            targetId: const IdUid(9, 6564554583744113680))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 6564554583744113680),
      name: 'ContactPoint',
      lastPropertyId: const IdUid(7, 7631860810735740806),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4716570403469295716),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1459586365198934941),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(13, 543320608154427907),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 2494399582491048822),
            name: 'system',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 30269187166448085),
            name: 'value',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2563091422080579073),
            name: 'use',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8959346506216340454),
            name: 'rank',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7631860810735740806),
            name: 'periodId',
            type: 11,
            flags: 520,
            indexId: const IdUid(14, 7524703224650213382),
            relationTarget: 'Period')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(11, 5011707775417104301),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(10, 781843811865331208),
      name: 'Contributor',
      lastPropertyId: const IdUid(4, 9218256265131110138),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2490495037197754626),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6073721033842608391),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(15, 7959945124922226936),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 6883422067065486165),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 9218256265131110138),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(12, 1760013018815251850),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896)),
        ModelRelation(
            id: const IdUid(13, 8222765214912942408),
            name: 'contact',
            targetId: const IdUid(8, 9136124542494256544))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(11, 7869783525769755619),
      name: 'Count',
      lastPropertyId: const IdUid(7, 8831819949594691681),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7858858338213758063),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5267515487299669608),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(16, 344300768622316012),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 2208318749328765939),
            name: 'value',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7982774285467947191),
            name: 'comparator',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 9049575795939699284),
            name: 'unit',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4430107562112530968),
            name: 'system',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8831819949594691681),
            name: 'code',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(14, 5601832741785324642),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(12, 6152872577759475762),
      name: 'DataRequirement',
      lastPropertyId: const IdUid(8, 9794885704852092),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7484095412417578625),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1980280971847254108),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(17, 5149063796705051296),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 1436332081747245323),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4177696548662709024),
            name: 'profile',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1057493662480409581),
            name: 'subjectCodeableConceptId',
            type: 11,
            flags: 520,
            indexId: const IdUid(18, 804770357062695780),
            relationTarget: 'CodeableConcept'),
        ModelProperty(
            id: const IdUid(6, 727935314244827990),
            name: 'subjectReferenceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(19, 701185736371682269),
            relationTarget: 'Reference'),
        ModelProperty(
            id: const IdUid(7, 4880003523007918289),
            name: 'mustSupport',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 9794885704852092),
            name: 'limit',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(15, 3916943874397457398),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896)),
        ModelRelation(
            id: const IdUid(16, 5156282280245803117),
            name: 'codeFilter',
            targetId: const IdUid(13, 3334555296630189349)),
        ModelRelation(
            id: const IdUid(17, 7539415823490542872),
            name: 'dateFilter',
            targetId: const IdUid(14, 5631551812707487585)),
        ModelRelation(
            id: const IdUid(18, 1210481926870110363),
            name: 'sort',
            targetId: const IdUid(15, 1838878092732901713))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(13, 3334555296630189349),
      name: 'DataRequirementCodeFilter',
      lastPropertyId: const IdUid(5, 377527425828331035),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 426869451612341529),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 9073298109211285570),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(20, 8571546201918142719),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 6553217275088114446),
            name: 'path',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7860152159733426312),
            name: 'searchParam',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 377527425828331035),
            name: 'valueSet',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(19, 821924830353277446),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896)),
        ModelRelation(
            id: const IdUid(20, 6107982616266570614),
            name: 'code',
            targetId: const IdUid(7, 8873997066131547011))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(14, 5631551812707487585),
      name: 'DataRequirementDateFilter',
      lastPropertyId: const IdUid(7, 7958653849544222733),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 183693541747075087),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3165644356503556250),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(21, 8108615371713255269),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 812071991283383521),
            name: 'path',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7074223661511670087),
            name: 'searchParam',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3979626496735910592),
            name: 'valueDateTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8216537745612994717),
            name: 'valuePeriodId',
            type: 11,
            flags: 520,
            indexId: const IdUid(22, 6071154609735651796),
            relationTarget: 'Period'),
        ModelProperty(
            id: const IdUid(7, 7958653849544222733),
            name: 'valueDurationId',
            type: 11,
            flags: 520,
            indexId: const IdUid(23, 1523668199849593254),
            relationTarget: 'FhirDuration')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(21, 8789099580352988427),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(15, 1838878092732901713),
      name: 'DataRequirementSort',
      lastPropertyId: const IdUid(4, 1875614380893458014),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7616494406819235155),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8749096052891141020),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(24, 2960783170655687953),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 8159797496539537811),
            name: 'path',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1875614380893458014),
            name: 'direction',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(22, 178593369215815921),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(16, 4351744056991469385),
      name: 'Distance',
      lastPropertyId: const IdUid(7, 1532471276693260438),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7535479296989668668),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3749866795799464096),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(25, 1127180963099982544),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 4509653683781612966),
            name: 'value',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1357358969805854133),
            name: 'comparator',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5515201765419482256),
            name: 'unit',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4286815412313403753),
            name: 'system',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1532471276693260438),
            name: 'code',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(23, 8743402632813657603),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(17, 4457698513834405937),
      name: 'Dosage',
      lastPropertyId: const IdUid(14, 8692430219709788204),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7197114049591272758),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2069515705808096152),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(26, 5103827696616794138),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 6964663142906601648),
            name: 'sequence',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5114753213359355305),
            name: 'text',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5233700174302626314),
            name: 'patientInstruction',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5669221305199400382),
            name: 'timingId',
            type: 11,
            flags: 520,
            indexId: const IdUid(27, 9018752385630801553),
            relationTarget: 'Timing'),
        ModelProperty(
            id: const IdUid(7, 4722236923360178658),
            name: 'asNeededBoolean',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5432963497610639112),
            name: 'asNeededCodeableConceptId',
            type: 11,
            flags: 520,
            indexId: const IdUid(28, 408432012883978472),
            relationTarget: 'CodeableConcept'),
        ModelProperty(
            id: const IdUid(9, 2067058342506145260),
            name: 'siteId',
            type: 11,
            flags: 520,
            indexId: const IdUid(29, 4127027744484594653),
            relationTarget: 'CodeableConcept'),
        ModelProperty(
            id: const IdUid(10, 7388248533818027069),
            name: 'routeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(30, 4743868676742714579),
            relationTarget: 'CodeableConcept'),
        ModelProperty(
            id: const IdUid(11, 4412796112137833124),
            name: 'methodId',
            type: 11,
            flags: 520,
            indexId: const IdUid(31, 5741342733913692452),
            relationTarget: 'CodeableConcept'),
        ModelProperty(
            id: const IdUid(12, 258028397625193460),
            name: 'maxDosePerPeriodId',
            type: 11,
            flags: 520,
            indexId: const IdUid(32, 7668272385115970011),
            relationTarget: 'Ratio'),
        ModelProperty(
            id: const IdUid(13, 7359305669015731457),
            name: 'maxDosePerAdministrationId',
            type: 11,
            flags: 520,
            indexId: const IdUid(33, 9044054984896262390),
            relationTarget: 'Quantity'),
        ModelProperty(
            id: const IdUid(14, 8692430219709788204),
            name: 'maxDosePerLifetimeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(34, 4699767208947499907),
            relationTarget: 'Quantity')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(24, 5661611636097124469),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896)),
        ModelRelation(
            id: const IdUid(25, 2622671956837697754),
            name: 'modifierExtension',
            targetId: const IdUid(30, 831337593010685896)),
        ModelRelation(
            id: const IdUid(26, 6122422252689807230),
            name: 'additionalInstruction',
            targetId: const IdUid(5, 4072455885617490063)),
        ModelRelation(
            id: const IdUid(27, 5635927303305217738),
            name: 'doseAndRate',
            targetId: const IdUid(18, 9048160058167041097))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(18, 9048160058167041097),
      name: 'DosageDoseAndRate',
      lastPropertyId: const IdUid(8, 4702695538744445940),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6977397761859114250),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7933022409387363769),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(35, 235412751592889363),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 1717081468631041488),
            name: 'typeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(36, 3016256201321037595),
            relationTarget: 'CodeableConcept'),
        ModelProperty(
            id: const IdUid(4, 3484078665491653186),
            name: 'doseRangeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(37, 742349995299482259),
            relationTarget: 'Range'),
        ModelProperty(
            id: const IdUid(5, 7223241902096144737),
            name: 'doseQuantityId',
            type: 11,
            flags: 520,
            indexId: const IdUid(38, 1693688926257401948),
            relationTarget: 'Quantity'),
        ModelProperty(
            id: const IdUid(6, 2872290054101476865),
            name: 'rateRatioId',
            type: 11,
            flags: 520,
            indexId: const IdUid(39, 336507671320726704),
            relationTarget: 'Ratio'),
        ModelProperty(
            id: const IdUid(7, 3861469872172066427),
            name: 'rateRangeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(40, 253602478820526790),
            relationTarget: 'Range'),
        ModelProperty(
            id: const IdUid(8, 4702695538744445940),
            name: 'rateQuantityId',
            type: 11,
            flags: 520,
            indexId: const IdUid(41, 1929825987951888934),
            relationTarget: 'Quantity')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(28, 928209278822394973),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(19, 8913476507845935922),
      name: 'ElementDefinition',
      lastPropertyId: const IdUid(197, 1927566768721719793),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1767453884345617442),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1813683791298560307),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(42, 7087845589028688),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 3902464514081896318),
            name: 'path',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5593782168054836888),
            name: 'representation',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6473965477335691729),
            name: 'sliceName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2888127038761660292),
            name: 'sliceIsConstraining',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7523511780830252326),
            name: 'label',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8050559249652848519),
            name: 'slicingId',
            type: 11,
            flags: 520,
            indexId: const IdUid(43, 2081200987309411697),
            relationTarget: 'ElementDefinitionSlicing'),
        ModelProperty(
            id: const IdUid(9, 6731682023823128338),
            name: 'short',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 5929825303273907806),
            name: 'definition',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 832300156973670707),
            name: 'comment',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 2832770514612479734),
            name: 'requirements',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 2767260984682648437),
            name: 'alias',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 1764678528012659054),
            name: 'min',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 8778676220325517013),
            name: 'max',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 3283371811227692481),
            name: 'baseId',
            type: 11,
            flags: 520,
            indexId: const IdUid(44, 6460885090880213593),
            relationTarget: 'ElementDefinitionBase'),
        ModelProperty(
            id: const IdUid(17, 2062295017511426839),
            name: 'contentReference',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 901538268241598808),
            name: 'defaultValueBase64Binary',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 7018147748761911172),
            name: 'defaultValueBoolean',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 9091053993460715044),
            name: 'defaultValueCanonical',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 8918188702288161902),
            name: 'defaultValueCode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 2307349451108548671),
            name: 'defaultValueDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 1820665119575369641),
            name: 'defaultValueDateTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 6795477933644870840),
            name: 'defaultValueDecimal',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(25, 1685557542131754194),
            name: 'defaultValueId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 7204937721415748036),
            name: 'defaultValueInstant',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 2272439359535155235),
            name: 'defaultValueInteger',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(28, 8129601978283540453),
            name: 'defaultValueMarkdown',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(29, 5549671706825935486),
            name: 'defaultValueOid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(30, 4035120251797412269),
            name: 'defaultValuePositiveInt',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(31, 5901655232765141631),
            name: 'defaultValueString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(32, 3391973716499233598),
            name: 'defaultValueTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(33, 5795004578004783810),
            name: 'defaultValueUnsignedInt',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(34, 1873815719166745361),
            name: 'defaultValueUri',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(35, 961698470207459716),
            name: 'defaultValueUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(36, 3820307775682071318),
            name: 'defaultValueUuid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(37, 3478823280003115650),
            name: 'defaultValueAddressId',
            type: 11,
            flags: 520,
            indexId: const IdUid(45, 4994647290934566672),
            relationTarget: 'Address'),
        ModelProperty(
            id: const IdUid(38, 4917698380734715022),
            name: 'defaultValueAgeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(46, 7987889965830189755),
            relationTarget: 'Age'),
        ModelProperty(
            id: const IdUid(39, 6550037328333175546),
            name: 'defaultValueAnnotationId',
            type: 11,
            flags: 520,
            indexId: const IdUid(47, 571288221513414586),
            relationTarget: 'Annotation'),
        ModelProperty(
            id: const IdUid(40, 7690971746913226525),
            name: 'defaultValueAttachmentId',
            type: 11,
            flags: 520,
            indexId: const IdUid(48, 1107940126277658328),
            relationTarget: 'Attachment'),
        ModelProperty(
            id: const IdUid(41, 2409359809369368574),
            name: 'defaultValueCodeableConceptId',
            type: 11,
            flags: 520,
            indexId: const IdUid(49, 6681003338234692158),
            relationTarget: 'CodeableConcept'),
        ModelProperty(
            id: const IdUid(42, 8927305346459453386),
            name: 'defaultValueCodeableReferenceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(50, 1185620568733616307),
            relationTarget: 'CodeableReference'),
        ModelProperty(
            id: const IdUid(43, 4102294085307260654),
            name: 'defaultValueCodingId',
            type: 11,
            flags: 520,
            indexId: const IdUid(51, 2304716378303121880),
            relationTarget: 'Coding'),
        ModelProperty(
            id: const IdUid(44, 3625742321295376495),
            name: 'defaultValueContactPointId',
            type: 11,
            flags: 520,
            indexId: const IdUid(52, 1360887838454311817),
            relationTarget: 'ContactPoint'),
        ModelProperty(
            id: const IdUid(45, 1119461542900759862),
            name: 'defaultValueCountId',
            type: 11,
            flags: 520,
            indexId: const IdUid(53, 9126610155047982011),
            relationTarget: 'Count'),
        ModelProperty(
            id: const IdUid(46, 4981400721479062448),
            name: 'defaultValueDistanceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(54, 671164676775543310),
            relationTarget: 'Distance'),
        ModelProperty(
            id: const IdUid(47, 5010101945118254980),
            name: 'defaultValueDurationId',
            type: 11,
            flags: 520,
            indexId: const IdUid(55, 4910106748622408583),
            relationTarget: 'FhirDuration'),
        ModelProperty(
            id: const IdUid(48, 4843755170241463498),
            name: 'defaultValueHumanNameId',
            type: 11,
            flags: 520,
            indexId: const IdUid(56, 2615506882900451966),
            relationTarget: 'HumanName'),
        ModelProperty(
            id: const IdUid(49, 2376860987751148841),
            name: 'defaultValueIdentifierId',
            type: 11,
            flags: 520,
            indexId: const IdUid(57, 7586037340840133250),
            relationTarget: 'Identifier'),
        ModelProperty(
            id: const IdUid(50, 3319689681276215715),
            name: 'defaultValueMoneyId',
            type: 11,
            flags: 520,
            indexId: const IdUid(58, 1475802939458905728),
            relationTarget: 'Money'),
        ModelProperty(
            id: const IdUid(51, 2498695885210609809),
            name: 'defaultValuePeriodId',
            type: 11,
            flags: 520,
            indexId: const IdUid(59, 4903292075148760717),
            relationTarget: 'Period'),
        ModelProperty(
            id: const IdUid(52, 3033394055354671657),
            name: 'defaultValueQuantityId',
            type: 11,
            flags: 520,
            indexId: const IdUid(60, 5933977134332453812),
            relationTarget: 'Quantity'),
        ModelProperty(
            id: const IdUid(53, 5911454691016326713),
            name: 'defaultValueRangeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(61, 8253060042970859601),
            relationTarget: 'Range'),
        ModelProperty(
            id: const IdUid(54, 7221031630818904323),
            name: 'defaultValueRatioId',
            type: 11,
            flags: 520,
            indexId: const IdUid(62, 1057552237995161470),
            relationTarget: 'Ratio'),
        ModelProperty(
            id: const IdUid(55, 4704516211097749462),
            name: 'defaultValueRatioRangeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(63, 8033554728957744867),
            relationTarget: 'RatioRange'),
        ModelProperty(
            id: const IdUid(56, 5197438856402719647),
            name: 'defaultValueReferenceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(64, 4365684985677730854),
            relationTarget: 'Reference'),
        ModelProperty(
            id: const IdUid(57, 8612703052287638643),
            name: 'defaultValueSampledDataId',
            type: 11,
            flags: 520,
            indexId: const IdUid(65, 2654497831045608831),
            relationTarget: 'SampledData'),
        ModelProperty(
            id: const IdUid(58, 572537362507532641),
            name: 'defaultValueSignatureId',
            type: 11,
            flags: 520,
            indexId: const IdUid(66, 4727397269459020262),
            relationTarget: 'Signature'),
        ModelProperty(
            id: const IdUid(59, 8281371499723456127),
            name: 'defaultValueTimingId',
            type: 11,
            flags: 520,
            indexId: const IdUid(67, 3653545537136664361),
            relationTarget: 'Timing'),
        ModelProperty(
            id: const IdUid(60, 3087127094844490475),
            name: 'defaultValueContactDetailId',
            type: 11,
            flags: 520,
            indexId: const IdUid(68, 1754682824421578007),
            relationTarget: 'ContactDetail'),
        ModelProperty(
            id: const IdUid(61, 4084747195862658423),
            name: 'defaultValueContributorId',
            type: 11,
            flags: 520,
            indexId: const IdUid(69, 4389691751694953853),
            relationTarget: 'Contributor'),
        ModelProperty(
            id: const IdUid(62, 8642031169498459215),
            name: 'defaultValueDataRequirementId',
            type: 11,
            flags: 520,
            indexId: const IdUid(70, 4067564293814811725),
            relationTarget: 'DataRequirement'),
        ModelProperty(
            id: const IdUid(63, 7754070402876681568),
            name: 'defaultValueExpressionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(71, 3403942645752653157),
            relationTarget: 'FhirExpression'),
        ModelProperty(
            id: const IdUid(64, 3287604283107211507),
            name: 'defaultValueParameterDefinitionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(72, 3040239570312895013),
            relationTarget: 'ParameterDefinition'),
        ModelProperty(
            id: const IdUid(65, 7764291535185765426),
            name: 'defaultValueRelatedArtifactId',
            type: 11,
            flags: 520,
            indexId: const IdUid(73, 8944868987882303683),
            relationTarget: 'RelatedArtifact'),
        ModelProperty(
            id: const IdUid(66, 1064699545939970558),
            name: 'defaultValueTriggerDefinitionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(74, 3479084234668153238),
            relationTarget: 'TriggerDefinition'),
        ModelProperty(
            id: const IdUid(67, 4208680714335953868),
            name: 'defaultValueUsageContextId',
            type: 11,
            flags: 520,
            indexId: const IdUid(75, 2948789600353104480),
            relationTarget: 'UsageContext'),
        ModelProperty(
            id: const IdUid(68, 8270814404332237079),
            name: 'defaultValueDosageId',
            type: 11,
            flags: 520,
            indexId: const IdUid(76, 4010665632789784052),
            relationTarget: 'Dosage'),
        ModelProperty(
            id: const IdUid(69, 133296437740294568),
            name: 'meaningWhenMissing',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(70, 2706030873920315112),
            name: 'orderMeaning',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(71, 1998161345955287243),
            name: 'fixedBase64Binary',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(72, 4145379735082241554),
            name: 'fixedBoolean',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(73, 954370666044318785),
            name: 'fixedCanonical',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(74, 7527867313882610954),
            name: 'fixedCode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(75, 3325059861977278665),
            name: 'fixedDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(76, 3135454699746574921),
            name: 'fixedDateTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(77, 675973703319405370),
            name: 'fixedDecimal',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(78, 4152495177994821235),
            name: 'fixedId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(79, 5585064671835278121),
            name: 'fixedInstant',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(80, 5912752833331144480),
            name: 'fixedInteger',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(81, 8487158663172271996),
            name: 'fixedMarkdown',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(82, 1959515938964690619),
            name: 'fixedOid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(83, 6814948304588252859),
            name: 'fixedPositiveInt',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(84, 7437358402156363583),
            name: 'fixedString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(85, 8332085514318707254),
            name: 'fixedTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(86, 1816670031114986479),
            name: 'fixedUnsignedInt',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(87, 6595614470982968038),
            name: 'fixedUri',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(88, 6907981278757675219),
            name: 'fixedUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(89, 3842374775454041186),
            name: 'fixedUuid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(90, 2841089798732450094),
            name: 'fixedAddressId',
            type: 11,
            flags: 520,
            indexId: const IdUid(77, 2982435024763054045),
            relationTarget: 'Address'),
        ModelProperty(
            id: const IdUid(91, 6749713685598464871),
            name: 'fixedAgeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(78, 7813738198508620807),
            relationTarget: 'Age'),
        ModelProperty(
            id: const IdUid(92, 3542167100240655294),
            name: 'fixedAnnotationId',
            type: 11,
            flags: 520,
            indexId: const IdUid(79, 2817259622110474355),
            relationTarget: 'Annotation'),
        ModelProperty(
            id: const IdUid(93, 7360529785916995869),
            name: 'fixedAttachmentId',
            type: 11,
            flags: 520,
            indexId: const IdUid(80, 2417919594048527389),
            relationTarget: 'Attachment'),
        ModelProperty(
            id: const IdUid(94, 6912784506988717132),
            name: 'fixedCodeableConceptId',
            type: 11,
            flags: 520,
            indexId: const IdUid(81, 2031258728531971121),
            relationTarget: 'CodeableConcept'),
        ModelProperty(
            id: const IdUid(95, 3487436787606365134),
            name: 'fixedCodeableReferenceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(82, 5632067638404138833),
            relationTarget: 'CodeableReference'),
        ModelProperty(
            id: const IdUid(96, 5832971031778375477),
            name: 'fixedCodingId',
            type: 11,
            flags: 520,
            indexId: const IdUid(83, 7084634352829374126),
            relationTarget: 'Coding'),
        ModelProperty(
            id: const IdUid(97, 3114002330506534769),
            name: 'fixedContactPointId',
            type: 11,
            flags: 520,
            indexId: const IdUid(84, 2668796389550925823),
            relationTarget: 'ContactPoint'),
        ModelProperty(
            id: const IdUid(98, 3900301549840340091),
            name: 'fixedCountId',
            type: 11,
            flags: 520,
            indexId: const IdUid(85, 2842773435974300756),
            relationTarget: 'Count'),
        ModelProperty(
            id: const IdUid(99, 7223216278423199449),
            name: 'fixedDistanceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(86, 6274209465254223414),
            relationTarget: 'Distance'),
        ModelProperty(
            id: const IdUid(100, 5497202441092386042),
            name: 'fixedDurationId',
            type: 11,
            flags: 520,
            indexId: const IdUid(87, 7704825717609291327),
            relationTarget: 'FhirDuration'),
        ModelProperty(
            id: const IdUid(101, 2478103569191658391),
            name: 'fixedHumanNameId',
            type: 11,
            flags: 520,
            indexId: const IdUid(88, 8135675048689272537),
            relationTarget: 'HumanName'),
        ModelProperty(
            id: const IdUid(102, 2699630753342792635),
            name: 'fixedIdentifierId',
            type: 11,
            flags: 520,
            indexId: const IdUid(89, 531536213621635645),
            relationTarget: 'Identifier'),
        ModelProperty(
            id: const IdUid(103, 3331055701217776323),
            name: 'fixedMoneyId',
            type: 11,
            flags: 520,
            indexId: const IdUid(90, 5765659019186501656),
            relationTarget: 'Money'),
        ModelProperty(
            id: const IdUid(104, 3125355433069118677),
            name: 'fixedPeriodId',
            type: 11,
            flags: 520,
            indexId: const IdUid(91, 323744630624375019),
            relationTarget: 'Period'),
        ModelProperty(
            id: const IdUid(105, 3057228985137841008),
            name: 'fixedQuantityId',
            type: 11,
            flags: 520,
            indexId: const IdUid(92, 790956533748141644),
            relationTarget: 'Quantity'),
        ModelProperty(
            id: const IdUid(106, 2722327482527536614),
            name: 'fixedRangeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(93, 577715337918701096),
            relationTarget: 'Range'),
        ModelProperty(
            id: const IdUid(107, 1100445536920012773),
            name: 'fixedRatioId',
            type: 11,
            flags: 520,
            indexId: const IdUid(94, 3871510545837112319),
            relationTarget: 'Ratio'),
        ModelProperty(
            id: const IdUid(108, 6904276237633406469),
            name: 'fixedRatioRangeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(95, 3758981998920216400),
            relationTarget: 'RatioRange'),
        ModelProperty(
            id: const IdUid(109, 7515474323556367000),
            name: 'fixedReferenceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(96, 3549145836610343690),
            relationTarget: 'Reference'),
        ModelProperty(
            id: const IdUid(110, 5434050285895529896),
            name: 'fixedSampledDataId',
            type: 11,
            flags: 520,
            indexId: const IdUid(97, 4262248328353096475),
            relationTarget: 'SampledData'),
        ModelProperty(
            id: const IdUid(111, 9222313433751828890),
            name: 'fixedSignatureId',
            type: 11,
            flags: 520,
            indexId: const IdUid(98, 7500476638336853777),
            relationTarget: 'Signature'),
        ModelProperty(
            id: const IdUid(112, 5068656519617761819),
            name: 'fixedTimingId',
            type: 11,
            flags: 520,
            indexId: const IdUid(99, 5200583267161921724),
            relationTarget: 'Timing'),
        ModelProperty(
            id: const IdUid(113, 3241273891120926408),
            name: 'fixedContactDetailId',
            type: 11,
            flags: 520,
            indexId: const IdUid(100, 5773891104388533565),
            relationTarget: 'ContactDetail'),
        ModelProperty(
            id: const IdUid(114, 6092332670223585063),
            name: 'fixedContributorId',
            type: 11,
            flags: 520,
            indexId: const IdUid(101, 3301420022921819521),
            relationTarget: 'Contributor'),
        ModelProperty(
            id: const IdUid(115, 7007631346243845213),
            name: 'fixedDataRequirementId',
            type: 11,
            flags: 520,
            indexId: const IdUid(102, 575927707294852125),
            relationTarget: 'DataRequirement'),
        ModelProperty(
            id: const IdUid(116, 2547232491613583658),
            name: 'fixedExpressionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(103, 7045269298739470567),
            relationTarget: 'FhirExpression'),
        ModelProperty(
            id: const IdUid(117, 3723598551585340572),
            name: 'fixedParameterDefinitionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(104, 4089529135892704704),
            relationTarget: 'ParameterDefinition'),
        ModelProperty(
            id: const IdUid(118, 104316266625964477),
            name: 'fixedRelatedArtifactId',
            type: 11,
            flags: 520,
            indexId: const IdUid(105, 932321169679649758),
            relationTarget: 'RelatedArtifact'),
        ModelProperty(
            id: const IdUid(119, 7388771393019617939),
            name: 'fixedTriggerDefinitionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(106, 5038392831613078321),
            relationTarget: 'TriggerDefinition'),
        ModelProperty(
            id: const IdUid(120, 812803190333721494),
            name: 'fixedUsageContextId',
            type: 11,
            flags: 520,
            indexId: const IdUid(107, 7572004463763772673),
            relationTarget: 'UsageContext'),
        ModelProperty(
            id: const IdUid(121, 5183916523381577317),
            name: 'fixedDosageId',
            type: 11,
            flags: 520,
            indexId: const IdUid(108, 248880892884625378),
            relationTarget: 'Dosage'),
        ModelProperty(
            id: const IdUid(122, 7580949262062015661),
            name: 'patternBase64Binary',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(123, 4986035408605655638),
            name: 'patternBoolean',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(124, 6222947322846513425),
            name: 'patternCanonical',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(125, 4307605510414376068),
            name: 'patternCode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(126, 6050558035242473833),
            name: 'patternDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(127, 6193972385121013091),
            name: 'patternDateTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(128, 1958381141998781441),
            name: 'patternDecimal',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(129, 2715944450218424527),
            name: 'patternId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(130, 8440004752429923283),
            name: 'patternInstant',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(131, 3072430517425190863),
            name: 'patternInteger',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(132, 6395700474776581678),
            name: 'patternMarkdown',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(133, 7853764326502018765),
            name: 'patternOid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(134, 103964159557712236),
            name: 'patternPositiveInt',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(135, 451735511459899672),
            name: 'patternString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(136, 1658464071053994741),
            name: 'patternTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(137, 814258823379602388),
            name: 'patternUnsignedInt',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(138, 4534715548980463659),
            name: 'patternUri',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(139, 3970502119890075615),
            name: 'patternUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(140, 7959913420389795481),
            name: 'patternUuid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(141, 5328751467964089226),
            name: 'patternAddressId',
            type: 11,
            flags: 520,
            indexId: const IdUid(109, 999189709948206624),
            relationTarget: 'Address'),
        ModelProperty(
            id: const IdUid(142, 8718207539245146384),
            name: 'patternAgeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(110, 2034087538972776757),
            relationTarget: 'Age'),
        ModelProperty(
            id: const IdUid(143, 755030566459342931),
            name: 'patternAnnotationId',
            type: 11,
            flags: 520,
            indexId: const IdUid(111, 2873737271249504307),
            relationTarget: 'Annotation'),
        ModelProperty(
            id: const IdUid(144, 3615708354242467424),
            name: 'patternAttachmentId',
            type: 11,
            flags: 520,
            indexId: const IdUid(112, 2573271546935637380),
            relationTarget: 'Attachment'),
        ModelProperty(
            id: const IdUid(145, 3754747360806106416),
            name: 'patternCodeableConceptId',
            type: 11,
            flags: 520,
            indexId: const IdUid(113, 2958224551114991705),
            relationTarget: 'CodeableConcept'),
        ModelProperty(
            id: const IdUid(146, 3609296071402546057),
            name: 'patternCodeableReferenceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(114, 650277353455865922),
            relationTarget: 'CodeableReference'),
        ModelProperty(
            id: const IdUid(147, 2350980595162444739),
            name: 'patternCodingId',
            type: 11,
            flags: 520,
            indexId: const IdUid(115, 3982325005091796497),
            relationTarget: 'Coding'),
        ModelProperty(
            id: const IdUid(148, 7955846672974379410),
            name: 'patternContactPointId',
            type: 11,
            flags: 520,
            indexId: const IdUid(116, 3223857159289643488),
            relationTarget: 'ContactPoint'),
        ModelProperty(
            id: const IdUid(149, 4899919574901749452),
            name: 'patternCountId',
            type: 11,
            flags: 520,
            indexId: const IdUid(117, 8918364094985050914),
            relationTarget: 'Count'),
        ModelProperty(
            id: const IdUid(150, 1643426647919427401),
            name: 'patternDistanceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(118, 4292112364550545783),
            relationTarget: 'Distance'),
        ModelProperty(
            id: const IdUid(151, 8907179114528756631),
            name: 'patternDurationId',
            type: 11,
            flags: 520,
            indexId: const IdUid(119, 7869915487042659402),
            relationTarget: 'FhirDuration'),
        ModelProperty(
            id: const IdUid(152, 516884039266986779),
            name: 'patternHumanNameId',
            type: 11,
            flags: 520,
            indexId: const IdUid(120, 22934363358873164),
            relationTarget: 'HumanName'),
        ModelProperty(
            id: const IdUid(153, 6088355042019930409),
            name: 'patternIdentifierId',
            type: 11,
            flags: 520,
            indexId: const IdUid(121, 3898499624081903157),
            relationTarget: 'Identifier'),
        ModelProperty(
            id: const IdUid(154, 8652948252825174006),
            name: 'patternMoneyId',
            type: 11,
            flags: 520,
            indexId: const IdUid(122, 4427407750839961343),
            relationTarget: 'Money'),
        ModelProperty(
            id: const IdUid(155, 1900426122690002480),
            name: 'patternPeriodId',
            type: 11,
            flags: 520,
            indexId: const IdUid(123, 1923632386592856403),
            relationTarget: 'Period'),
        ModelProperty(
            id: const IdUid(156, 8916461248245293210),
            name: 'patternQuantityId',
            type: 11,
            flags: 520,
            indexId: const IdUid(124, 2696031415299881774),
            relationTarget: 'Quantity'),
        ModelProperty(
            id: const IdUid(157, 7680396844683149588),
            name: 'patternRangeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(125, 5825542848403909234),
            relationTarget: 'Range'),
        ModelProperty(
            id: const IdUid(158, 5408115476691463300),
            name: 'patternRatioId',
            type: 11,
            flags: 520,
            indexId: const IdUid(126, 4095751331308102261),
            relationTarget: 'Ratio'),
        ModelProperty(
            id: const IdUid(159, 2808781582145300310),
            name: 'patternRatioRangeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(127, 8581887909055280415),
            relationTarget: 'RatioRange'),
        ModelProperty(
            id: const IdUid(160, 5266312580365788409),
            name: 'patternReferenceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(128, 26863603661728958),
            relationTarget: 'Reference'),
        ModelProperty(
            id: const IdUid(161, 2400344854513419492),
            name: 'patternSampledDataId',
            type: 11,
            flags: 520,
            indexId: const IdUid(129, 5002733420048177869),
            relationTarget: 'SampledData'),
        ModelProperty(
            id: const IdUid(162, 1010173390570968406),
            name: 'patternSignatureId',
            type: 11,
            flags: 520,
            indexId: const IdUid(130, 124680554158257205),
            relationTarget: 'Signature'),
        ModelProperty(
            id: const IdUid(163, 9189791562665897303),
            name: 'patternTimingId',
            type: 11,
            flags: 520,
            indexId: const IdUid(131, 2381653065527371766),
            relationTarget: 'Timing'),
        ModelProperty(
            id: const IdUid(164, 8087794755473414443),
            name: 'patternContactDetailId',
            type: 11,
            flags: 520,
            indexId: const IdUid(132, 5215730330638786136),
            relationTarget: 'ContactDetail'),
        ModelProperty(
            id: const IdUid(165, 3529632567004558702),
            name: 'patternContributorId',
            type: 11,
            flags: 520,
            indexId: const IdUid(133, 243111187773248560),
            relationTarget: 'Contributor'),
        ModelProperty(
            id: const IdUid(166, 4230623101899049542),
            name: 'patternDataRequirementId',
            type: 11,
            flags: 520,
            indexId: const IdUid(134, 1254123307279318437),
            relationTarget: 'DataRequirement'),
        ModelProperty(
            id: const IdUid(167, 9199208426487639491),
            name: 'patternExpressionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(135, 4776772741813452541),
            relationTarget: 'FhirExpression'),
        ModelProperty(
            id: const IdUid(168, 3960849438841276716),
            name: 'patternParameterDefinitionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(136, 2440743218867562949),
            relationTarget: 'ParameterDefinition'),
        ModelProperty(
            id: const IdUid(169, 1319523644932189251),
            name: 'patternRelatedArtifactId',
            type: 11,
            flags: 520,
            indexId: const IdUid(137, 4044959556406139231),
            relationTarget: 'RelatedArtifact'),
        ModelProperty(
            id: const IdUid(170, 699580554235711849),
            name: 'patternTriggerDefinitionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(138, 2941043077636995456),
            relationTarget: 'TriggerDefinition'),
        ModelProperty(
            id: const IdUid(171, 6256040713829947749),
            name: 'patternUsageContextId',
            type: 11,
            flags: 520,
            indexId: const IdUid(139, 990906660756329012),
            relationTarget: 'UsageContext'),
        ModelProperty(
            id: const IdUid(172, 4396406314764628350),
            name: 'patternDosageId',
            type: 11,
            flags: 520,
            indexId: const IdUid(140, 846767358636789180),
            relationTarget: 'Dosage'),
        ModelProperty(
            id: const IdUid(173, 3008692448657067943),
            name: 'minValueDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(174, 8368655267204293614),
            name: 'minValueDateTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(175, 3446182820337532809),
            name: 'minValueInstant',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(176, 322917318781002930),
            name: 'minValueTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(177, 2694195297591683522),
            name: 'minValueDecimal',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(178, 1073656608716655110),
            name: 'minValueInteger',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(179, 8283577291752268040),
            name: 'minValuePositiveInt',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(180, 6147298360237486736),
            name: 'minValueUnsignedInt',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(181, 3719446838554762090),
            name: 'minValueQuantityId',
            type: 11,
            flags: 520,
            indexId: const IdUid(141, 5370808906854585137),
            relationTarget: 'Quantity'),
        ModelProperty(
            id: const IdUid(182, 7658058919806147251),
            name: 'maxValueDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(183, 7221883929551409327),
            name: 'maxValueDateTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(184, 522471051205771664),
            name: 'maxValueInstant',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(185, 7717788666119655759),
            name: 'maxValueTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(186, 7892969380468588257),
            name: 'maxValueDecimal',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(187, 9212259512324004792),
            name: 'maxValueInteger',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(188, 2562893053022584299),
            name: 'maxValuePositiveInt',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(189, 7983654830988417850),
            name: 'maxValueUnsignedInt',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(190, 7796513319524072667),
            name: 'maxValueQuantityId',
            type: 11,
            flags: 520,
            indexId: const IdUid(142, 5816505152089143055),
            relationTarget: 'Quantity'),
        ModelProperty(
            id: const IdUid(191, 4753018294855923317),
            name: 'maxLength',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(192, 2655653037479800065),
            name: 'condition',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(193, 7280227504238831944),
            name: 'mustSupport',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(194, 4741270505079864627),
            name: 'isModifier',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(195, 4350350672348937310),
            name: 'isModifierReason',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(196, 7751087261160604573),
            name: 'isSummary',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(197, 1927566768721719793),
            name: 'bindingId',
            type: 11,
            flags: 520,
            indexId: const IdUid(143, 8157078747688145698),
            relationTarget: 'ElementDefinitionBinding')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(29, 1453052733457384952),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896)),
        ModelRelation(
            id: const IdUid(30, 8008397278996898298),
            name: 'modifierExtension',
            targetId: const IdUid(30, 831337593010685896)),
        ModelRelation(
            id: const IdUid(31, 2725728565443214419),
            name: 'code',
            targetId: const IdUid(7, 8873997066131547011)),
        ModelRelation(
            id: const IdUid(32, 8823085446638954400),
            name: 'type',
            targetId: const IdUid(27, 4312397847470320632)),
        ModelRelation(
            id: const IdUid(33, 6718451187790432466),
            name: 'example',
            targetId: const IdUid(24, 1386639418284003900)),
        ModelRelation(
            id: const IdUid(34, 3572186796424453792),
            name: 'constraint',
            targetId: const IdUid(22, 7063923319947308986)),
        ModelRelation(
            id: const IdUid(35, 8251137079209604200),
            name: 'mapping',
            targetId: const IdUid(25, 2085966617386934018))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(20, 2320268197505263333),
      name: 'ElementDefinitionBase',
      lastPropertyId: const IdUid(5, 3278516029428367117),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5407455201763694640),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1593966125052832756),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(144, 7108974785654132831),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 6776132825625511838),
            name: 'path',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 439928492044321916),
            name: 'min',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3278516029428367117),
            name: 'max',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(36, 2225785071504248397),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(21, 6848826541086676705),
      name: 'ElementDefinitionBinding',
      lastPropertyId: const IdUid(5, 2586958156863982967),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1002887622007680718),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 599698740399680843),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(145, 7938159593885091866),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 4002634822894755999),
            name: 'strength',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3620105229614434318),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2586958156863982967),
            name: 'valueSet',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(37, 587371036041266757),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(22, 7063923319947308986),
      name: 'ElementDefinitionConstraint',
      lastPropertyId: const IdUid(9, 5608424254047763994),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4685065456805169163),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8200216865717262431),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(146, 6008331037807827244),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 5596483128625757579),
            name: 'key',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2372918297217819169),
            name: 'requirements',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 983901550550761153),
            name: 'severity',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7727934708904686886),
            name: 'human',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1490250044410171844),
            name: 'expression',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4559544156217993192),
            name: 'xpath',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5608424254047763994),
            name: 'source',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(38, 4670091183011373018),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(23, 3824913290066637577),
      name: 'ElementDefinitionDiscriminator',
      lastPropertyId: const IdUid(4, 3850597720492832388),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5244129053858738894),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 328582317364152730),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(147, 1673813433077746828),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 6379458147598171555),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3850597720492832388),
            name: 'path',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(39, 2018628989330958989),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(24, 1386639418284003900),
      name: 'ElementDefinitionExample',
      lastPropertyId: const IdUid(54, 4421206570039604042),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3006895278315925501),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8246654684640577460),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(148, 3454675395394762690),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 546535346722749375),
            name: 'label',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1519982651916070575),
            name: 'valueBase64Binary',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7220852365874050389),
            name: 'valueBoolean',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 97693280360062005),
            name: 'valueCanonical',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8375547315152979959),
            name: 'valueCode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1168597900380722754),
            name: 'valueDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2635211161022558215),
            name: 'valueDateTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 5862353359234843300),
            name: 'valueDecimal',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 3684756404012394618),
            name: 'valueId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 374408798136023109),
            name: 'valueInstant',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 3803477437692823394),
            name: 'valueInteger',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 2714815306906489370),
            name: 'valueMarkdown',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 8197424598983931479),
            name: 'valueOid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 4370259964308770028),
            name: 'valuePositiveInt',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 5243568556358901534),
            name: 'valueString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 2152462506632426005),
            name: 'valueTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 986436502683644898),
            name: 'valueUnsignedInt',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 1458922990485157169),
            name: 'valueUri',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 3472981832895505232),
            name: 'valueUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 7038209093699458053),
            name: 'valueUuid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 8690836685882544300),
            name: 'valueAddressId',
            type: 11,
            flags: 520,
            indexId: const IdUid(149, 9078200008805581700),
            relationTarget: 'Address'),
        ModelProperty(
            id: const IdUid(24, 2702589657714943702),
            name: 'valueAgeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(150, 1684051792508414484),
            relationTarget: 'Age'),
        ModelProperty(
            id: const IdUid(25, 4584394059618857983),
            name: 'valueAnnotationId',
            type: 11,
            flags: 520,
            indexId: const IdUid(151, 8376763929793968960),
            relationTarget: 'Annotation'),
        ModelProperty(
            id: const IdUid(26, 8759321267324507458),
            name: 'valueAttachmentId',
            type: 11,
            flags: 520,
            indexId: const IdUid(152, 6337544354033168098),
            relationTarget: 'Attachment'),
        ModelProperty(
            id: const IdUid(27, 5905059815706094061),
            name: 'valueCodeableConceptId',
            type: 11,
            flags: 520,
            indexId: const IdUid(153, 6848810352523982917),
            relationTarget: 'CodeableConcept'),
        ModelProperty(
            id: const IdUid(28, 1539352501444288339),
            name: 'valueCodeableReferenceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(154, 3498565216050783834),
            relationTarget: 'CodeableReference'),
        ModelProperty(
            id: const IdUid(29, 8631038270579008347),
            name: 'valueCodingId',
            type: 11,
            flags: 520,
            indexId: const IdUid(155, 7888997477131589179),
            relationTarget: 'Coding'),
        ModelProperty(
            id: const IdUid(30, 4507508704703856560),
            name: 'valueContactPointId',
            type: 11,
            flags: 520,
            indexId: const IdUid(156, 4788644579973991893),
            relationTarget: 'ContactPoint'),
        ModelProperty(
            id: const IdUid(31, 7034394787051442327),
            name: 'valueCountId',
            type: 11,
            flags: 520,
            indexId: const IdUid(157, 987786473720644914),
            relationTarget: 'Count'),
        ModelProperty(
            id: const IdUid(32, 4160834786810691036),
            name: 'valueDistanceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(158, 6646733869154832036),
            relationTarget: 'Distance'),
        ModelProperty(
            id: const IdUid(33, 4349960948402434102),
            name: 'valueDurationId',
            type: 11,
            flags: 520,
            indexId: const IdUid(159, 7608606492325318171),
            relationTarget: 'FhirDuration'),
        ModelProperty(
            id: const IdUid(34, 3835755607090901552),
            name: 'valueHumanNameId',
            type: 11,
            flags: 520,
            indexId: const IdUid(160, 219869399905402356),
            relationTarget: 'HumanName'),
        ModelProperty(
            id: const IdUid(35, 6905542564917668361),
            name: 'valueIdentifierId',
            type: 11,
            flags: 520,
            indexId: const IdUid(161, 5729473195085723529),
            relationTarget: 'Identifier'),
        ModelProperty(
            id: const IdUid(36, 4817492234944322401),
            name: 'valueMoneyId',
            type: 11,
            flags: 520,
            indexId: const IdUid(162, 1919037308427463585),
            relationTarget: 'Money'),
        ModelProperty(
            id: const IdUid(37, 5985971731636343690),
            name: 'valuePeriodId',
            type: 11,
            flags: 520,
            indexId: const IdUid(163, 3852160146989738756),
            relationTarget: 'Period'),
        ModelProperty(
            id: const IdUid(38, 754555199052501035),
            name: 'valueQuantityId',
            type: 11,
            flags: 520,
            indexId: const IdUid(164, 1947328825510346514),
            relationTarget: 'Quantity'),
        ModelProperty(
            id: const IdUid(39, 4033483653217860620),
            name: 'valueRangeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(165, 3259491476231349967),
            relationTarget: 'Range'),
        ModelProperty(
            id: const IdUid(40, 6107253235014235892),
            name: 'valueRatioId',
            type: 11,
            flags: 520,
            indexId: const IdUid(166, 1484490046784882998),
            relationTarget: 'Ratio'),
        ModelProperty(
            id: const IdUid(41, 7333179132373751970),
            name: 'valueRatioRangeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(167, 2621922214585803820),
            relationTarget: 'RatioRange'),
        ModelProperty(
            id: const IdUid(42, 3692625633896134910),
            name: 'valueReferenceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(168, 4366914764533804366),
            relationTarget: 'Reference'),
        ModelProperty(
            id: const IdUid(43, 4509508652016950285),
            name: 'valueSampledDataId',
            type: 11,
            flags: 520,
            indexId: const IdUid(169, 8499270817246367492),
            relationTarget: 'SampledData'),
        ModelProperty(
            id: const IdUid(44, 4306660337648977478),
            name: 'valueSignatureId',
            type: 11,
            flags: 520,
            indexId: const IdUid(170, 4111486607080188880),
            relationTarget: 'Signature'),
        ModelProperty(
            id: const IdUid(45, 1990179671157546908),
            name: 'valueTimingId',
            type: 11,
            flags: 520,
            indexId: const IdUid(171, 1784502119838043902),
            relationTarget: 'Timing'),
        ModelProperty(
            id: const IdUid(46, 1657468304802012705),
            name: 'valueContactDetailId',
            type: 11,
            flags: 520,
            indexId: const IdUid(172, 8505571727105928719),
            relationTarget: 'ContactDetail'),
        ModelProperty(
            id: const IdUid(47, 3880614840521631905),
            name: 'valueContributorId',
            type: 11,
            flags: 520,
            indexId: const IdUid(173, 6499072614053670972),
            relationTarget: 'Contributor'),
        ModelProperty(
            id: const IdUid(48, 293204595954293101),
            name: 'valueDataRequirementId',
            type: 11,
            flags: 520,
            indexId: const IdUid(174, 1471953447480823004),
            relationTarget: 'DataRequirement'),
        ModelProperty(
            id: const IdUid(49, 8098346488652411877),
            name: 'valueExpressionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(175, 710887849309238451),
            relationTarget: 'FhirExpression'),
        ModelProperty(
            id: const IdUid(50, 2280720794137659646),
            name: 'valueParameterDefinitionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(176, 7838049778648492208),
            relationTarget: 'ParameterDefinition'),
        ModelProperty(
            id: const IdUid(51, 3683728341582293417),
            name: 'valueRelatedArtifactId',
            type: 11,
            flags: 520,
            indexId: const IdUid(177, 1148091536177689087),
            relationTarget: 'RelatedArtifact'),
        ModelProperty(
            id: const IdUid(52, 8871731968689532379),
            name: 'valueTriggerDefinitionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(178, 5285986258555103839),
            relationTarget: 'TriggerDefinition'),
        ModelProperty(
            id: const IdUid(53, 2060493086327111325),
            name: 'valueUsageContextId',
            type: 11,
            flags: 520,
            indexId: const IdUid(179, 9193807835290178523),
            relationTarget: 'UsageContext'),
        ModelProperty(
            id: const IdUid(54, 4421206570039604042),
            name: 'valueDosageId',
            type: 11,
            flags: 520,
            indexId: const IdUid(180, 5405677237688861495),
            relationTarget: 'Dosage')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(40, 4701127968206305797),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(25, 2085966617386934018),
      name: 'ElementDefinitionMapping',
      lastPropertyId: const IdUid(6, 3550938888273275002),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7948365018294549751),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7314354419916667393),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(181, 3343030014761114578),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 877451301566372871),
            name: 'identity',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 25764251711483625),
            name: 'language',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6596554544542295599),
            name: 'map',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3550938888273275002),
            name: 'comment',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(41, 9208166107015237971),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(26, 7656783099422489728),
      name: 'ElementDefinitionSlicing',
      lastPropertyId: const IdUid(5, 5122884734341396463),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5431358640076264559),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 9000208054447257336),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(182, 4723110838934713755),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 8626058402256607415),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8846139492264288191),
            name: 'ordered',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5122884734341396463),
            name: 'rules',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(42, 2020538066854467179),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896)),
        ModelRelation(
            id: const IdUid(43, 928214293580683055),
            name: 'discriminator',
            targetId: const IdUid(23, 3824913290066637577))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(27, 4312397847470320632),
      name: 'ElementDefinitionType',
      lastPropertyId: const IdUid(7, 7953459119933740230),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7209177787973475428),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7325396641200638802),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(183, 4927516157278340737),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 1300673831441499493),
            name: 'code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 77997588458849755),
            name: 'profile',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4426154032490167660),
            name: 'targetProfile',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8696045857282522195),
            name: 'aggregation',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7953459119933740230),
            name: 'versioning',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(44, 108913142060664374),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(28, 2730488837740519723),
      name: 'FhirDuration',
      lastPropertyId: const IdUid(7, 891596275503485356),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6563026246947029943),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5126255527357952641),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(184, 7251850469446701511),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 8175257263855675452),
            name: 'value',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5856143939938257165),
            name: 'comparator',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7662798906764844980),
            name: 'unit',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6784261156355995477),
            name: 'system',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 891596275503485356),
            name: 'code',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(45, 778665181701021132),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(29, 3497703774868246267),
      name: 'FhirExpression',
      lastPropertyId: const IdUid(7, 6809796294088063055),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5295803628739727467),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 918633946175410376),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(185, 8665892972568322842),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 1745745485777012055),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1536634749716645464),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4917878123547710479),
            name: 'language',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3544996867544471430),
            name: 'expression',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6809796294088063055),
            name: 'reference',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(46, 5374728728550899742),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(30, 831337593010685896),
      name: 'FhirExtension',
      lastPropertyId: const IdUid(54, 6435264808285853827),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2327520228520179726),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6916078297256128584),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(186, 3574113523818714930),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 6853263132122104455),
            name: 'urlId',
            type: 11,
            flags: 520,
            indexId: const IdUid(187, 1086949443361672839),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(4, 271408320321740497),
            name: 'valueBase64Binary',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2554039731535963763),
            name: 'valueBoolean',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4697621039605264337),
            name: 'valueCanonical',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8601411529827140379),
            name: 'valueCode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6900078436442431000),
            name: 'valueDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 9144663118395919278),
            name: 'valueDateTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 6133551015915366262),
            name: 'valueDecimal',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 8483951243492839470),
            name: 'valueId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 671876026223748327),
            name: 'valueInstant',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 3735902845586448097),
            name: 'valueInteger',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 258561510364831747),
            name: 'valueMarkdown',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 6263489358460456303),
            name: 'valueOid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 1185547407768586673),
            name: 'valuePositiveInt',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 6801211136741191217),
            name: 'valueString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 6737686944249583872),
            name: 'valueTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 1813030604214422268),
            name: 'valueUnsignedInt',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 6318059016999105290),
            name: 'valueUri',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 4256336128252812304),
            name: 'valueUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 4518438447354132118),
            name: 'valueUuid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 5925144473310077757),
            name: 'valueAddressId',
            type: 11,
            flags: 520,
            indexId: const IdUid(188, 2692418329188481805),
            relationTarget: 'Address'),
        ModelProperty(
            id: const IdUid(24, 140054625040080786),
            name: 'valueAgeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(189, 4551553597134060536),
            relationTarget: 'Age'),
        ModelProperty(
            id: const IdUid(25, 2902068262903914177),
            name: 'valueAnnotationId',
            type: 11,
            flags: 520,
            indexId: const IdUid(190, 4231313368019980865),
            relationTarget: 'Annotation'),
        ModelProperty(
            id: const IdUid(26, 3842429504629912251),
            name: 'valueAttachmentId',
            type: 11,
            flags: 520,
            indexId: const IdUid(191, 7566298285540076178),
            relationTarget: 'Attachment'),
        ModelProperty(
            id: const IdUid(27, 1504908546540637560),
            name: 'valueCodeableConceptId',
            type: 11,
            flags: 520,
            indexId: const IdUid(192, 7001263298622430317),
            relationTarget: 'CodeableConcept'),
        ModelProperty(
            id: const IdUid(28, 2375981237555358729),
            name: 'valueCodeableReferenceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(193, 1442818516471859543),
            relationTarget: 'CodeableReference'),
        ModelProperty(
            id: const IdUid(29, 4619137721994281909),
            name: 'valueCodingId',
            type: 11,
            flags: 520,
            indexId: const IdUid(194, 1295910694052819620),
            relationTarget: 'Coding'),
        ModelProperty(
            id: const IdUid(30, 7369710331634003359),
            name: 'valueContactPointId',
            type: 11,
            flags: 520,
            indexId: const IdUid(195, 7358523472093437382),
            relationTarget: 'ContactPoint'),
        ModelProperty(
            id: const IdUid(31, 1604942927643328161),
            name: 'valueCountId',
            type: 11,
            flags: 520,
            indexId: const IdUid(196, 3943803491996695254),
            relationTarget: 'Count'),
        ModelProperty(
            id: const IdUid(32, 1347512082487961331),
            name: 'valueDistanceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(197, 5980908567823540947),
            relationTarget: 'Distance'),
        ModelProperty(
            id: const IdUid(33, 122120290175975042),
            name: 'valueDurationId',
            type: 11,
            flags: 520,
            indexId: const IdUid(198, 6155265673962943234),
            relationTarget: 'FhirDuration'),
        ModelProperty(
            id: const IdUid(34, 3545554651396271149),
            name: 'valueHumanNameId',
            type: 11,
            flags: 520,
            indexId: const IdUid(199, 4123157641761765609),
            relationTarget: 'HumanName'),
        ModelProperty(
            id: const IdUid(35, 6007634205401003644),
            name: 'valueIdentifierId',
            type: 11,
            flags: 520,
            indexId: const IdUid(200, 196487548817167588),
            relationTarget: 'Identifier'),
        ModelProperty(
            id: const IdUid(36, 7461637955699405514),
            name: 'valueMoneyId',
            type: 11,
            flags: 520,
            indexId: const IdUid(201, 7621696103545870051),
            relationTarget: 'Money'),
        ModelProperty(
            id: const IdUid(37, 3519740543232473300),
            name: 'valuePeriodId',
            type: 11,
            flags: 520,
            indexId: const IdUid(202, 3248890565988092777),
            relationTarget: 'Period'),
        ModelProperty(
            id: const IdUid(38, 1361342449101887653),
            name: 'valueQuantityId',
            type: 11,
            flags: 520,
            indexId: const IdUid(203, 1200613807812505771),
            relationTarget: 'Quantity'),
        ModelProperty(
            id: const IdUid(39, 5648887278508812468),
            name: 'valueRangeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(204, 7833900643271402939),
            relationTarget: 'Range'),
        ModelProperty(
            id: const IdUid(40, 5793718738373842270),
            name: 'valueRatioId',
            type: 11,
            flags: 520,
            indexId: const IdUid(205, 1530622472477405095),
            relationTarget: 'Ratio'),
        ModelProperty(
            id: const IdUid(41, 2665491847945171017),
            name: 'valueRatioRangeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(206, 4902418581519297103),
            relationTarget: 'RatioRange'),
        ModelProperty(
            id: const IdUid(42, 5983475239356766638),
            name: 'valueReferenceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(207, 2054402465431492431),
            relationTarget: 'Reference'),
        ModelProperty(
            id: const IdUid(43, 5942879150208572953),
            name: 'valueSampledDataId',
            type: 11,
            flags: 520,
            indexId: const IdUid(208, 6866135204941965199),
            relationTarget: 'SampledData'),
        ModelProperty(
            id: const IdUid(44, 2529800798604093528),
            name: 'valueSignatureId',
            type: 11,
            flags: 520,
            indexId: const IdUid(209, 8537209085432836489),
            relationTarget: 'Signature'),
        ModelProperty(
            id: const IdUid(45, 8986065167420493526),
            name: 'valueTimingId',
            type: 11,
            flags: 520,
            indexId: const IdUid(210, 7056193034600541637),
            relationTarget: 'Timing'),
        ModelProperty(
            id: const IdUid(46, 1580475360647475361),
            name: 'valueContactDetailId',
            type: 11,
            flags: 520,
            indexId: const IdUid(211, 4046701372713122250),
            relationTarget: 'ContactDetail'),
        ModelProperty(
            id: const IdUid(47, 9083035835162248578),
            name: 'valueContributorId',
            type: 11,
            flags: 520,
            indexId: const IdUid(212, 3149914617730972055),
            relationTarget: 'Contributor'),
        ModelProperty(
            id: const IdUid(48, 2545411115887349053),
            name: 'valueDataRequirementId',
            type: 11,
            flags: 520,
            indexId: const IdUid(213, 2645337528092640103),
            relationTarget: 'DataRequirement'),
        ModelProperty(
            id: const IdUid(49, 1470205978116605103),
            name: 'valueExpressionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(214, 8919748234622636596),
            relationTarget: 'FhirExpression'),
        ModelProperty(
            id: const IdUid(50, 224809167049325536),
            name: 'valueParameterDefinitionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(215, 4081276922161081736),
            relationTarget: 'ParameterDefinition'),
        ModelProperty(
            id: const IdUid(51, 7588168188044685397),
            name: 'valueRelatedArtifactId',
            type: 11,
            flags: 520,
            indexId: const IdUid(216, 7636545345305378866),
            relationTarget: 'RelatedArtifact'),
        ModelProperty(
            id: const IdUid(52, 7379366075804430980),
            name: 'valueTriggerDefinitionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(217, 1093795993002008589),
            relationTarget: 'TriggerDefinition'),
        ModelProperty(
            id: const IdUid(53, 4606957714352762391),
            name: 'valueUsageContextId',
            type: 11,
            flags: 520,
            indexId: const IdUid(218, 5314205863434219923),
            relationTarget: 'UsageContext'),
        ModelProperty(
            id: const IdUid(54, 6435264808285853827),
            name: 'valueDosageId',
            type: 11,
            flags: 520,
            indexId: const IdUid(219, 2617941382951632840),
            relationTarget: 'Dosage')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(47, 901933457727935492),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(31, 2450822710459825391),
      name: 'FhirMeta',
      lastPropertyId: const IdUid(6, 867041437785549616),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5978264154070033735),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3855488840479378964),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(220, 8233466733117732640),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 4061086896233631156),
            name: 'versionId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6916796866848573754),
            name: 'lastUpdated',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1484216443207376315),
            name: 'source',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 867041437785549616),
            name: 'profile',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(48, 2987210260869339790),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896)),
        ModelRelation(
            id: const IdUid(49, 5170095741600583170),
            name: 'security',
            targetId: const IdUid(7, 8873997066131547011)),
        ModelRelation(
            id: const IdUid(50, 1796025709922315276),
            name: 'tag',
            targetId: const IdUid(7, 8873997066131547011))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(32, 845734375098130878),
      name: 'HumanName',
      lastPropertyId: const IdUid(9, 4125314229060945796),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3368406295867990826),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3110807090515770216),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(221, 4793239970552507165),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 1151662332637140852),
            name: 'use',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4412107062921502856),
            name: 'text',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 133999378616702044),
            name: 'family',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8336627015980420117),
            name: 'given',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6667489451318716551),
            name: 'prefix',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1597262108452126036),
            name: 'suffix',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4125314229060945796),
            name: 'periodId',
            type: 11,
            flags: 520,
            indexId: const IdUid(222, 5466470104313709399),
            relationTarget: 'Period')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(51, 6281623299292825350),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(33, 6534467377721421384),
      name: 'Identifier',
      lastPropertyId: const IdUid(8, 6142108774171919986),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2799154163549198020),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2123643006447660142),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(223, 9128011198997928373),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 4496352757450921895),
            name: 'use',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3708945993334172833),
            name: 'typeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(224, 8493089642089116217),
            relationTarget: 'CodeableConcept'),
        ModelProperty(
            id: const IdUid(5, 6183082840467380601),
            name: 'system',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3957584551630658266),
            name: 'value',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 9085917270493446054),
            name: 'periodId',
            type: 11,
            flags: 520,
            indexId: const IdUid(225, 6436409040892264681),
            relationTarget: 'Period'),
        ModelProperty(
            id: const IdUid(8, 6142108774171919986),
            name: 'assignerId',
            type: 11,
            flags: 520,
            indexId: const IdUid(226, 7358219595398280286),
            relationTarget: 'Reference')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(52, 49969622882249640),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(34, 2668448087298487506),
      name: 'MarketingStatus',
      lastPropertyId: const IdUid(7, 5214404535165477027),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7352258134966649728),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6927966617784310256),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(227, 8648641789432238699),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 4124069209505562875),
            name: 'countryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(228, 7306672973955746793),
            relationTarget: 'CodeableConcept'),
        ModelProperty(
            id: const IdUid(4, 918126593970876296),
            name: 'jurisdictionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(229, 2673670518594646171),
            relationTarget: 'CodeableConcept'),
        ModelProperty(
            id: const IdUid(5, 3730826375810291618),
            name: 'statusId',
            type: 11,
            flags: 520,
            indexId: const IdUid(230, 6623610407776739821),
            relationTarget: 'CodeableConcept'),
        ModelProperty(
            id: const IdUid(6, 7184635965370044512),
            name: 'dateRangeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(231, 1399250938136607053),
            relationTarget: 'Period'),
        ModelProperty(
            id: const IdUid(7, 5214404535165477027),
            name: 'restoreDate',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(53, 2785006517603228762),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896)),
        ModelRelation(
            id: const IdUid(54, 678667554732412306),
            name: 'modifierExtension',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(35, 620563914738326162),
      name: 'Money',
      lastPropertyId: const IdUid(4, 3252417564377259094),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8378469244276749243),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4423002700998991102),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(232, 8715713743812901809),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 3319949580545452578),
            name: 'value',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3252417564377259094),
            name: 'currency',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(55, 5368441623870937618),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(36, 4962194494067487817),
      name: 'Narrative',
      lastPropertyId: const IdUid(4, 1999635305223496707),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5015778642252904551),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3980673859540651057),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(233, 3919190854332771366),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 8935925098430532962),
            name: 'status',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1999635305223496707),
            name: 'div',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(56, 7523207715797787884),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(37, 478783003106925142),
      name: 'ParameterDefinition',
      lastPropertyId: const IdUid(9, 4157704040848187022),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3355440135359242642),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3770766718621055667),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(234, 2259295560795344134),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 6412760205594824373),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8750041768369785542),
            name: 'use',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8048188852882667728),
            name: 'min',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2502959428410293895),
            name: 'max',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7417346592842525484),
            name: 'documentation',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2122014559363574558),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4157704040848187022),
            name: 'profile',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(57, 3709863242248067216),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(38, 8048335178183178860),
      name: 'Period',
      lastPropertyId: const IdUid(4, 7755662922379975196),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4332358073413791533),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5881532201283669493),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(235, 344078139641118074),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 4485551563149925358),
            name: 'start',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7755662922379975196),
            name: 'end',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(58, 1250440300697268060),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(39, 9132863922527164313),
      name: 'Population',
      lastPropertyId: const IdUid(7, 8126268490331380598),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7714860520732462287),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3739220873508844686),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(236, 883989110056597557),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 3719418903280797478),
            name: 'ageRangeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(237, 8569996566976943565),
            relationTarget: 'Range'),
        ModelProperty(
            id: const IdUid(4, 6025056621296760567),
            name: 'ageCodeableConceptId',
            type: 11,
            flags: 520,
            indexId: const IdUid(238, 7329200389701795762),
            relationTarget: 'CodeableConcept'),
        ModelProperty(
            id: const IdUid(5, 66851727227570527),
            name: 'genderId',
            type: 11,
            flags: 520,
            indexId: const IdUid(239, 6157327741704414741),
            relationTarget: 'CodeableConcept'),
        ModelProperty(
            id: const IdUid(6, 4412682596888113892),
            name: 'raceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(240, 4803761279184161156),
            relationTarget: 'CodeableConcept'),
        ModelProperty(
            id: const IdUid(7, 8126268490331380598),
            name: 'physiologicalConditionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(241, 7788357079034912142),
            relationTarget: 'CodeableConcept')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(59, 6603003511893386885),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896)),
        ModelRelation(
            id: const IdUid(60, 4348425852881826923),
            name: 'modifierExtension',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(40, 2877034135281604646),
      name: 'ProdCharacteristic',
      lastPropertyId: const IdUid(12, 2951068242657959677),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8036494638922737362),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1035089197968851130),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(242, 1624374543982981565),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 1949191657203768331),
            name: 'heightId',
            type: 11,
            flags: 520,
            indexId: const IdUid(243, 3525632923788990183),
            relationTarget: 'Quantity'),
        ModelProperty(
            id: const IdUid(4, 4593774582330904027),
            name: 'widthId',
            type: 11,
            flags: 520,
            indexId: const IdUid(244, 2991092992639198572),
            relationTarget: 'Quantity'),
        ModelProperty(
            id: const IdUid(5, 1550617930274582445),
            name: 'depthId',
            type: 11,
            flags: 520,
            indexId: const IdUid(245, 8106092143880308632),
            relationTarget: 'Quantity'),
        ModelProperty(
            id: const IdUid(6, 1502530972855527311),
            name: 'weightId',
            type: 11,
            flags: 520,
            indexId: const IdUid(246, 1663985633486466954),
            relationTarget: 'Quantity'),
        ModelProperty(
            id: const IdUid(7, 330286552118770451),
            name: 'nominalVolumeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(247, 7565563953564026248),
            relationTarget: 'Quantity'),
        ModelProperty(
            id: const IdUid(8, 2462982521051239860),
            name: 'externalDiameterId',
            type: 11,
            flags: 520,
            indexId: const IdUid(248, 8874974851903031597),
            relationTarget: 'Quantity'),
        ModelProperty(
            id: const IdUid(9, 3625672796200346108),
            name: 'shape',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 6919354423522580098),
            name: 'color',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2073312277004260153),
            name: 'imprint',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 2951068242657959677),
            name: 'scoringId',
            type: 11,
            flags: 520,
            indexId: const IdUid(249, 3445435655096924167),
            relationTarget: 'CodeableConcept')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(61, 2340992178078907419),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896)),
        ModelRelation(
            id: const IdUid(62, 8245144204854539335),
            name: 'modifierExtension',
            targetId: const IdUid(30, 831337593010685896)),
        ModelRelation(
            id: const IdUid(63, 6293245084093540252),
            name: 'image',
            targetId: const IdUid(4, 502513322599364627))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(41, 4828709974409073251),
      name: 'ProductShelfLife',
      lastPropertyId: const IdUid(5, 5841974970647219821),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4621875896575981283),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3997513230177494715),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(250, 6340610480855975224),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 4476844633190275976),
            name: 'identifierId',
            type: 11,
            flags: 520,
            indexId: const IdUid(251, 7808280709853740163),
            relationTarget: 'Identifier'),
        ModelProperty(
            id: const IdUid(4, 4532050969988909280),
            name: 'typeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(252, 8926148507698236508),
            relationTarget: 'CodeableConcept'),
        ModelProperty(
            id: const IdUid(5, 5841974970647219821),
            name: 'periodId',
            type: 11,
            flags: 520,
            indexId: const IdUid(253, 4831727863480766321),
            relationTarget: 'Quantity')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(64, 7220790915741276090),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896)),
        ModelRelation(
            id: const IdUid(65, 3391160544015853776),
            name: 'modifierExtension',
            targetId: const IdUid(30, 831337593010685896)),
        ModelRelation(
            id: const IdUid(66, 5269276416280510455),
            name: 'specialPrecautionsForStorage',
            targetId: const IdUid(5, 4072455885617490063))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(42, 2604519101871956610),
      name: 'Quantity',
      lastPropertyId: const IdUid(7, 499787770195558614),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 712909050102863822),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6545354984086814968),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(254, 9181005293786820739),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 5432733563382961916),
            name: 'value',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4637550552033059272),
            name: 'comparator',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5669689842486076229),
            name: 'unit',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2970066280083168944),
            name: 'system',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 499787770195558614),
            name: 'code',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(67, 4435470442218587923),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(43, 1334332791320207787),
      name: 'Range',
      lastPropertyId: const IdUid(4, 2515789296919079800),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5451402542148627564),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3972759631017999051),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(255, 7698492932207131536),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 3407196122565053671),
            name: 'lowId',
            type: 11,
            flags: 520,
            indexId: const IdUid(256, 5277352888608419459),
            relationTarget: 'Quantity'),
        ModelProperty(
            id: const IdUid(4, 2515789296919079800),
            name: 'highId',
            type: 11,
            flags: 520,
            indexId: const IdUid(257, 1064365041103851019),
            relationTarget: 'Quantity')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(68, 6960877176719650072),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(44, 1896659027321244553),
      name: 'Ratio',
      lastPropertyId: const IdUid(4, 2035042305325213111),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7450736347298069861),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8201503786722715661),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(258, 8295160653892934455),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 935106412512292132),
            name: 'numeratorId',
            type: 11,
            flags: 520,
            indexId: const IdUid(259, 1046252116798629823),
            relationTarget: 'Quantity'),
        ModelProperty(
            id: const IdUid(4, 2035042305325213111),
            name: 'denominatorId',
            type: 11,
            flags: 520,
            indexId: const IdUid(260, 9075183214954540002),
            relationTarget: 'Quantity')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(69, 3150374772479257408),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(45, 7355520244897582312),
      name: 'RatioRange',
      lastPropertyId: const IdUid(5, 4754733979943874859),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 312340351236534163),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2987400207212445042),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(261, 5282969785028360250),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 6891108740659679671),
            name: 'lowNumeratorId',
            type: 11,
            flags: 520,
            indexId: const IdUid(262, 808826707528306513),
            relationTarget: 'Quantity'),
        ModelProperty(
            id: const IdUid(4, 3767962716924783477),
            name: 'highNumeratorId',
            type: 11,
            flags: 520,
            indexId: const IdUid(263, 4322692742784500019),
            relationTarget: 'Quantity'),
        ModelProperty(
            id: const IdUid(5, 4754733979943874859),
            name: 'denominatorId',
            type: 11,
            flags: 520,
            indexId: const IdUid(264, 738762302101058719),
            relationTarget: 'Quantity')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(70, 4057063809178642229),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(46, 20110472005709644),
      name: 'Reference',
      lastPropertyId: const IdUid(6, 3268844386070555244),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6337140746427407753),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2470108956380573797),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(265, 3071775483816696382),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 6422609751352040740),
            name: 'reference',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2901787292470852160),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5768236581419111526),
            name: 'identifierId',
            type: 11,
            flags: 520,
            indexId: const IdUid(266, 4638208405422935758),
            relationTarget: 'Identifier'),
        ModelProperty(
            id: const IdUid(6, 3268844386070555244),
            name: 'display',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(71, 9149546885652532395),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(47, 3262615659663071918),
      name: 'RelatedArtifact',
      lastPropertyId: const IdUid(9, 631879407323755356),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5974356079488957944),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2532343415472487584),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(267, 6784990059745984416),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 3767744409033873303),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4825574598894707877),
            name: 'label',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7363838776777570061),
            name: 'display',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7060733884113193944),
            name: 'citation',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7101008146837451231),
            name: 'url',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6588198646729691917),
            name: 'documentId',
            type: 11,
            flags: 520,
            indexId: const IdUid(268, 942721508996631027),
            relationTarget: 'Attachment'),
        ModelProperty(
            id: const IdUid(9, 631879407323755356),
            name: 'resource',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(72, 4864221600797500946),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(48, 7270464273751729587),
      name: 'Resource',
      lastPropertyId: const IdUid(1, 5327604703088146336),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5327604703088146336),
            name: 'dbId',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(49, 4960814625571724751),
      name: 'SampledData',
      lastPropertyId: const IdUid(9, 6213969044300359218),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3945123493474945629),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 306367086790525898),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(269, 8645288106784555725),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 622342172575753536),
            name: 'originId',
            type: 11,
            flags: 520,
            indexId: const IdUid(270, 540368491779164269),
            relationTarget: 'Quantity'),
        ModelProperty(
            id: const IdUid(4, 2268883936356533798),
            name: 'period',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5439400127041940717),
            name: 'factor',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8535735149863363202),
            name: 'lowerLimit',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2616649832127408792),
            name: 'upperLimit',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1674568270129422717),
            name: 'dimensions',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6213969044300359218),
            name: 'data',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(73, 3226355880309761087),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(50, 9044250704912835555),
      name: 'Signature',
      lastPropertyId: const IdUid(8, 2624799236574515862),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1283779907071959704),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4652854566545916239),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(271, 2857367443988407355),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 5418148771962796504),
            name: 'when',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7665588441160533010),
            name: 'whoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(272, 8802643877175622898),
            relationTarget: 'Reference'),
        ModelProperty(
            id: const IdUid(5, 4568548541412710297),
            name: 'onBehalfOfId',
            type: 11,
            flags: 520,
            indexId: const IdUid(273, 4089545929728676355),
            relationTarget: 'Reference'),
        ModelProperty(
            id: const IdUid(6, 6702002768844394484),
            name: 'targetFormat',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3985876317926385874),
            name: 'sigFormat',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2624799236574515862),
            name: 'data',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(74, 1040834704552736771),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896)),
        ModelRelation(
            id: const IdUid(75, 6247684938061901125),
            name: 'type',
            targetId: const IdUid(7, 8873997066131547011))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(51, 1889055434949969072),
      name: 'Timing',
      lastPropertyId: const IdUid(5, 4124843456789373564),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3692772985172180436),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 323885973429289944),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(274, 2696580960629798048),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 4666977517950948207),
            name: 'event',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1018485209914956182),
            name: 'repeatId',
            type: 11,
            flags: 520,
            indexId: const IdUid(275, 4826893758228159293),
            relationTarget: 'TimingRepeat'),
        ModelProperty(
            id: const IdUid(5, 4124843456789373564),
            name: 'codeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(276, 1129912583903069798),
            relationTarget: 'CodeableConcept')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(76, 2336544046989044775),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896)),
        ModelRelation(
            id: const IdUid(77, 7803074491128442980),
            name: 'modifierExtension',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(52, 8062231888325123571),
      name: 'TimingRepeat',
      lastPropertyId: const IdUid(19, 9189694574933810368),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3615094891838296007),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6905651130344814715),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(277, 2499806729467120878),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 2947474697131348163),
            name: 'boundsDurationId',
            type: 11,
            flags: 520,
            indexId: const IdUid(278, 9133970157731881861),
            relationTarget: 'FhirDuration'),
        ModelProperty(
            id: const IdUid(4, 7200791898080823171),
            name: 'boundsRangeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(279, 1494185399026063606),
            relationTarget: 'Range'),
        ModelProperty(
            id: const IdUid(5, 1733384584828405562),
            name: 'boundsPeriodId',
            type: 11,
            flags: 520,
            indexId: const IdUid(280, 5843193749415289526),
            relationTarget: 'Period'),
        ModelProperty(
            id: const IdUid(6, 5881277356861990937),
            name: 'count',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 309943514731878977),
            name: 'countMax',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 721726017782188459),
            name: 'duration',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3970960121767674980),
            name: 'durationMax',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2904453058631422340),
            name: 'durationUnit',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 5100141495323915652),
            name: 'frequency',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 873908375424285804),
            name: 'frequencyMax',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 5981529522900388246),
            name: 'period',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 6352204053937666094),
            name: 'periodMax',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 5367108716320831615),
            name: 'periodUnit',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 337655414789822870),
            name: 'dayOfWeek',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 6893896008355520986),
            name: 'timeOfDay',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 2330375541351164371),
            name: 'when',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 9189694574933810368),
            name: 'offset',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(78, 7380985287178645000),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(53, 6659666082348239871),
      name: 'TriggerDefinition',
      lastPropertyId: const IdUid(9, 3527941440044139132),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8046981926435180431),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3253632935858724683),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(281, 3185008848860795337),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 8105812910119880879),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7886313302176776254),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7019762598353458635),
            name: 'timingTimingId',
            type: 11,
            flags: 520,
            indexId: const IdUid(282, 980567860353498315),
            relationTarget: 'Timing'),
        ModelProperty(
            id: const IdUid(6, 5407622454977454325),
            name: 'timingReferenceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(283, 653237951255310003),
            relationTarget: 'Reference'),
        ModelProperty(
            id: const IdUid(7, 1242264770121893274),
            name: 'timingDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8790085699775915744),
            name: 'timingDateTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3527941440044139132),
            name: 'conditionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(284, 6950655194786746156),
            relationTarget: 'FhirExpression')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(79, 3781544822858130813),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896)),
        ModelRelation(
            id: const IdUid(80, 6115910667281429195),
            name: 'data',
            targetId: const IdUid(12, 6152872577759475762))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(54, 1574355790810787029),
      name: 'UsageContext',
      lastPropertyId: const IdUid(7, 3251891719351220054),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4561990319906296888),
            name: 'dbId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7011139959756330562),
            name: 'idId',
            type: 11,
            flags: 520,
            indexId: const IdUid(285, 4033146763770612054),
            relationTarget: 'String'),
        ModelProperty(
            id: const IdUid(3, 6373802278441851312),
            name: 'codeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(286, 156382019350554250),
            relationTarget: 'Coding'),
        ModelProperty(
            id: const IdUid(4, 1666053078637247405),
            name: 'valueCodeableConceptId',
            type: 11,
            flags: 520,
            indexId: const IdUid(287, 3718074308290917287),
            relationTarget: 'CodeableConcept'),
        ModelProperty(
            id: const IdUid(5, 2292489374201834502),
            name: 'valueQuantityId',
            type: 11,
            flags: 520,
            indexId: const IdUid(288, 3313174934595030628),
            relationTarget: 'Quantity'),
        ModelProperty(
            id: const IdUid(6, 4829796613380500157),
            name: 'valueRangeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(289, 773207130891406459),
            relationTarget: 'Range'),
        ModelProperty(
            id: const IdUid(7, 3251891719351220054),
            name: 'valueReferenceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(290, 277377534335659996),
            relationTarget: 'Reference')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(81, 5574041040844767216),
            name: 'extension_',
            targetId: const IdUid(30, 831337593010685896))
      ],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Store openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) =>
    Store(getObjectBoxModel(),
        directory: directory,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(54, 1574355790810787029),
      lastIndexId: const IdUid(290, 277377534335659996),
      lastRelationId: const IdUid(81, 5574041040844767216),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Address: EntityDefinition<Address>(
        model: _entities[0],
        toOneRelations: (Address object) => [object.id, object.period],
        toManyRelations: (Address object) =>
            {RelInfo<Address>.toMany(1, object.dbId!): object.extension_},
        getId: (Address object) => object.dbId,
        setId: (Address object, int id) {
          object.dbId = id;
        },
        objectToFB: (Address object, fb.Builder fbb) {
          final useOffset =
              object.use == null ? null : fbb.writeString(object.use!);
          final typeOffset =
              object.type == null ? null : fbb.writeString(object.type!);
          final textOffset =
              object.text == null ? null : fbb.writeString(object.text!);
          final lineOffset = object.line == null
              ? null
              : fbb.writeList(
                  object.line!.map(fbb.writeString).toList(growable: false));
          final cityOffset =
              object.city == null ? null : fbb.writeString(object.city!);
          final districtOffset = object.district == null
              ? null
              : fbb.writeString(object.district!);
          final stateOffset =
              object.state == null ? null : fbb.writeString(object.state!);
          final postalCodeOffset = object.postalCode == null
              ? null
              : fbb.writeString(object.postalCode!);
          final countryOffset =
              object.country == null ? null : fbb.writeString(object.country!);
          fbb.startTable(13);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addOffset(2, useOffset);
          fbb.addOffset(3, typeOffset);
          fbb.addOffset(4, textOffset);
          fbb.addOffset(5, lineOffset);
          fbb.addOffset(6, cityOffset);
          fbb.addOffset(7, districtOffset);
          fbb.addOffset(8, stateOffset);
          fbb.addOffset(9, postalCodeOffset);
          fbb.addOffset(10, countryOffset);
          fbb.addInt64(11, object.period.targetId);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Address(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              use: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              type: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              text: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              line: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 14),
              city: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              district: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              state:
                  const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 20),
              postalCode: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 22),
              country: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 24),
              period: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0)))
            ..dbId = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          object.period.attach(store);
          InternalToManyAccess.setRelInfo(object.extension_, store,
              RelInfo<Address>.toMany(1, object.dbId!), store.box<Address>());
          return object;
        }),
    Age: EntityDefinition<Age>(
        model: _entities[1],
        toOneRelations: (Age object) => [object.id],
        toManyRelations: (Age object) =>
            {RelInfo<Age>.toMany(2, object.dbId!): object.extension_},
        getId: (Age object) => object.dbId,
        setId: (Age object, int id) {
          object.dbId = id;
        },
        objectToFB: (Age object, fb.Builder fbb) {
          final comparatorOffset = object.comparator == null
              ? null
              : fbb.writeString(object.comparator!);
          final unitOffset =
              object.unit == null ? null : fbb.writeString(object.unit!);
          final systemOffset =
              object.system == null ? null : fbb.writeString(object.system!);
          final codeOffset =
              object.code == null ? null : fbb.writeString(object.code!);
          fbb.startTable(8);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addFloat64(2, object.value);
          fbb.addOffset(3, comparatorOffset);
          fbb.addOffset(4, unitOffset);
          fbb.addOffset(5, systemOffset);
          fbb.addOffset(6, codeOffset);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Age(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              value: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 8),
              comparator: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              unit: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              system: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              code: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16))
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          InternalToManyAccess.setRelInfo(object.extension_, store,
              RelInfo<Age>.toMany(2, object.dbId!), store.box<Age>());
          return object;
        }),
    Annotation: EntityDefinition<Annotation>(
        model: _entities[2],
        toOneRelations: (Annotation object) =>
            [object.id, object.authorReference],
        toManyRelations: (Annotation object) =>
            {RelInfo<Annotation>.toMany(3, object.dbId!): object.extension_},
        getId: (Annotation object) => object.dbId,
        setId: (Annotation object, int id) {
          object.dbId = id;
        },
        objectToFB: (Annotation object, fb.Builder fbb) {
          final authorStringOffset = object.authorString == null
              ? null
              : fbb.writeString(object.authorString!);
          final timeOffset =
              object.time == null ? null : fbb.writeString(object.time!);
          final textOffset = fbb.writeString(object.text);
          fbb.startTable(7);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addInt64(2, object.authorReference.targetId);
          fbb.addOffset(3, authorStringOffset);
          fbb.addOffset(4, timeOffset);
          fbb.addOffset(5, textOffset);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Annotation(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              authorReference: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 8, 0)),
              authorString: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              time: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              text: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''))
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          object.authorReference.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<Annotation>.toMany(3, object.dbId!),
              store.box<Annotation>());
          return object;
        }),
    Attachment: EntityDefinition<Attachment>(
        model: _entities[3],
        toOneRelations: (Attachment object) => [object.id],
        toManyRelations: (Attachment object) =>
            {RelInfo<Attachment>.toMany(4, object.dbId!): object.extension_},
        getId: (Attachment object) => object.dbId,
        setId: (Attachment object, int id) {
          object.dbId = id;
        },
        objectToFB: (Attachment object, fb.Builder fbb) {
          final contentTypeOffset = object.contentType == null
              ? null
              : fbb.writeString(object.contentType!);
          final languageOffset = object.language == null
              ? null
              : fbb.writeString(object.language!);
          final dataOffset =
              object.data == null ? null : fbb.writeString(object.data!);
          final urlOffset =
              object.url == null ? null : fbb.writeString(object.url!);
          final hashOffset =
              object.hash == null ? null : fbb.writeString(object.hash!);
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          final creationOffset = object.creation == null
              ? null
              : fbb.writeString(object.creation!);
          fbb.startTable(11);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addOffset(2, contentTypeOffset);
          fbb.addOffset(3, languageOffset);
          fbb.addOffset(4, dataOffset);
          fbb.addOffset(5, urlOffset);
          fbb.addInt64(6, object.size);
          fbb.addOffset(7, hashOffset);
          fbb.addOffset(8, titleOffset);
          fbb.addOffset(9, creationOffset);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Attachment(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              contentType: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              language: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              data: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              url: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              size: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 16),
              hash: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              title:
                  const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 20),
              creation: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 22))
            ..dbId = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<Attachment>.toMany(4, object.dbId!),
              store.box<Attachment>());
          return object;
        }),
    CodeableConcept: EntityDefinition<CodeableConcept>(
        model: _entities[4],
        toOneRelations: (CodeableConcept object) => [object.id],
        toManyRelations: (CodeableConcept object) => {
              RelInfo<CodeableConcept>.toMany(5, object.dbId!):
                  object.extension_,
              RelInfo<CodeableConcept>.toMany(6, object.dbId!): object.coding
            },
        getId: (CodeableConcept object) => object.dbId,
        setId: (CodeableConcept object, int id) {
          object.dbId = id;
        },
        objectToFB: (CodeableConcept object, fb.Builder fbb) {
          final textOffset =
              object.text == null ? null : fbb.writeString(object.text!);
          fbb.startTable(4);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addOffset(2, textOffset);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CodeableConcept(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              coding: ToMany(),
              text: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8))
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<CodeableConcept>.toMany(5, object.dbId!),
              store.box<CodeableConcept>());
          InternalToManyAccess.setRelInfo(
              object.coding,
              store,
              RelInfo<CodeableConcept>.toMany(6, object.dbId!),
              store.box<CodeableConcept>());
          return object;
        }),
    CodeableReference: EntityDefinition<CodeableReference>(
        model: _entities[5],
        toOneRelations: (CodeableReference object) =>
            [object.id, object.concept, object.reference],
        toManyRelations: (CodeableReference object) => {
              RelInfo<CodeableReference>.toMany(7, object.dbId!):
                  object.extension_
            },
        getId: (CodeableReference object) => object.dbId,
        setId: (CodeableReference object, int id) {
          object.dbId = id;
        },
        objectToFB: (CodeableReference object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addInt64(2, object.concept.targetId);
          fbb.addInt64(3, object.reference.targetId);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CodeableReference(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              concept: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 8, 0)),
              reference: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 10, 0)))
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          object.concept.attach(store);
          object.reference.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<CodeableReference>.toMany(7, object.dbId!),
              store.box<CodeableReference>());
          return object;
        }),
    Coding: EntityDefinition<Coding>(
        model: _entities[6],
        toOneRelations: (Coding object) => [object.id],
        toManyRelations: (Coding object) =>
            {RelInfo<Coding>.toMany(8, object.dbId!): object.extension_},
        getId: (Coding object) => object.dbId,
        setId: (Coding object, int id) {
          object.dbId = id;
        },
        objectToFB: (Coding object, fb.Builder fbb) {
          final systemOffset =
              object.system == null ? null : fbb.writeString(object.system!);
          final versionOffset =
              object.version == null ? null : fbb.writeString(object.version!);
          final codeOffset =
              object.code == null ? null : fbb.writeString(object.code!);
          final displayOffset =
              object.display == null ? null : fbb.writeString(object.display!);
          fbb.startTable(8);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addOffset(2, systemOffset);
          fbb.addOffset(3, versionOffset);
          fbb.addOffset(4, codeOffset);
          fbb.addOffset(5, displayOffset);
          fbb.addBool(6, object.userSelected);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Coding(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              system: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              version: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              code: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              display: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              userSelected: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 16))
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          InternalToManyAccess.setRelInfo(object.extension_, store,
              RelInfo<Coding>.toMany(8, object.dbId!), store.box<Coding>());
          return object;
        }),
    ContactDetail: EntityDefinition<ContactDetail>(
        model: _entities[7],
        toOneRelations: (ContactDetail object) => [object.id],
        toManyRelations: (ContactDetail object) => {
              RelInfo<ContactDetail>.toMany(9, object.dbId!): object.extension_,
              RelInfo<ContactDetail>.toMany(10, object.dbId!): object.telecom
            },
        getId: (ContactDetail object) => object.dbId,
        setId: (ContactDetail object, int id) {
          object.dbId = id;
        },
        objectToFB: (ContactDetail object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          fbb.startTable(4);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addOffset(2, nameOffset);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ContactDetail(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              telecom: ToMany())
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<ContactDetail>.toMany(9, object.dbId!),
              store.box<ContactDetail>());
          InternalToManyAccess.setRelInfo(
              object.telecom,
              store,
              RelInfo<ContactDetail>.toMany(10, object.dbId!),
              store.box<ContactDetail>());
          return object;
        }),
    ContactPoint: EntityDefinition<ContactPoint>(
        model: _entities[8],
        toOneRelations: (ContactPoint object) => [object.id, object.period],
        toManyRelations: (ContactPoint object) =>
            {RelInfo<ContactPoint>.toMany(11, object.dbId!): object.extension_},
        getId: (ContactPoint object) => object.dbId,
        setId: (ContactPoint object, int id) {
          object.dbId = id;
        },
        objectToFB: (ContactPoint object, fb.Builder fbb) {
          final systemOffset =
              object.system == null ? null : fbb.writeString(object.system!);
          final valueOffset =
              object.value == null ? null : fbb.writeString(object.value!);
          final useOffset =
              object.use == null ? null : fbb.writeString(object.use!);
          fbb.startTable(8);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addOffset(2, systemOffset);
          fbb.addOffset(3, valueOffset);
          fbb.addOffset(4, useOffset);
          fbb.addInt64(5, object.rank);
          fbb.addInt64(6, object.period.targetId);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ContactPoint(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              system: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              value: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              use: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              rank: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 14),
              period: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 16, 0)))
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          object.period.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<ContactPoint>.toMany(11, object.dbId!),
              store.box<ContactPoint>());
          return object;
        }),
    Contributor: EntityDefinition<Contributor>(
        model: _entities[9],
        toOneRelations: (Contributor object) => [object.id],
        toManyRelations: (Contributor object) => {
              RelInfo<Contributor>.toMany(12, object.dbId!): object.extension_,
              RelInfo<Contributor>.toMany(13, object.dbId!): object.contact
            },
        getId: (Contributor object) => object.dbId,
        setId: (Contributor object, int id) {
          object.dbId = id;
        },
        objectToFB: (Contributor object, fb.Builder fbb) {
          final typeOffset = fbb.writeString(object.type);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(5);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addOffset(2, typeOffset);
          fbb.addOffset(3, nameOffset);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Contributor(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              type: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              contact: ToMany())
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<Contributor>.toMany(12, object.dbId!),
              store.box<Contributor>());
          InternalToManyAccess.setRelInfo(
              object.contact,
              store,
              RelInfo<Contributor>.toMany(13, object.dbId!),
              store.box<Contributor>());
          return object;
        }),
    Count: EntityDefinition<Count>(
        model: _entities[10],
        toOneRelations: (Count object) => [object.id],
        toManyRelations: (Count object) =>
            {RelInfo<Count>.toMany(14, object.dbId!): object.extension_},
        getId: (Count object) => object.dbId,
        setId: (Count object, int id) {
          object.dbId = id;
        },
        objectToFB: (Count object, fb.Builder fbb) {
          final comparatorOffset = object.comparator == null
              ? null
              : fbb.writeString(object.comparator!);
          final unitOffset =
              object.unit == null ? null : fbb.writeString(object.unit!);
          final systemOffset =
              object.system == null ? null : fbb.writeString(object.system!);
          final codeOffset =
              object.code == null ? null : fbb.writeString(object.code!);
          fbb.startTable(8);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addFloat64(2, object.value);
          fbb.addOffset(3, comparatorOffset);
          fbb.addOffset(4, unitOffset);
          fbb.addOffset(5, systemOffset);
          fbb.addOffset(6, codeOffset);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Count(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              value: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 8),
              comparator: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              unit: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              system: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              code: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16))
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          InternalToManyAccess.setRelInfo(object.extension_, store,
              RelInfo<Count>.toMany(14, object.dbId!), store.box<Count>());
          return object;
        }),
    DataRequirement: EntityDefinition<DataRequirement>(
        model: _entities[11],
        toOneRelations: (DataRequirement object) =>
            [object.id, object.subjectCodeableConcept, object.subjectReference],
        toManyRelations: (DataRequirement object) => {
              RelInfo<DataRequirement>.toMany(15, object.dbId!):
                  object.extension_,
              RelInfo<DataRequirement>.toMany(16, object.dbId!):
                  object.codeFilter,
              RelInfo<DataRequirement>.toMany(17, object.dbId!):
                  object.dateFilter,
              RelInfo<DataRequirement>.toMany(18, object.dbId!): object.sort
            },
        getId: (DataRequirement object) => object.dbId,
        setId: (DataRequirement object, int id) {
          object.dbId = id;
        },
        objectToFB: (DataRequirement object, fb.Builder fbb) {
          final typeOffset = fbb.writeString(object.type);
          final profileOffset = object.profile == null
              ? null
              : fbb.writeList(
                  object.profile!.map(fbb.writeString).toList(growable: false));
          final mustSupportOffset = object.mustSupport == null
              ? null
              : fbb.writeList(object.mustSupport!
                  .map(fbb.writeString)
                  .toList(growable: false));
          fbb.startTable(9);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addOffset(2, typeOffset);
          fbb.addOffset(3, profileOffset);
          fbb.addInt64(4, object.subjectCodeableConcept.targetId);
          fbb.addInt64(5, object.subjectReference.targetId);
          fbb.addOffset(6, mustSupportOffset);
          fbb.addInt64(7, object.limit);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DataRequirement(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              type: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              profile: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 10),
              subjectCodeableConcept: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 12, 0)),
              subjectReference:
                  ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)),
              mustSupport: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGetNullable(buffer, rootOffset, 16),
              codeFilter: ToMany(),
              dateFilter: ToMany(),
              limit: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18),
              sort: ToMany())
            ..dbId = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          object.subjectCodeableConcept.attach(store);
          object.subjectReference.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<DataRequirement>.toMany(15, object.dbId!),
              store.box<DataRequirement>());
          InternalToManyAccess.setRelInfo(
              object.codeFilter,
              store,
              RelInfo<DataRequirement>.toMany(16, object.dbId!),
              store.box<DataRequirement>());
          InternalToManyAccess.setRelInfo(
              object.dateFilter,
              store,
              RelInfo<DataRequirement>.toMany(17, object.dbId!),
              store.box<DataRequirement>());
          InternalToManyAccess.setRelInfo(
              object.sort,
              store,
              RelInfo<DataRequirement>.toMany(18, object.dbId!),
              store.box<DataRequirement>());
          return object;
        }),
    DataRequirementCodeFilter: EntityDefinition<DataRequirementCodeFilter>(
        model: _entities[12],
        toOneRelations: (DataRequirementCodeFilter object) => [object.id],
        toManyRelations: (DataRequirementCodeFilter object) => {
              RelInfo<DataRequirementCodeFilter>.toMany(19, object.dbId!):
                  object.extension_,
              RelInfo<DataRequirementCodeFilter>.toMany(20, object.dbId!):
                  object.code
            },
        getId: (DataRequirementCodeFilter object) => object.dbId,
        setId: (DataRequirementCodeFilter object, int id) {
          object.dbId = id;
        },
        objectToFB: (DataRequirementCodeFilter object, fb.Builder fbb) {
          final pathOffset =
              object.path == null ? null : fbb.writeString(object.path!);
          final searchParamOffset = object.searchParam == null
              ? null
              : fbb.writeString(object.searchParam!);
          final valueSetOffset = object.valueSet == null
              ? null
              : fbb.writeString(object.valueSet!);
          fbb.startTable(6);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addOffset(2, pathOffset);
          fbb.addOffset(3, searchParamOffset);
          fbb.addOffset(4, valueSetOffset);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DataRequirementCodeFilter(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              path: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              searchParam: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              valueSet: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              code: ToMany())
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<DataRequirementCodeFilter>.toMany(19, object.dbId!),
              store.box<DataRequirementCodeFilter>());
          InternalToManyAccess.setRelInfo(
              object.code,
              store,
              RelInfo<DataRequirementCodeFilter>.toMany(20, object.dbId!),
              store.box<DataRequirementCodeFilter>());
          return object;
        }),
    DataRequirementDateFilter: EntityDefinition<DataRequirementDateFilter>(
        model: _entities[13],
        toOneRelations: (DataRequirementDateFilter object) =>
            [object.id, object.valuePeriod, object.valueDuration],
        toManyRelations: (DataRequirementDateFilter object) => {
              RelInfo<DataRequirementDateFilter>.toMany(21, object.dbId!):
                  object.extension_
            },
        getId: (DataRequirementDateFilter object) => object.dbId,
        setId: (DataRequirementDateFilter object, int id) {
          object.dbId = id;
        },
        objectToFB: (DataRequirementDateFilter object, fb.Builder fbb) {
          final pathOffset =
              object.path == null ? null : fbb.writeString(object.path!);
          final searchParamOffset = object.searchParam == null
              ? null
              : fbb.writeString(object.searchParam!);
          final valueDateTimeOffset = object.valueDateTime == null
              ? null
              : fbb.writeString(object.valueDateTime!);
          fbb.startTable(8);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addOffset(2, pathOffset);
          fbb.addOffset(3, searchParamOffset);
          fbb.addOffset(4, valueDateTimeOffset);
          fbb.addInt64(5, object.valuePeriod.targetId);
          fbb.addInt64(6, object.valueDuration.targetId);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DataRequirementDateFilter(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              path: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              searchParam: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              valueDateTime: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              valuePeriod: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 14, 0)),
              valueDuration: ToOne(
                  targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)))
            ..dbId = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          object.valuePeriod.attach(store);
          object.valueDuration.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<DataRequirementDateFilter>.toMany(21, object.dbId!),
              store.box<DataRequirementDateFilter>());
          return object;
        }),
    DataRequirementSort: EntityDefinition<DataRequirementSort>(
        model: _entities[14],
        toOneRelations: (DataRequirementSort object) => [object.id],
        toManyRelations: (DataRequirementSort object) => {
              RelInfo<DataRequirementSort>.toMany(22, object.dbId!):
                  object.extension_
            },
        getId: (DataRequirementSort object) => object.dbId,
        setId: (DataRequirementSort object, int id) {
          object.dbId = id;
        },
        objectToFB: (DataRequirementSort object, fb.Builder fbb) {
          final pathOffset = fbb.writeString(object.path);
          final directionOffset = fbb.writeString(object.direction);
          fbb.startTable(5);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addOffset(2, pathOffset);
          fbb.addOffset(3, directionOffset);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DataRequirementSort(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              path: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              direction: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''))
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<DataRequirementSort>.toMany(22, object.dbId!),
              store.box<DataRequirementSort>());
          return object;
        }),
    Distance: EntityDefinition<Distance>(
        model: _entities[15],
        toOneRelations: (Distance object) => [object.id],
        toManyRelations: (Distance object) =>
            {RelInfo<Distance>.toMany(23, object.dbId!): object.extension_},
        getId: (Distance object) => object.dbId,
        setId: (Distance object, int id) {
          object.dbId = id;
        },
        objectToFB: (Distance object, fb.Builder fbb) {
          final comparatorOffset = object.comparator == null
              ? null
              : fbb.writeString(object.comparator!);
          final unitOffset =
              object.unit == null ? null : fbb.writeString(object.unit!);
          final systemOffset =
              object.system == null ? null : fbb.writeString(object.system!);
          final codeOffset =
              object.code == null ? null : fbb.writeString(object.code!);
          fbb.startTable(8);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addFloat64(2, object.value);
          fbb.addOffset(3, comparatorOffset);
          fbb.addOffset(4, unitOffset);
          fbb.addOffset(5, systemOffset);
          fbb.addOffset(6, codeOffset);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Distance(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              value: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 8),
              comparator: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              unit: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              system: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              code: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16))
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<Distance>.toMany(23, object.dbId!),
              store.box<Distance>());
          return object;
        }),
    Dosage: EntityDefinition<Dosage>(
        model: _entities[16],
        toOneRelations: (Dosage object) => [
              object.id,
              object.timing,
              object.asNeededCodeableConcept,
              object.site,
              object.route,
              object.method,
              object.maxDosePerPeriod,
              object.maxDosePerAdministration,
              object.maxDosePerLifetime
            ],
        toManyRelations: (Dosage object) => {
              RelInfo<Dosage>.toMany(24, object.dbId!): object.extension_,
              RelInfo<Dosage>.toMany(25, object.dbId!):
                  object.modifierExtension,
              RelInfo<Dosage>.toMany(26, object.dbId!):
                  object.additionalInstruction,
              RelInfo<Dosage>.toMany(27, object.dbId!): object.doseAndRate
            },
        getId: (Dosage object) => object.dbId,
        setId: (Dosage object, int id) {
          object.dbId = id;
        },
        objectToFB: (Dosage object, fb.Builder fbb) {
          final textOffset =
              object.text == null ? null : fbb.writeString(object.text!);
          final patientInstructionOffset = object.patientInstruction == null
              ? null
              : fbb.writeString(object.patientInstruction!);
          fbb.startTable(15);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addInt64(2, object.sequence);
          fbb.addOffset(3, textOffset);
          fbb.addOffset(4, patientInstructionOffset);
          fbb.addInt64(5, object.timing.targetId);
          fbb.addBool(6, object.asNeededBoolean);
          fbb.addInt64(7, object.asNeededCodeableConcept.targetId);
          fbb.addInt64(8, object.site.targetId);
          fbb.addInt64(9, object.route.targetId);
          fbb.addInt64(10, object.method.targetId);
          fbb.addInt64(11, object.maxDosePerPeriod.targetId);
          fbb.addInt64(12, object.maxDosePerAdministration.targetId);
          fbb.addInt64(13, object.maxDosePerLifetime.targetId);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Dosage(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              modifierExtension: ToMany(),
              sequence: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 8),
              text: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              additionalInstruction: ToMany(),
              patientInstruction: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              timing: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 14, 0)),
              asNeededBoolean: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 16),
              asNeededCodeableConcept:
                  ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)),
              site: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0)),
              route: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0)),
              method: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0)),
              doseAndRate: ToMany(),
              maxDosePerPeriod: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0)),
              maxDosePerAdministration: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0)),
              maxDosePerLifetime: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0)))
            ..dbId = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          object.timing.attach(store);
          object.asNeededCodeableConcept.attach(store);
          object.site.attach(store);
          object.route.attach(store);
          object.method.attach(store);
          object.maxDosePerPeriod.attach(store);
          object.maxDosePerAdministration.attach(store);
          object.maxDosePerLifetime.attach(store);
          InternalToManyAccess.setRelInfo(object.extension_, store,
              RelInfo<Dosage>.toMany(24, object.dbId!), store.box<Dosage>());
          InternalToManyAccess.setRelInfo(object.modifierExtension, store,
              RelInfo<Dosage>.toMany(25, object.dbId!), store.box<Dosage>());
          InternalToManyAccess.setRelInfo(object.additionalInstruction, store,
              RelInfo<Dosage>.toMany(26, object.dbId!), store.box<Dosage>());
          InternalToManyAccess.setRelInfo(object.doseAndRate, store,
              RelInfo<Dosage>.toMany(27, object.dbId!), store.box<Dosage>());
          return object;
        }),
    DosageDoseAndRate: EntityDefinition<DosageDoseAndRate>(
        model: _entities[17],
        toOneRelations: (DosageDoseAndRate object) => [
              object.id,
              object.type,
              object.doseRange,
              object.doseQuantity,
              object.rateRatio,
              object.rateRange,
              object.rateQuantity
            ],
        toManyRelations: (DosageDoseAndRate object) => {
              RelInfo<DosageDoseAndRate>.toMany(28, object.dbId!):
                  object.extension_
            },
        getId: (DosageDoseAndRate object) => object.dbId,
        setId: (DosageDoseAndRate object, int id) {
          object.dbId = id;
        },
        objectToFB: (DosageDoseAndRate object, fb.Builder fbb) {
          fbb.startTable(9);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addInt64(2, object.type.targetId);
          fbb.addInt64(3, object.doseRange.targetId);
          fbb.addInt64(4, object.doseQuantity.targetId);
          fbb.addInt64(5, object.rateRatio.targetId);
          fbb.addInt64(6, object.rateRange.targetId);
          fbb.addInt64(7, object.rateQuantity.targetId);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DosageDoseAndRate(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              type: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 8, 0)),
              doseRange: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 10, 0)),
              doseQuantity: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 12, 0)),
              rateRatio: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 14, 0)),
              rateRange: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 16, 0)),
              rateQuantity: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)))
            ..dbId = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          object.type.attach(store);
          object.doseRange.attach(store);
          object.doseQuantity.attach(store);
          object.rateRatio.attach(store);
          object.rateRange.attach(store);
          object.rateQuantity.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<DosageDoseAndRate>.toMany(28, object.dbId!),
              store.box<DosageDoseAndRate>());
          return object;
        }),
    ElementDefinition: EntityDefinition<ElementDefinition>(
        model: _entities[18],
        toOneRelations: (ElementDefinition object) => [
              object.id,
              object.slicing,
              object.base,
              object.defaultValueAddress,
              object.defaultValueAge,
              object.defaultValueAnnotation,
              object.defaultValueAttachment,
              object.defaultValueCodeableConcept,
              object.defaultValueCodeableReference,
              object.defaultValueCoding,
              object.defaultValueContactPoint,
              object.defaultValueCount,
              object.defaultValueDistance,
              object.defaultValueDuration,
              object.defaultValueHumanName,
              object.defaultValueIdentifier,
              object.defaultValueMoney,
              object.defaultValuePeriod,
              object.defaultValueQuantity,
              object.defaultValueRange,
              object.defaultValueRatio,
              object.defaultValueRatioRange,
              object.defaultValueReference,
              object.defaultValueSampledData,
              object.defaultValueSignature,
              object.defaultValueTiming,
              object.defaultValueContactDetail,
              object.defaultValueContributor,
              object.defaultValueDataRequirement,
              object.defaultValueExpression,
              object.defaultValueParameterDefinition,
              object.defaultValueRelatedArtifact,
              object.defaultValueTriggerDefinition,
              object.defaultValueUsageContext,
              object.defaultValueDosage,
              object.fixedAddress,
              object.fixedAge,
              object.fixedAnnotation,
              object.fixedAttachment,
              object.fixedCodeableConcept,
              object.fixedCodeableReference,
              object.fixedCoding,
              object.fixedContactPoint,
              object.fixedCount,
              object.fixedDistance,
              object.fixedDuration,
              object.fixedHumanName,
              object.fixedIdentifier,
              object.fixedMoney,
              object.fixedPeriod,
              object.fixedQuantity,
              object.fixedRange,
              object.fixedRatio,
              object.fixedRatioRange,
              object.fixedReference,
              object.fixedSampledData,
              object.fixedSignature,
              object.fixedTiming,
              object.fixedContactDetail,
              object.fixedContributor,
              object.fixedDataRequirement,
              object.fixedExpression,
              object.fixedParameterDefinition,
              object.fixedRelatedArtifact,
              object.fixedTriggerDefinition,
              object.fixedUsageContext,
              object.fixedDosage,
              object.patternAddress,
              object.patternAge,
              object.patternAnnotation,
              object.patternAttachment,
              object.patternCodeableConcept,
              object.patternCodeableReference,
              object.patternCoding,
              object.patternContactPoint,
              object.patternCount,
              object.patternDistance,
              object.patternDuration,
              object.patternHumanName,
              object.patternIdentifier,
              object.patternMoney,
              object.patternPeriod,
              object.patternQuantity,
              object.patternRange,
              object.patternRatio,
              object.patternRatioRange,
              object.patternReference,
              object.patternSampledData,
              object.patternSignature,
              object.patternTiming,
              object.patternContactDetail,
              object.patternContributor,
              object.patternDataRequirement,
              object.patternExpression,
              object.patternParameterDefinition,
              object.patternRelatedArtifact,
              object.patternTriggerDefinition,
              object.patternUsageContext,
              object.patternDosage,
              object.minValueQuantity,
              object.maxValueQuantity,
              object.binding
            ],
        toManyRelations: (ElementDefinition object) => {
              RelInfo<ElementDefinition>.toMany(29, object.dbId!):
                  object.extension_,
              RelInfo<ElementDefinition>.toMany(30, object.dbId!):
                  object.modifierExtension,
              RelInfo<ElementDefinition>.toMany(31, object.dbId!): object.code,
              RelInfo<ElementDefinition>.toMany(32, object.dbId!): object.type,
              RelInfo<ElementDefinition>.toMany(33, object.dbId!):
                  object.example,
              RelInfo<ElementDefinition>.toMany(34, object.dbId!):
                  object.constraint,
              RelInfo<ElementDefinition>.toMany(35, object.dbId!):
                  object.mapping
            },
        getId: (ElementDefinition object) => object.dbId,
        setId: (ElementDefinition object, int id) {
          object.dbId = id;
        },
        objectToFB: (ElementDefinition object, fb.Builder fbb) {
          final pathOffset = fbb.writeString(object.path);
          final representationOffset = object.representation == null
              ? null
              : fbb.writeList(object.representation!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final sliceNameOffset = object.sliceName == null
              ? null
              : fbb.writeString(object.sliceName!);
          final labelOffset =
              object.label == null ? null : fbb.writeString(object.label!);
          final shortOffset =
              object.short == null ? null : fbb.writeString(object.short!);
          final definitionOffset = object.definition == null
              ? null
              : fbb.writeString(object.definition!);
          final commentOffset =
              object.comment == null ? null : fbb.writeString(object.comment!);
          final requirementsOffset = object.requirements == null
              ? null
              : fbb.writeString(object.requirements!);
          final aliasOffset = object.alias == null
              ? null
              : fbb.writeList(
                  object.alias!.map(fbb.writeString).toList(growable: false));
          final maxOffset =
              object.max == null ? null : fbb.writeString(object.max!);
          final contentReferenceOffset = object.contentReference == null
              ? null
              : fbb.writeString(object.contentReference!);
          final defaultValueBase64BinaryOffset =
              object.defaultValueBase64Binary == null
                  ? null
                  : fbb.writeString(object.defaultValueBase64Binary!);
          final defaultValueCanonicalOffset =
              object.defaultValueCanonical == null
                  ? null
                  : fbb.writeString(object.defaultValueCanonical!);
          final defaultValueCodeOffset = object.defaultValueCode == null
              ? null
              : fbb.writeString(object.defaultValueCode!);
          final defaultValueDateOffset = object.defaultValueDate == null
              ? null
              : fbb.writeString(object.defaultValueDate!);
          final defaultValueDateTimeOffset = object.defaultValueDateTime == null
              ? null
              : fbb.writeString(object.defaultValueDateTime!);
          final defaultValueIdOffset = object.defaultValueId == null
              ? null
              : fbb.writeString(object.defaultValueId!);
          final defaultValueInstantOffset = object.defaultValueInstant == null
              ? null
              : fbb.writeString(object.defaultValueInstant!);
          final defaultValueMarkdownOffset = object.defaultValueMarkdown == null
              ? null
              : fbb.writeString(object.defaultValueMarkdown!);
          final defaultValueOidOffset = object.defaultValueOid == null
              ? null
              : fbb.writeString(object.defaultValueOid!);
          final defaultValueStringOffset = object.defaultValueString == null
              ? null
              : fbb.writeString(object.defaultValueString!);
          final defaultValueTimeOffset = object.defaultValueTime == null
              ? null
              : fbb.writeString(object.defaultValueTime!);
          final defaultValueUriOffset = object.defaultValueUri == null
              ? null
              : fbb.writeString(object.defaultValueUri!);
          final defaultValueUrlOffset = object.defaultValueUrl == null
              ? null
              : fbb.writeString(object.defaultValueUrl!);
          final defaultValueUuidOffset = object.defaultValueUuid == null
              ? null
              : fbb.writeString(object.defaultValueUuid!);
          final meaningWhenMissingOffset = object.meaningWhenMissing == null
              ? null
              : fbb.writeString(object.meaningWhenMissing!);
          final orderMeaningOffset = object.orderMeaning == null
              ? null
              : fbb.writeString(object.orderMeaning!);
          final fixedBase64BinaryOffset = object.fixedBase64Binary == null
              ? null
              : fbb.writeString(object.fixedBase64Binary!);
          final fixedCanonicalOffset = object.fixedCanonical == null
              ? null
              : fbb.writeString(object.fixedCanonical!);
          final fixedCodeOffset = object.fixedCode == null
              ? null
              : fbb.writeString(object.fixedCode!);
          final fixedDateOffset = object.fixedDate == null
              ? null
              : fbb.writeString(object.fixedDate!);
          final fixedDateTimeOffset = object.fixedDateTime == null
              ? null
              : fbb.writeString(object.fixedDateTime!);
          final fixedIdOffset =
              object.fixedId == null ? null : fbb.writeString(object.fixedId!);
          final fixedInstantOffset = object.fixedInstant == null
              ? null
              : fbb.writeString(object.fixedInstant!);
          final fixedMarkdownOffset = object.fixedMarkdown == null
              ? null
              : fbb.writeString(object.fixedMarkdown!);
          final fixedOidOffset = object.fixedOid == null
              ? null
              : fbb.writeString(object.fixedOid!);
          final fixedStringOffset = object.fixedString == null
              ? null
              : fbb.writeString(object.fixedString!);
          final fixedTimeOffset = object.fixedTime == null
              ? null
              : fbb.writeString(object.fixedTime!);
          final fixedUriOffset = object.fixedUri == null
              ? null
              : fbb.writeString(object.fixedUri!);
          final fixedUrlOffset = object.fixedUrl == null
              ? null
              : fbb.writeString(object.fixedUrl!);
          final fixedUuidOffset = object.fixedUuid == null
              ? null
              : fbb.writeString(object.fixedUuid!);
          final patternBase64BinaryOffset = object.patternBase64Binary == null
              ? null
              : fbb.writeString(object.patternBase64Binary!);
          final patternCanonicalOffset = object.patternCanonical == null
              ? null
              : fbb.writeString(object.patternCanonical!);
          final patternCodeOffset = object.patternCode == null
              ? null
              : fbb.writeString(object.patternCode!);
          final patternDateOffset = object.patternDate == null
              ? null
              : fbb.writeString(object.patternDate!);
          final patternDateTimeOffset = object.patternDateTime == null
              ? null
              : fbb.writeString(object.patternDateTime!);
          final patternIdOffset = object.patternId == null
              ? null
              : fbb.writeString(object.patternId!);
          final patternInstantOffset = object.patternInstant == null
              ? null
              : fbb.writeString(object.patternInstant!);
          final patternMarkdownOffset = object.patternMarkdown == null
              ? null
              : fbb.writeString(object.patternMarkdown!);
          final patternOidOffset = object.patternOid == null
              ? null
              : fbb.writeString(object.patternOid!);
          final patternStringOffset = object.patternString == null
              ? null
              : fbb.writeString(object.patternString!);
          final patternTimeOffset = object.patternTime == null
              ? null
              : fbb.writeString(object.patternTime!);
          final patternUriOffset = object.patternUri == null
              ? null
              : fbb.writeString(object.patternUri!);
          final patternUrlOffset = object.patternUrl == null
              ? null
              : fbb.writeString(object.patternUrl!);
          final patternUuidOffset = object.patternUuid == null
              ? null
              : fbb.writeString(object.patternUuid!);
          final minValueDateOffset = object.minValueDate == null
              ? null
              : fbb.writeString(object.minValueDate!);
          final minValueDateTimeOffset = object.minValueDateTime == null
              ? null
              : fbb.writeString(object.minValueDateTime!);
          final minValueInstantOffset = object.minValueInstant == null
              ? null
              : fbb.writeString(object.minValueInstant!);
          final minValueTimeOffset = object.minValueTime == null
              ? null
              : fbb.writeString(object.minValueTime!);
          final maxValueDateOffset = object.maxValueDate == null
              ? null
              : fbb.writeString(object.maxValueDate!);
          final maxValueDateTimeOffset = object.maxValueDateTime == null
              ? null
              : fbb.writeString(object.maxValueDateTime!);
          final maxValueInstantOffset = object.maxValueInstant == null
              ? null
              : fbb.writeString(object.maxValueInstant!);
          final maxValueTimeOffset = object.maxValueTime == null
              ? null
              : fbb.writeString(object.maxValueTime!);
          final conditionOffset = object.condition == null
              ? null
              : fbb.writeList(object.condition!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final isModifierReasonOffset = object.isModifierReason == null
              ? null
              : fbb.writeString(object.isModifierReason!);
          fbb.startTable(198);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addOffset(2, pathOffset);
          fbb.addOffset(3, representationOffset);
          fbb.addOffset(4, sliceNameOffset);
          fbb.addBool(5, object.sliceIsConstraining);
          fbb.addOffset(6, labelOffset);
          fbb.addInt64(7, object.slicing.targetId);
          fbb.addOffset(8, shortOffset);
          fbb.addOffset(9, definitionOffset);
          fbb.addOffset(10, commentOffset);
          fbb.addOffset(11, requirementsOffset);
          fbb.addOffset(12, aliasOffset);
          fbb.addInt64(13, object.min);
          fbb.addOffset(14, maxOffset);
          fbb.addInt64(15, object.base.targetId);
          fbb.addOffset(16, contentReferenceOffset);
          fbb.addOffset(17, defaultValueBase64BinaryOffset);
          fbb.addBool(18, object.defaultValueBoolean);
          fbb.addOffset(19, defaultValueCanonicalOffset);
          fbb.addOffset(20, defaultValueCodeOffset);
          fbb.addOffset(21, defaultValueDateOffset);
          fbb.addOffset(22, defaultValueDateTimeOffset);
          fbb.addFloat64(23, object.defaultValueDecimal);
          fbb.addOffset(24, defaultValueIdOffset);
          fbb.addOffset(25, defaultValueInstantOffset);
          fbb.addInt64(26, object.defaultValueInteger);
          fbb.addOffset(27, defaultValueMarkdownOffset);
          fbb.addOffset(28, defaultValueOidOffset);
          fbb.addInt64(29, object.defaultValuePositiveInt);
          fbb.addOffset(30, defaultValueStringOffset);
          fbb.addOffset(31, defaultValueTimeOffset);
          fbb.addInt64(32, object.defaultValueUnsignedInt);
          fbb.addOffset(33, defaultValueUriOffset);
          fbb.addOffset(34, defaultValueUrlOffset);
          fbb.addOffset(35, defaultValueUuidOffset);
          fbb.addInt64(36, object.defaultValueAddress.targetId);
          fbb.addInt64(37, object.defaultValueAge.targetId);
          fbb.addInt64(38, object.defaultValueAnnotation.targetId);
          fbb.addInt64(39, object.defaultValueAttachment.targetId);
          fbb.addInt64(40, object.defaultValueCodeableConcept.targetId);
          fbb.addInt64(41, object.defaultValueCodeableReference.targetId);
          fbb.addInt64(42, object.defaultValueCoding.targetId);
          fbb.addInt64(43, object.defaultValueContactPoint.targetId);
          fbb.addInt64(44, object.defaultValueCount.targetId);
          fbb.addInt64(45, object.defaultValueDistance.targetId);
          fbb.addInt64(46, object.defaultValueDuration.targetId);
          fbb.addInt64(47, object.defaultValueHumanName.targetId);
          fbb.addInt64(48, object.defaultValueIdentifier.targetId);
          fbb.addInt64(49, object.defaultValueMoney.targetId);
          fbb.addInt64(50, object.defaultValuePeriod.targetId);
          fbb.addInt64(51, object.defaultValueQuantity.targetId);
          fbb.addInt64(52, object.defaultValueRange.targetId);
          fbb.addInt64(53, object.defaultValueRatio.targetId);
          fbb.addInt64(54, object.defaultValueRatioRange.targetId);
          fbb.addInt64(55, object.defaultValueReference.targetId);
          fbb.addInt64(56, object.defaultValueSampledData.targetId);
          fbb.addInt64(57, object.defaultValueSignature.targetId);
          fbb.addInt64(58, object.defaultValueTiming.targetId);
          fbb.addInt64(59, object.defaultValueContactDetail.targetId);
          fbb.addInt64(60, object.defaultValueContributor.targetId);
          fbb.addInt64(61, object.defaultValueDataRequirement.targetId);
          fbb.addInt64(62, object.defaultValueExpression.targetId);
          fbb.addInt64(63, object.defaultValueParameterDefinition.targetId);
          fbb.addInt64(64, object.defaultValueRelatedArtifact.targetId);
          fbb.addInt64(65, object.defaultValueTriggerDefinition.targetId);
          fbb.addInt64(66, object.defaultValueUsageContext.targetId);
          fbb.addInt64(67, object.defaultValueDosage.targetId);
          fbb.addOffset(68, meaningWhenMissingOffset);
          fbb.addOffset(69, orderMeaningOffset);
          fbb.addOffset(70, fixedBase64BinaryOffset);
          fbb.addBool(71, object.fixedBoolean);
          fbb.addOffset(72, fixedCanonicalOffset);
          fbb.addOffset(73, fixedCodeOffset);
          fbb.addOffset(74, fixedDateOffset);
          fbb.addOffset(75, fixedDateTimeOffset);
          fbb.addFloat64(76, object.fixedDecimal);
          fbb.addOffset(77, fixedIdOffset);
          fbb.addOffset(78, fixedInstantOffset);
          fbb.addInt64(79, object.fixedInteger);
          fbb.addOffset(80, fixedMarkdownOffset);
          fbb.addOffset(81, fixedOidOffset);
          fbb.addInt64(82, object.fixedPositiveInt);
          fbb.addOffset(83, fixedStringOffset);
          fbb.addOffset(84, fixedTimeOffset);
          fbb.addInt64(85, object.fixedUnsignedInt);
          fbb.addOffset(86, fixedUriOffset);
          fbb.addOffset(87, fixedUrlOffset);
          fbb.addOffset(88, fixedUuidOffset);
          fbb.addInt64(89, object.fixedAddress.targetId);
          fbb.addInt64(90, object.fixedAge.targetId);
          fbb.addInt64(91, object.fixedAnnotation.targetId);
          fbb.addInt64(92, object.fixedAttachment.targetId);
          fbb.addInt64(93, object.fixedCodeableConcept.targetId);
          fbb.addInt64(94, object.fixedCodeableReference.targetId);
          fbb.addInt64(95, object.fixedCoding.targetId);
          fbb.addInt64(96, object.fixedContactPoint.targetId);
          fbb.addInt64(97, object.fixedCount.targetId);
          fbb.addInt64(98, object.fixedDistance.targetId);
          fbb.addInt64(99, object.fixedDuration.targetId);
          fbb.addInt64(100, object.fixedHumanName.targetId);
          fbb.addInt64(101, object.fixedIdentifier.targetId);
          fbb.addInt64(102, object.fixedMoney.targetId);
          fbb.addInt64(103, object.fixedPeriod.targetId);
          fbb.addInt64(104, object.fixedQuantity.targetId);
          fbb.addInt64(105, object.fixedRange.targetId);
          fbb.addInt64(106, object.fixedRatio.targetId);
          fbb.addInt64(107, object.fixedRatioRange.targetId);
          fbb.addInt64(108, object.fixedReference.targetId);
          fbb.addInt64(109, object.fixedSampledData.targetId);
          fbb.addInt64(110, object.fixedSignature.targetId);
          fbb.addInt64(111, object.fixedTiming.targetId);
          fbb.addInt64(112, object.fixedContactDetail.targetId);
          fbb.addInt64(113, object.fixedContributor.targetId);
          fbb.addInt64(114, object.fixedDataRequirement.targetId);
          fbb.addInt64(115, object.fixedExpression.targetId);
          fbb.addInt64(116, object.fixedParameterDefinition.targetId);
          fbb.addInt64(117, object.fixedRelatedArtifact.targetId);
          fbb.addInt64(118, object.fixedTriggerDefinition.targetId);
          fbb.addInt64(119, object.fixedUsageContext.targetId);
          fbb.addInt64(120, object.fixedDosage.targetId);
          fbb.addOffset(121, patternBase64BinaryOffset);
          fbb.addBool(122, object.patternBoolean);
          fbb.addOffset(123, patternCanonicalOffset);
          fbb.addOffset(124, patternCodeOffset);
          fbb.addOffset(125, patternDateOffset);
          fbb.addOffset(126, patternDateTimeOffset);
          fbb.addFloat64(127, object.patternDecimal);
          fbb.addOffset(128, patternIdOffset);
          fbb.addOffset(129, patternInstantOffset);
          fbb.addInt64(130, object.patternInteger);
          fbb.addOffset(131, patternMarkdownOffset);
          fbb.addOffset(132, patternOidOffset);
          fbb.addInt64(133, object.patternPositiveInt);
          fbb.addOffset(134, patternStringOffset);
          fbb.addOffset(135, patternTimeOffset);
          fbb.addInt64(136, object.patternUnsignedInt);
          fbb.addOffset(137, patternUriOffset);
          fbb.addOffset(138, patternUrlOffset);
          fbb.addOffset(139, patternUuidOffset);
          fbb.addInt64(140, object.patternAddress.targetId);
          fbb.addInt64(141, object.patternAge.targetId);
          fbb.addInt64(142, object.patternAnnotation.targetId);
          fbb.addInt64(143, object.patternAttachment.targetId);
          fbb.addInt64(144, object.patternCodeableConcept.targetId);
          fbb.addInt64(145, object.patternCodeableReference.targetId);
          fbb.addInt64(146, object.patternCoding.targetId);
          fbb.addInt64(147, object.patternContactPoint.targetId);
          fbb.addInt64(148, object.patternCount.targetId);
          fbb.addInt64(149, object.patternDistance.targetId);
          fbb.addInt64(150, object.patternDuration.targetId);
          fbb.addInt64(151, object.patternHumanName.targetId);
          fbb.addInt64(152, object.patternIdentifier.targetId);
          fbb.addInt64(153, object.patternMoney.targetId);
          fbb.addInt64(154, object.patternPeriod.targetId);
          fbb.addInt64(155, object.patternQuantity.targetId);
          fbb.addInt64(156, object.patternRange.targetId);
          fbb.addInt64(157, object.patternRatio.targetId);
          fbb.addInt64(158, object.patternRatioRange.targetId);
          fbb.addInt64(159, object.patternReference.targetId);
          fbb.addInt64(160, object.patternSampledData.targetId);
          fbb.addInt64(161, object.patternSignature.targetId);
          fbb.addInt64(162, object.patternTiming.targetId);
          fbb.addInt64(163, object.patternContactDetail.targetId);
          fbb.addInt64(164, object.patternContributor.targetId);
          fbb.addInt64(165, object.patternDataRequirement.targetId);
          fbb.addInt64(166, object.patternExpression.targetId);
          fbb.addInt64(167, object.patternParameterDefinition.targetId);
          fbb.addInt64(168, object.patternRelatedArtifact.targetId);
          fbb.addInt64(169, object.patternTriggerDefinition.targetId);
          fbb.addInt64(170, object.patternUsageContext.targetId);
          fbb.addInt64(171, object.patternDosage.targetId);
          fbb.addOffset(172, minValueDateOffset);
          fbb.addOffset(173, minValueDateTimeOffset);
          fbb.addOffset(174, minValueInstantOffset);
          fbb.addOffset(175, minValueTimeOffset);
          fbb.addFloat64(176, object.minValueDecimal);
          fbb.addInt64(177, object.minValueInteger);
          fbb.addInt64(178, object.minValuePositiveInt);
          fbb.addInt64(179, object.minValueUnsignedInt);
          fbb.addInt64(180, object.minValueQuantity.targetId);
          fbb.addOffset(181, maxValueDateOffset);
          fbb.addOffset(182, maxValueDateTimeOffset);
          fbb.addOffset(183, maxValueInstantOffset);
          fbb.addOffset(184, maxValueTimeOffset);
          fbb.addFloat64(185, object.maxValueDecimal);
          fbb.addInt64(186, object.maxValueInteger);
          fbb.addInt64(187, object.maxValuePositiveInt);
          fbb.addInt64(188, object.maxValueUnsignedInt);
          fbb.addInt64(189, object.maxValueQuantity.targetId);
          fbb.addInt64(190, object.maxLength);
          fbb.addOffset(191, conditionOffset);
          fbb.addBool(192, object.mustSupport);
          fbb.addBool(193, object.isModifier);
          fbb.addOffset(194, isModifierReasonOffset);
          fbb.addBool(195, object.isSummary);
          fbb.addInt64(196, object.binding.targetId);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ElementDefinition(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              modifierExtension: ToMany(),
              path: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              representation:
                  const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                      .vTableGetNullable(buffer, rootOffset, 10),
              sliceName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              sliceIsConstraining: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 14),
              label: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              code: ToMany(),
              slicing:
                  ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)),
              short: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 20),
              definition: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 22),
              comment: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 24),
              requirements: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 26),
              alias: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGetNullable(buffer, rootOffset, 28),
              min: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 30),
              max: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 32),
              base: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0)),
              contentReference: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 36),
              type: ToMany(),
              defaultValueBase64Binary: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 38),
              defaultValueBoolean: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 40),
              defaultValueCanonical: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 42),
              defaultValueCode: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 44),
              defaultValueDate: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 46),
              defaultValueDateTime: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 48),
              defaultValueDecimal: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 50),
              defaultValueId: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 52),
              defaultValueInstant: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 54),
              defaultValueInteger: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 56),
              defaultValueMarkdown: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 58),
              defaultValueOid: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 60),
              defaultValuePositiveInt: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 62),
              defaultValueString: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 64),
              defaultValueTime: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 66),
              defaultValueUnsignedInt: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 68),
              defaultValueUri: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 70),
              defaultValueUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 72),
              defaultValueUuid: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 74),
              defaultValueAddress: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 76, 0)),
              defaultValueAge: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 78, 0)),
              defaultValueAnnotation: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 80, 0)),
              defaultValueAttachment: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 82, 0)),
              defaultValueCodeableConcept: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 84, 0)),
              defaultValueCodeableReference: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 86, 0)),
              defaultValueCoding: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 88, 0)),
              defaultValueContactPoint: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 90, 0)),
              defaultValueCount: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 92, 0)),
              defaultValueDistance: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 94, 0)),
              defaultValueDuration: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 96, 0)),
              defaultValueHumanName: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 98, 0)),
              defaultValueIdentifier: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 100, 0)),
              defaultValueMoney: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 102, 0)),
              defaultValuePeriod: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 104, 0)),
              defaultValueQuantity: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 106, 0)),
              defaultValueRange: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 108, 0)),
              defaultValueRatio: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 110, 0)),
              defaultValueRatioRange: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 112, 0)),
              defaultValueReference: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 114, 0)),
              defaultValueSampledData: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 116, 0)),
              defaultValueSignature: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 118, 0)),
              defaultValueTiming: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 120, 0)),
              defaultValueContactDetail: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 122, 0)),
              defaultValueContributor: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 124, 0)),
              defaultValueDataRequirement: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 126, 0)),
              defaultValueExpression: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 128, 0)),
              defaultValueParameterDefinition: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 130, 0)),
              defaultValueRelatedArtifact: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 132, 0)),
              defaultValueTriggerDefinition: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 134, 0)),
              defaultValueUsageContext: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 136, 0)),
              defaultValueDosage: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 138, 0)),
              meaningWhenMissing: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 140),
              orderMeaning: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 142),
              fixedBase64Binary: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 144),
              fixedBoolean: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 146),
              fixedCanonical: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 148),
              fixedCode: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 150),
              fixedDate: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 152),
              fixedDateTime: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 154),
              fixedDecimal: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 156),
              fixedId: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 158),
              fixedInstant: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 160),
              fixedInteger: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 162),
              fixedMarkdown: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 164),
              fixedOid: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 166),
              fixedPositiveInt: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 168),
              fixedString: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 170),
              fixedTime: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 172),
              fixedUnsignedInt: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 174),
              fixedUri: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 176),
              fixedUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 178),
              fixedUuid: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 180),
              fixedAddress: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 182, 0)),
              fixedAge: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 184, 0)),
              fixedAnnotation: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 186, 0)),
              fixedAttachment: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 188, 0)),
              fixedCodeableConcept: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 190, 0)),
              fixedCodeableReference: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 192, 0)),
              fixedCoding: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 194, 0)),
              fixedContactPoint: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 196, 0)),
              fixedCount: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 198, 0)),
              fixedDistance: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 200, 0)),
              fixedDuration: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 202, 0)),
              fixedHumanName: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 204, 0)),
              fixedIdentifier: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 206, 0)),
              fixedMoney: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 208, 0)),
              fixedPeriod: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 210, 0)),
              fixedQuantity: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 212, 0)),
              fixedRange: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 214, 0)),
              fixedRatio: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 216, 0)),
              fixedRatioRange: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 218, 0)),
              fixedReference: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 220, 0)),
              fixedSampledData: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 222, 0)),
              fixedSignature: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 224, 0)),
              fixedTiming: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 226, 0)),
              fixedContactDetail: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 228, 0)),
              fixedContributor: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 230, 0)),
              fixedDataRequirement: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 232, 0)),
              fixedExpression: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 234, 0)),
              fixedParameterDefinition: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 236, 0)),
              fixedRelatedArtifact: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 238, 0)),
              fixedTriggerDefinition: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 240, 0)),
              fixedUsageContext: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 242, 0)),
              fixedDosage: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 244, 0)),
              patternBase64Binary: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 246),
              patternBoolean: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 248),
              patternCanonical: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 250),
              patternCode: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 252),
              patternDate: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 254),
              patternDateTime: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 256),
              patternDecimal: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 258),
              patternId: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 260),
              patternInstant: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 262),
              patternInteger: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 264),
              patternMarkdown: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 266),
              patternOid: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 268),
              patternPositiveInt: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 270),
              patternString: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 272),
              patternTime: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 274),
              patternUnsignedInt: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 276),
              patternUri: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 278),
              patternUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 280),
              patternUuid: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 282),
              patternAddress: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 284, 0)),
              patternAge: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 286, 0)),
              patternAnnotation: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 288, 0)),
              patternAttachment: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 290, 0)),
              patternCodeableConcept: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 292, 0)),
              patternCodeableReference: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 294, 0)),
              patternCoding: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 296, 0)),
              patternContactPoint: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 298, 0)),
              patternCount: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 300, 0)),
              patternDistance: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 302, 0)),
              patternDuration: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 304, 0)),
              patternHumanName: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 306, 0)),
              patternIdentifier: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 308, 0)),
              patternMoney: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 310, 0)),
              patternPeriod: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 312, 0)),
              patternQuantity: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 314, 0)),
              patternRange: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 316, 0)),
              patternRatio: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 318, 0)),
              patternRatioRange: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 320, 0)),
              patternReference: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 322, 0)),
              patternSampledData: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 324, 0)),
              patternSignature: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 326, 0)),
              patternTiming: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 328, 0)),
              patternContactDetail: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 330, 0)),
              patternContributor: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 332, 0)),
              patternDataRequirement: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 334, 0)),
              patternExpression: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 336, 0)),
              patternParameterDefinition: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 338, 0)),
              patternRelatedArtifact: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 340, 0)),
              patternTriggerDefinition: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 342, 0)),
              patternUsageContext: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 344, 0)),
              patternDosage: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 346, 0)),
              example: ToMany(),
              minValueDate: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 348),
              minValueDateTime: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 350),
              minValueInstant: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 352),
              minValueTime: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 354),
              minValueDecimal: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 356),
              minValueInteger: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 358),
              minValuePositiveInt: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 360),
              minValueUnsignedInt: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 362),
              minValueQuantity: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 364, 0)),
              maxValueDate: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 366),
              maxValueDateTime: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 368),
              maxValueInstant: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 370),
              maxValueTime: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 372),
              maxValueDecimal: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 374),
              maxValueInteger: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 376),
              maxValuePositiveInt: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 378),
              maxValueUnsignedInt: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 380),
              maxValueQuantity: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 382, 0)),
              maxLength: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 384),
              condition: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGetNullable(buffer, rootOffset, 386),
              constraint: ToMany(),
              mustSupport: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 388),
              isModifier: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 390),
              isModifierReason: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 392),
              isSummary: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 394),
              binding: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 396, 0)),
              mapping: ToMany())
            ..dbId = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          object.slicing.attach(store);
          object.base.attach(store);
          object.defaultValueAddress.attach(store);
          object.defaultValueAge.attach(store);
          object.defaultValueAnnotation.attach(store);
          object.defaultValueAttachment.attach(store);
          object.defaultValueCodeableConcept.attach(store);
          object.defaultValueCodeableReference.attach(store);
          object.defaultValueCoding.attach(store);
          object.defaultValueContactPoint.attach(store);
          object.defaultValueCount.attach(store);
          object.defaultValueDistance.attach(store);
          object.defaultValueDuration.attach(store);
          object.defaultValueHumanName.attach(store);
          object.defaultValueIdentifier.attach(store);
          object.defaultValueMoney.attach(store);
          object.defaultValuePeriod.attach(store);
          object.defaultValueQuantity.attach(store);
          object.defaultValueRange.attach(store);
          object.defaultValueRatio.attach(store);
          object.defaultValueRatioRange.attach(store);
          object.defaultValueReference.attach(store);
          object.defaultValueSampledData.attach(store);
          object.defaultValueSignature.attach(store);
          object.defaultValueTiming.attach(store);
          object.defaultValueContactDetail.attach(store);
          object.defaultValueContributor.attach(store);
          object.defaultValueDataRequirement.attach(store);
          object.defaultValueExpression.attach(store);
          object.defaultValueParameterDefinition.attach(store);
          object.defaultValueRelatedArtifact.attach(store);
          object.defaultValueTriggerDefinition.attach(store);
          object.defaultValueUsageContext.attach(store);
          object.defaultValueDosage.attach(store);
          object.fixedAddress.attach(store);
          object.fixedAge.attach(store);
          object.fixedAnnotation.attach(store);
          object.fixedAttachment.attach(store);
          object.fixedCodeableConcept.attach(store);
          object.fixedCodeableReference.attach(store);
          object.fixedCoding.attach(store);
          object.fixedContactPoint.attach(store);
          object.fixedCount.attach(store);
          object.fixedDistance.attach(store);
          object.fixedDuration.attach(store);
          object.fixedHumanName.attach(store);
          object.fixedIdentifier.attach(store);
          object.fixedMoney.attach(store);
          object.fixedPeriod.attach(store);
          object.fixedQuantity.attach(store);
          object.fixedRange.attach(store);
          object.fixedRatio.attach(store);
          object.fixedRatioRange.attach(store);
          object.fixedReference.attach(store);
          object.fixedSampledData.attach(store);
          object.fixedSignature.attach(store);
          object.fixedTiming.attach(store);
          object.fixedContactDetail.attach(store);
          object.fixedContributor.attach(store);
          object.fixedDataRequirement.attach(store);
          object.fixedExpression.attach(store);
          object.fixedParameterDefinition.attach(store);
          object.fixedRelatedArtifact.attach(store);
          object.fixedTriggerDefinition.attach(store);
          object.fixedUsageContext.attach(store);
          object.fixedDosage.attach(store);
          object.patternAddress.attach(store);
          object.patternAge.attach(store);
          object.patternAnnotation.attach(store);
          object.patternAttachment.attach(store);
          object.patternCodeableConcept.attach(store);
          object.patternCodeableReference.attach(store);
          object.patternCoding.attach(store);
          object.patternContactPoint.attach(store);
          object.patternCount.attach(store);
          object.patternDistance.attach(store);
          object.patternDuration.attach(store);
          object.patternHumanName.attach(store);
          object.patternIdentifier.attach(store);
          object.patternMoney.attach(store);
          object.patternPeriod.attach(store);
          object.patternQuantity.attach(store);
          object.patternRange.attach(store);
          object.patternRatio.attach(store);
          object.patternRatioRange.attach(store);
          object.patternReference.attach(store);
          object.patternSampledData.attach(store);
          object.patternSignature.attach(store);
          object.patternTiming.attach(store);
          object.patternContactDetail.attach(store);
          object.patternContributor.attach(store);
          object.patternDataRequirement.attach(store);
          object.patternExpression.attach(store);
          object.patternParameterDefinition.attach(store);
          object.patternRelatedArtifact.attach(store);
          object.patternTriggerDefinition.attach(store);
          object.patternUsageContext.attach(store);
          object.patternDosage.attach(store);
          object.minValueQuantity.attach(store);
          object.maxValueQuantity.attach(store);
          object.binding.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<ElementDefinition>.toMany(29, object.dbId!),
              store.box<ElementDefinition>());
          InternalToManyAccess.setRelInfo(
              object.modifierExtension,
              store,
              RelInfo<ElementDefinition>.toMany(30, object.dbId!),
              store.box<ElementDefinition>());
          InternalToManyAccess.setRelInfo(
              object.code,
              store,
              RelInfo<ElementDefinition>.toMany(31, object.dbId!),
              store.box<ElementDefinition>());
          InternalToManyAccess.setRelInfo(
              object.type,
              store,
              RelInfo<ElementDefinition>.toMany(32, object.dbId!),
              store.box<ElementDefinition>());
          InternalToManyAccess.setRelInfo(
              object.example,
              store,
              RelInfo<ElementDefinition>.toMany(33, object.dbId!),
              store.box<ElementDefinition>());
          InternalToManyAccess.setRelInfo(
              object.constraint,
              store,
              RelInfo<ElementDefinition>.toMany(34, object.dbId!),
              store.box<ElementDefinition>());
          InternalToManyAccess.setRelInfo(
              object.mapping,
              store,
              RelInfo<ElementDefinition>.toMany(35, object.dbId!),
              store.box<ElementDefinition>());
          return object;
        }),
    ElementDefinitionBase: EntityDefinition<ElementDefinitionBase>(
        model: _entities[19],
        toOneRelations: (ElementDefinitionBase object) => [object.id],
        toManyRelations: (ElementDefinitionBase object) => {
              RelInfo<ElementDefinitionBase>.toMany(36, object.dbId!):
                  object.extension_
            },
        getId: (ElementDefinitionBase object) => object.dbId,
        setId: (ElementDefinitionBase object, int id) {
          object.dbId = id;
        },
        objectToFB: (ElementDefinitionBase object, fb.Builder fbb) {
          final pathOffset = fbb.writeString(object.path);
          final maxOffset = fbb.writeString(object.max);
          fbb.startTable(6);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addOffset(2, pathOffset);
          fbb.addInt64(3, object.min);
          fbb.addOffset(4, maxOffset);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ElementDefinitionBase(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              path: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              min: const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
              max: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''))
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<ElementDefinitionBase>.toMany(36, object.dbId!),
              store.box<ElementDefinitionBase>());
          return object;
        }),
    ElementDefinitionBinding: EntityDefinition<ElementDefinitionBinding>(
        model: _entities[20],
        toOneRelations: (ElementDefinitionBinding object) => [object.id],
        toManyRelations: (ElementDefinitionBinding object) => {
              RelInfo<ElementDefinitionBinding>.toMany(37, object.dbId!):
                  object.extension_
            },
        getId: (ElementDefinitionBinding object) => object.dbId,
        setId: (ElementDefinitionBinding object, int id) {
          object.dbId = id;
        },
        objectToFB: (ElementDefinitionBinding object, fb.Builder fbb) {
          final strengthOffset = fbb.writeString(object.strength);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final valueSetOffset = object.valueSet == null
              ? null
              : fbb.writeString(object.valueSet!);
          fbb.startTable(6);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addOffset(2, strengthOffset);
          fbb.addOffset(3, descriptionOffset);
          fbb.addOffset(4, valueSetOffset);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ElementDefinitionBinding(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              strength: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              valueSet: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12))
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<ElementDefinitionBinding>.toMany(37, object.dbId!),
              store.box<ElementDefinitionBinding>());
          return object;
        }),
    ElementDefinitionConstraint: EntityDefinition<ElementDefinitionConstraint>(
        model: _entities[21],
        toOneRelations: (ElementDefinitionConstraint object) => [object.id],
        toManyRelations: (ElementDefinitionConstraint object) => {
              RelInfo<ElementDefinitionConstraint>.toMany(38, object.dbId!):
                  object.extension_
            },
        getId: (ElementDefinitionConstraint object) => object.dbId,
        setId: (ElementDefinitionConstraint object, int id) {
          object.dbId = id;
        },
        objectToFB: (ElementDefinitionConstraint object, fb.Builder fbb) {
          final keyOffset = fbb.writeString(object.key);
          final requirementsOffset = object.requirements == null
              ? null
              : fbb.writeString(object.requirements!);
          final severityOffset = fbb.writeString(object.severity);
          final humanOffset = fbb.writeString(object.human);
          final expressionOffset = object.expression == null
              ? null
              : fbb.writeString(object.expression!);
          final xpathOffset =
              object.xpath == null ? null : fbb.writeString(object.xpath!);
          final sourceOffset =
              object.source == null ? null : fbb.writeString(object.source!);
          fbb.startTable(10);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addOffset(2, keyOffset);
          fbb.addOffset(3, requirementsOffset);
          fbb.addOffset(4, severityOffset);
          fbb.addOffset(5, humanOffset);
          fbb.addOffset(6, expressionOffset);
          fbb.addOffset(7, xpathOffset);
          fbb.addOffset(8, sourceOffset);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ElementDefinitionConstraint(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              key: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              requirements: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              severity: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              human: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              expression: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              xpath: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              source: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20))
            ..dbId = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<ElementDefinitionConstraint>.toMany(38, object.dbId!),
              store.box<ElementDefinitionConstraint>());
          return object;
        }),
    ElementDefinitionDiscriminator: EntityDefinition<
            ElementDefinitionDiscriminator>(
        model: _entities[22],
        toOneRelations: (ElementDefinitionDiscriminator object) => [object.id],
        toManyRelations: (ElementDefinitionDiscriminator object) => {
              RelInfo<ElementDefinitionDiscriminator>.toMany(39, object.dbId!):
                  object.extension_
            },
        getId: (ElementDefinitionDiscriminator object) => object.dbId,
        setId: (ElementDefinitionDiscriminator object, int id) {
          object.dbId = id;
        },
        objectToFB: (ElementDefinitionDiscriminator object, fb.Builder fbb) {
          final typeOffset = fbb.writeString(object.type);
          final pathOffset = fbb.writeString(object.path);
          fbb.startTable(5);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addOffset(2, typeOffset);
          fbb.addOffset(3, pathOffset);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ElementDefinitionDiscriminator(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              type: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              path: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''))
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<ElementDefinitionDiscriminator>.toMany(39, object.dbId!),
              store.box<ElementDefinitionDiscriminator>());
          return object;
        }),
    ElementDefinitionExample: EntityDefinition<ElementDefinitionExample>(
        model: _entities[23],
        toOneRelations: (ElementDefinitionExample object) => [
              object.id,
              object.valueAddress,
              object.valueAge,
              object.valueAnnotation,
              object.valueAttachment,
              object.valueCodeableConcept,
              object.valueCodeableReference,
              object.valueCoding,
              object.valueContactPoint,
              object.valueCount,
              object.valueDistance,
              object.valueDuration,
              object.valueHumanName,
              object.valueIdentifier,
              object.valueMoney,
              object.valuePeriod,
              object.valueQuantity,
              object.valueRange,
              object.valueRatio,
              object.valueRatioRange,
              object.valueReference,
              object.valueSampledData,
              object.valueSignature,
              object.valueTiming,
              object.valueContactDetail,
              object.valueContributor,
              object.valueDataRequirement,
              object.valueExpression,
              object.valueParameterDefinition,
              object.valueRelatedArtifact,
              object.valueTriggerDefinition,
              object.valueUsageContext,
              object.valueDosage
            ],
        toManyRelations: (ElementDefinitionExample object) => {
              RelInfo<ElementDefinitionExample>.toMany(40, object.dbId!):
                  object.extension_
            },
        getId: (ElementDefinitionExample object) => object.dbId,
        setId: (ElementDefinitionExample object, int id) {
          object.dbId = id;
        },
        objectToFB: (ElementDefinitionExample object, fb.Builder fbb) {
          final labelOffset = fbb.writeString(object.label);
          final valueBase64BinaryOffset = object.valueBase64Binary == null
              ? null
              : fbb.writeString(object.valueBase64Binary!);
          final valueCanonicalOffset = object.valueCanonical == null
              ? null
              : fbb.writeString(object.valueCanonical!);
          final valueCodeOffset = object.valueCode == null
              ? null
              : fbb.writeString(object.valueCode!);
          final valueDateOffset = object.valueDate == null
              ? null
              : fbb.writeString(object.valueDate!);
          final valueDateTimeOffset = object.valueDateTime == null
              ? null
              : fbb.writeString(object.valueDateTime!);
          final valueIdOffset =
              object.valueId == null ? null : fbb.writeString(object.valueId!);
          final valueInstantOffset = object.valueInstant == null
              ? null
              : fbb.writeString(object.valueInstant!);
          final valueMarkdownOffset = object.valueMarkdown == null
              ? null
              : fbb.writeString(object.valueMarkdown!);
          final valueOidOffset = object.valueOid == null
              ? null
              : fbb.writeString(object.valueOid!);
          final valueStringOffset = object.valueString == null
              ? null
              : fbb.writeString(object.valueString!);
          final valueTimeOffset = object.valueTime == null
              ? null
              : fbb.writeString(object.valueTime!);
          final valueUriOffset = object.valueUri == null
              ? null
              : fbb.writeString(object.valueUri!);
          final valueUrlOffset = object.valueUrl == null
              ? null
              : fbb.writeString(object.valueUrl!);
          final valueUuidOffset = object.valueUuid == null
              ? null
              : fbb.writeString(object.valueUuid!);
          fbb.startTable(55);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addOffset(2, labelOffset);
          fbb.addOffset(3, valueBase64BinaryOffset);
          fbb.addBool(4, object.valueBoolean);
          fbb.addOffset(5, valueCanonicalOffset);
          fbb.addOffset(6, valueCodeOffset);
          fbb.addOffset(7, valueDateOffset);
          fbb.addOffset(8, valueDateTimeOffset);
          fbb.addFloat64(9, object.valueDecimal);
          fbb.addOffset(10, valueIdOffset);
          fbb.addOffset(11, valueInstantOffset);
          fbb.addInt64(12, object.valueInteger);
          fbb.addOffset(13, valueMarkdownOffset);
          fbb.addOffset(14, valueOidOffset);
          fbb.addInt64(15, object.valuePositiveInt);
          fbb.addOffset(16, valueStringOffset);
          fbb.addOffset(17, valueTimeOffset);
          fbb.addInt64(18, object.valueUnsignedInt);
          fbb.addOffset(19, valueUriOffset);
          fbb.addOffset(20, valueUrlOffset);
          fbb.addOffset(21, valueUuidOffset);
          fbb.addInt64(22, object.valueAddress.targetId);
          fbb.addInt64(23, object.valueAge.targetId);
          fbb.addInt64(24, object.valueAnnotation.targetId);
          fbb.addInt64(25, object.valueAttachment.targetId);
          fbb.addInt64(26, object.valueCodeableConcept.targetId);
          fbb.addInt64(27, object.valueCodeableReference.targetId);
          fbb.addInt64(28, object.valueCoding.targetId);
          fbb.addInt64(29, object.valueContactPoint.targetId);
          fbb.addInt64(30, object.valueCount.targetId);
          fbb.addInt64(31, object.valueDistance.targetId);
          fbb.addInt64(32, object.valueDuration.targetId);
          fbb.addInt64(33, object.valueHumanName.targetId);
          fbb.addInt64(34, object.valueIdentifier.targetId);
          fbb.addInt64(35, object.valueMoney.targetId);
          fbb.addInt64(36, object.valuePeriod.targetId);
          fbb.addInt64(37, object.valueQuantity.targetId);
          fbb.addInt64(38, object.valueRange.targetId);
          fbb.addInt64(39, object.valueRatio.targetId);
          fbb.addInt64(40, object.valueRatioRange.targetId);
          fbb.addInt64(41, object.valueReference.targetId);
          fbb.addInt64(42, object.valueSampledData.targetId);
          fbb.addInt64(43, object.valueSignature.targetId);
          fbb.addInt64(44, object.valueTiming.targetId);
          fbb.addInt64(45, object.valueContactDetail.targetId);
          fbb.addInt64(46, object.valueContributor.targetId);
          fbb.addInt64(47, object.valueDataRequirement.targetId);
          fbb.addInt64(48, object.valueExpression.targetId);
          fbb.addInt64(49, object.valueParameterDefinition.targetId);
          fbb.addInt64(50, object.valueRelatedArtifact.targetId);
          fbb.addInt64(51, object.valueTriggerDefinition.targetId);
          fbb.addInt64(52, object.valueUsageContext.targetId);
          fbb.addInt64(53, object.valueDosage.targetId);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ElementDefinitionExample(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              label: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              valueBase64Binary: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              valueBoolean: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 12),
              valueCanonical: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              valueCode: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              valueDate: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              valueDateTime:
                  const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 20),
              valueDecimal: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 22),
              valueId: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 24),
              valueInstant: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 26),
              valueInteger: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28),
              valueMarkdown: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 30),
              valueOid: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 32),
              valuePositiveInt: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 34),
              valueString: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 36),
              valueTime: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 38),
              valueUnsignedInt: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 40),
              valueUri: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 42),
              valueUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 44),
              valueUuid: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 46),
              valueAddress: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 48, 0)),
              valueAge: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 50, 0)),
              valueAnnotation: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 52, 0)),
              valueAttachment: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 54, 0)),
              valueCodeableConcept: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 56, 0)),
              valueCodeableReference: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 58, 0)),
              valueCoding: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 60, 0)),
              valueContactPoint: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 62, 0)),
              valueCount: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 64, 0)),
              valueDistance: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 66, 0)),
              valueDuration: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 68, 0)),
              valueHumanName: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 70, 0)),
              valueIdentifier: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 72, 0)),
              valueMoney: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 74, 0)),
              valuePeriod: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 76, 0)),
              valueQuantity: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 78, 0)),
              valueRange: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 80, 0)),
              valueRatio: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 82, 0)),
              valueRatioRange: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 84, 0)),
              valueReference: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 86, 0)),
              valueSampledData: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 88, 0)),
              valueSignature: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 90, 0)),
              valueTiming: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 92, 0)),
              valueContactDetail: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 94, 0)),
              valueContributor: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 96, 0)),
              valueDataRequirement: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 98, 0)),
              valueExpression: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 100, 0)),
              valueParameterDefinition: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 102, 0)),
              valueRelatedArtifact: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 104, 0)),
              valueTriggerDefinition: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 106, 0)),
              valueUsageContext: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 108, 0)),
              valueDosage: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 110, 0)))
            ..dbId = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          object.valueAddress.attach(store);
          object.valueAge.attach(store);
          object.valueAnnotation.attach(store);
          object.valueAttachment.attach(store);
          object.valueCodeableConcept.attach(store);
          object.valueCodeableReference.attach(store);
          object.valueCoding.attach(store);
          object.valueContactPoint.attach(store);
          object.valueCount.attach(store);
          object.valueDistance.attach(store);
          object.valueDuration.attach(store);
          object.valueHumanName.attach(store);
          object.valueIdentifier.attach(store);
          object.valueMoney.attach(store);
          object.valuePeriod.attach(store);
          object.valueQuantity.attach(store);
          object.valueRange.attach(store);
          object.valueRatio.attach(store);
          object.valueRatioRange.attach(store);
          object.valueReference.attach(store);
          object.valueSampledData.attach(store);
          object.valueSignature.attach(store);
          object.valueTiming.attach(store);
          object.valueContactDetail.attach(store);
          object.valueContributor.attach(store);
          object.valueDataRequirement.attach(store);
          object.valueExpression.attach(store);
          object.valueParameterDefinition.attach(store);
          object.valueRelatedArtifact.attach(store);
          object.valueTriggerDefinition.attach(store);
          object.valueUsageContext.attach(store);
          object.valueDosage.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<ElementDefinitionExample>.toMany(40, object.dbId!),
              store.box<ElementDefinitionExample>());
          return object;
        }),
    ElementDefinitionMapping: EntityDefinition<ElementDefinitionMapping>(
        model: _entities[24],
        toOneRelations: (ElementDefinitionMapping object) => [object.id],
        toManyRelations: (ElementDefinitionMapping object) => {
              RelInfo<ElementDefinitionMapping>.toMany(41, object.dbId!):
                  object.extension_
            },
        getId: (ElementDefinitionMapping object) => object.dbId,
        setId: (ElementDefinitionMapping object, int id) {
          object.dbId = id;
        },
        objectToFB: (ElementDefinitionMapping object, fb.Builder fbb) {
          final identityOffset = fbb.writeString(object.identity);
          final languageOffset = object.language == null
              ? null
              : fbb.writeString(object.language!);
          final mapOffset = fbb.writeString(object.map);
          final commentOffset =
              object.comment == null ? null : fbb.writeString(object.comment!);
          fbb.startTable(7);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addOffset(2, identityOffset);
          fbb.addOffset(3, languageOffset);
          fbb.addOffset(4, mapOffset);
          fbb.addOffset(5, commentOffset);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ElementDefinitionMapping(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              identity: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              language: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              map: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              comment: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14))
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<ElementDefinitionMapping>.toMany(41, object.dbId!),
              store.box<ElementDefinitionMapping>());
          return object;
        }),
    ElementDefinitionSlicing: EntityDefinition<ElementDefinitionSlicing>(
        model: _entities[25],
        toOneRelations: (ElementDefinitionSlicing object) => [object.id],
        toManyRelations: (ElementDefinitionSlicing object) => {
              RelInfo<ElementDefinitionSlicing>.toMany(42, object.dbId!):
                  object.extension_,
              RelInfo<ElementDefinitionSlicing>.toMany(43, object.dbId!):
                  object.discriminator
            },
        getId: (ElementDefinitionSlicing object) => object.dbId,
        setId: (ElementDefinitionSlicing object, int id) {
          object.dbId = id;
        },
        objectToFB: (ElementDefinitionSlicing object, fb.Builder fbb) {
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final rulesOffset = fbb.writeString(object.rules);
          fbb.startTable(6);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addOffset(2, descriptionOffset);
          fbb.addBool(3, object.ordered);
          fbb.addOffset(4, rulesOffset);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ElementDefinitionSlicing(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              discriminator: ToMany(),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              ordered: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 10),
              rules: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''))
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<ElementDefinitionSlicing>.toMany(42, object.dbId!),
              store.box<ElementDefinitionSlicing>());
          InternalToManyAccess.setRelInfo(
              object.discriminator,
              store,
              RelInfo<ElementDefinitionSlicing>.toMany(43, object.dbId!),
              store.box<ElementDefinitionSlicing>());
          return object;
        }),
    ElementDefinitionType: EntityDefinition<ElementDefinitionType>(
        model: _entities[26],
        toOneRelations: (ElementDefinitionType object) => [object.id],
        toManyRelations: (ElementDefinitionType object) => {
              RelInfo<ElementDefinitionType>.toMany(44, object.dbId!):
                  object.extension_
            },
        getId: (ElementDefinitionType object) => object.dbId,
        setId: (ElementDefinitionType object, int id) {
          object.dbId = id;
        },
        objectToFB: (ElementDefinitionType object, fb.Builder fbb) {
          final codeOffset = fbb.writeString(object.code);
          final profileOffset = object.profile == null
              ? null
              : fbb.writeList(
                  object.profile!.map(fbb.writeString).toList(growable: false));
          final targetProfileOffset = object.targetProfile == null
              ? null
              : fbb.writeList(object.targetProfile!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final aggregationOffset = object.aggregation == null
              ? null
              : fbb.writeList(object.aggregation!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final versioningOffset = object.versioning == null
              ? null
              : fbb.writeString(object.versioning!);
          fbb.startTable(8);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addOffset(2, codeOffset);
          fbb.addOffset(3, profileOffset);
          fbb.addOffset(4, targetProfileOffset);
          fbb.addOffset(5, aggregationOffset);
          fbb.addOffset(6, versioningOffset);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ElementDefinitionType(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              code: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              profile: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 10),
              targetProfile: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 12),
              aggregation: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 14),
              versioning: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16))
            ..dbId = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<ElementDefinitionType>.toMany(44, object.dbId!),
              store.box<ElementDefinitionType>());
          return object;
        }),
    FhirDuration: EntityDefinition<FhirDuration>(
        model: _entities[27],
        toOneRelations: (FhirDuration object) => [object.id],
        toManyRelations: (FhirDuration object) =>
            {RelInfo<FhirDuration>.toMany(45, object.dbId!): object.extension_},
        getId: (FhirDuration object) => object.dbId,
        setId: (FhirDuration object, int id) {
          object.dbId = id;
        },
        objectToFB: (FhirDuration object, fb.Builder fbb) {
          final comparatorOffset = object.comparator == null
              ? null
              : fbb.writeString(object.comparator!);
          final unitOffset =
              object.unit == null ? null : fbb.writeString(object.unit!);
          final systemOffset =
              object.system == null ? null : fbb.writeString(object.system!);
          final codeOffset =
              object.code == null ? null : fbb.writeString(object.code!);
          fbb.startTable(8);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addFloat64(2, object.value);
          fbb.addOffset(3, comparatorOffset);
          fbb.addOffset(4, unitOffset);
          fbb.addOffset(5, systemOffset);
          fbb.addOffset(6, codeOffset);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = FhirDuration(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              value: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 8),
              comparator: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              unit: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              system: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              code: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16))
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<FhirDuration>.toMany(45, object.dbId!),
              store.box<FhirDuration>());
          return object;
        }),
    FhirExpression: EntityDefinition<FhirExpression>(
        model: _entities[28],
        toOneRelations: (FhirExpression object) => [object.id],
        toManyRelations: (FhirExpression object) => {
              RelInfo<FhirExpression>.toMany(46, object.dbId!):
                  object.extension_
            },
        getId: (FhirExpression object) => object.dbId,
        setId: (FhirExpression object, int id) {
          object.dbId = id;
        },
        objectToFB: (FhirExpression object, fb.Builder fbb) {
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final languageOffset = fbb.writeString(object.language);
          final expressionOffset = object.expression == null
              ? null
              : fbb.writeString(object.expression!);
          final referenceOffset = object.reference == null
              ? null
              : fbb.writeString(object.reference!);
          fbb.startTable(8);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addOffset(2, descriptionOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, languageOffset);
          fbb.addOffset(5, expressionOffset);
          fbb.addOffset(6, referenceOffset);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = FhirExpression(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              language: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              expression: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              reference: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16))
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<FhirExpression>.toMany(46, object.dbId!),
              store.box<FhirExpression>());
          return object;
        }),
    FhirExtension: EntityDefinition<FhirExtension>(
        model: _entities[29],
        toOneRelations: (FhirExtension object) => [
              object.id,
              object.url,
              object.valueAddress,
              object.valueAge,
              object.valueAnnotation,
              object.valueAttachment,
              object.valueCodeableConcept,
              object.valueCodeableReference,
              object.valueCoding,
              object.valueContactPoint,
              object.valueCount,
              object.valueDistance,
              object.valueDuration,
              object.valueHumanName,
              object.valueIdentifier,
              object.valueMoney,
              object.valuePeriod,
              object.valueQuantity,
              object.valueRange,
              object.valueRatio,
              object.valueRatioRange,
              object.valueReference,
              object.valueSampledData,
              object.valueSignature,
              object.valueTiming,
              object.valueContactDetail,
              object.valueContributor,
              object.valueDataRequirement,
              object.valueExpression,
              object.valueParameterDefinition,
              object.valueRelatedArtifact,
              object.valueTriggerDefinition,
              object.valueUsageContext,
              object.valueDosage
            ],
        toManyRelations: (FhirExtension object) => {
              RelInfo<FhirExtension>.toMany(47, object.dbId!): object.extension_
            },
        getId: (FhirExtension object) => object.dbId,
        setId: (FhirExtension object, int id) {
          object.dbId = id;
        },
        objectToFB: (FhirExtension object, fb.Builder fbb) {
          final valueBase64BinaryOffset = object.valueBase64Binary == null
              ? null
              : fbb.writeString(object.valueBase64Binary!);
          final valueCanonicalOffset = object.valueCanonical == null
              ? null
              : fbb.writeString(object.valueCanonical!);
          final valueCodeOffset = object.valueCode == null
              ? null
              : fbb.writeString(object.valueCode!);
          final valueDateOffset = object.valueDate == null
              ? null
              : fbb.writeString(object.valueDate!);
          final valueDateTimeOffset = object.valueDateTime == null
              ? null
              : fbb.writeString(object.valueDateTime!);
          final valueIdOffset =
              object.valueId == null ? null : fbb.writeString(object.valueId!);
          final valueInstantOffset = object.valueInstant == null
              ? null
              : fbb.writeString(object.valueInstant!);
          final valueMarkdownOffset = object.valueMarkdown == null
              ? null
              : fbb.writeString(object.valueMarkdown!);
          final valueOidOffset = object.valueOid == null
              ? null
              : fbb.writeString(object.valueOid!);
          final valueStringOffset = object.valueString == null
              ? null
              : fbb.writeString(object.valueString!);
          final valueTimeOffset = object.valueTime == null
              ? null
              : fbb.writeString(object.valueTime!);
          final valueUriOffset = object.valueUri == null
              ? null
              : fbb.writeString(object.valueUri!);
          final valueUrlOffset = object.valueUrl == null
              ? null
              : fbb.writeString(object.valueUrl!);
          final valueUuidOffset = object.valueUuid == null
              ? null
              : fbb.writeString(object.valueUuid!);
          fbb.startTable(55);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addInt64(2, object.url.targetId);
          fbb.addOffset(3, valueBase64BinaryOffset);
          fbb.addBool(4, object.valueBoolean);
          fbb.addOffset(5, valueCanonicalOffset);
          fbb.addOffset(6, valueCodeOffset);
          fbb.addOffset(7, valueDateOffset);
          fbb.addOffset(8, valueDateTimeOffset);
          fbb.addFloat64(9, object.valueDecimal);
          fbb.addOffset(10, valueIdOffset);
          fbb.addOffset(11, valueInstantOffset);
          fbb.addInt64(12, object.valueInteger);
          fbb.addOffset(13, valueMarkdownOffset);
          fbb.addOffset(14, valueOidOffset);
          fbb.addInt64(15, object.valuePositiveInt);
          fbb.addOffset(16, valueStringOffset);
          fbb.addOffset(17, valueTimeOffset);
          fbb.addInt64(18, object.valueUnsignedInt);
          fbb.addOffset(19, valueUriOffset);
          fbb.addOffset(20, valueUrlOffset);
          fbb.addOffset(21, valueUuidOffset);
          fbb.addInt64(22, object.valueAddress.targetId);
          fbb.addInt64(23, object.valueAge.targetId);
          fbb.addInt64(24, object.valueAnnotation.targetId);
          fbb.addInt64(25, object.valueAttachment.targetId);
          fbb.addInt64(26, object.valueCodeableConcept.targetId);
          fbb.addInt64(27, object.valueCodeableReference.targetId);
          fbb.addInt64(28, object.valueCoding.targetId);
          fbb.addInt64(29, object.valueContactPoint.targetId);
          fbb.addInt64(30, object.valueCount.targetId);
          fbb.addInt64(31, object.valueDistance.targetId);
          fbb.addInt64(32, object.valueDuration.targetId);
          fbb.addInt64(33, object.valueHumanName.targetId);
          fbb.addInt64(34, object.valueIdentifier.targetId);
          fbb.addInt64(35, object.valueMoney.targetId);
          fbb.addInt64(36, object.valuePeriod.targetId);
          fbb.addInt64(37, object.valueQuantity.targetId);
          fbb.addInt64(38, object.valueRange.targetId);
          fbb.addInt64(39, object.valueRatio.targetId);
          fbb.addInt64(40, object.valueRatioRange.targetId);
          fbb.addInt64(41, object.valueReference.targetId);
          fbb.addInt64(42, object.valueSampledData.targetId);
          fbb.addInt64(43, object.valueSignature.targetId);
          fbb.addInt64(44, object.valueTiming.targetId);
          fbb.addInt64(45, object.valueContactDetail.targetId);
          fbb.addInt64(46, object.valueContributor.targetId);
          fbb.addInt64(47, object.valueDataRequirement.targetId);
          fbb.addInt64(48, object.valueExpression.targetId);
          fbb.addInt64(49, object.valueParameterDefinition.targetId);
          fbb.addInt64(50, object.valueRelatedArtifact.targetId);
          fbb.addInt64(51, object.valueTriggerDefinition.targetId);
          fbb.addInt64(52, object.valueUsageContext.targetId);
          fbb.addInt64(53, object.valueDosage.targetId);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = FhirExtension(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              url: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 8, 0)),
              valueBase64Binary: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              valueBoolean: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 12),
              valueCanonical: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              valueCode: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              valueDate: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              valueDateTime: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20),
              valueDecimal: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 22),
              valueId: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 24),
              valueInstant: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 26),
              valueInteger: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28),
              valueMarkdown: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 30),
              valueOid: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 32),
              valuePositiveInt: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 34),
              valueString: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 36),
              valueTime: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 38),
              valueUnsignedInt: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 40),
              valueUri: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 42),
              valueUrl: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 44),
              valueUuid: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 46),
              valueAddress: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 48, 0)),
              valueAge: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 50, 0)),
              valueAnnotation: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 52, 0)),
              valueAttachment: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 54, 0)),
              valueCodeableConcept: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 56, 0)),
              valueCodeableReference: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 58, 0)),
              valueCoding: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 60, 0)),
              valueContactPoint: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 62, 0)),
              valueCount: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 64, 0)),
              valueDistance: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 66, 0)),
              valueDuration: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 68, 0)),
              valueHumanName: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 70, 0)),
              valueIdentifier: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 72, 0)),
              valueMoney: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 74, 0)),
              valuePeriod: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 76, 0)),
              valueQuantity: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 78, 0)),
              valueRange: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 80, 0)),
              valueRatio: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 82, 0)),
              valueRatioRange: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 84, 0)),
              valueReference: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 86, 0)),
              valueSampledData: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 88, 0)),
              valueSignature: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 90, 0)),
              valueTiming: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 92, 0)),
              valueContactDetail: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 94, 0)),
              valueContributor: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 96, 0)),
              valueDataRequirement: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 98, 0)),
              valueExpression: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 100, 0)),
              valueParameterDefinition: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 102, 0)),
              valueRelatedArtifact: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 104, 0)),
              valueTriggerDefinition: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 106, 0)),
              valueUsageContext: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 108, 0)),
              valueDosage: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 110, 0)))
            ..dbId = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          object.url.attach(store);
          object.valueAddress.attach(store);
          object.valueAge.attach(store);
          object.valueAnnotation.attach(store);
          object.valueAttachment.attach(store);
          object.valueCodeableConcept.attach(store);
          object.valueCodeableReference.attach(store);
          object.valueCoding.attach(store);
          object.valueContactPoint.attach(store);
          object.valueCount.attach(store);
          object.valueDistance.attach(store);
          object.valueDuration.attach(store);
          object.valueHumanName.attach(store);
          object.valueIdentifier.attach(store);
          object.valueMoney.attach(store);
          object.valuePeriod.attach(store);
          object.valueQuantity.attach(store);
          object.valueRange.attach(store);
          object.valueRatio.attach(store);
          object.valueRatioRange.attach(store);
          object.valueReference.attach(store);
          object.valueSampledData.attach(store);
          object.valueSignature.attach(store);
          object.valueTiming.attach(store);
          object.valueContactDetail.attach(store);
          object.valueContributor.attach(store);
          object.valueDataRequirement.attach(store);
          object.valueExpression.attach(store);
          object.valueParameterDefinition.attach(store);
          object.valueRelatedArtifact.attach(store);
          object.valueTriggerDefinition.attach(store);
          object.valueUsageContext.attach(store);
          object.valueDosage.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<FhirExtension>.toMany(47, object.dbId!),
              store.box<FhirExtension>());
          return object;
        }),
    FhirMeta: EntityDefinition<FhirMeta>(
        model: _entities[30],
        toOneRelations: (FhirMeta object) => [object.id],
        toManyRelations: (FhirMeta object) => {
              RelInfo<FhirMeta>.toMany(48, object.dbId!): object.extension_,
              RelInfo<FhirMeta>.toMany(49, object.dbId!): object.security,
              RelInfo<FhirMeta>.toMany(50, object.dbId!): object.tag
            },
        getId: (FhirMeta object) => object.dbId,
        setId: (FhirMeta object, int id) {
          object.dbId = id;
        },
        objectToFB: (FhirMeta object, fb.Builder fbb) {
          final versionIdOffset = object.versionId == null
              ? null
              : fbb.writeString(object.versionId!);
          final lastUpdatedOffset = object.lastUpdated == null
              ? null
              : fbb.writeString(object.lastUpdated!);
          final sourceOffset =
              object.source == null ? null : fbb.writeString(object.source!);
          final profileOffset = object.profile == null
              ? null
              : fbb.writeList(
                  object.profile!.map(fbb.writeString).toList(growable: false));
          fbb.startTable(7);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addOffset(2, versionIdOffset);
          fbb.addOffset(3, lastUpdatedOffset);
          fbb.addOffset(4, sourceOffset);
          fbb.addOffset(5, profileOffset);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = FhirMeta(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              versionId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              lastUpdated: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              source: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              profile: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 14),
              security: ToMany(),
              tag: ToMany())
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<FhirMeta>.toMany(48, object.dbId!),
              store.box<FhirMeta>());
          InternalToManyAccess.setRelInfo(
              object.security,
              store,
              RelInfo<FhirMeta>.toMany(49, object.dbId!),
              store.box<FhirMeta>());
          InternalToManyAccess.setRelInfo(
              object.tag,
              store,
              RelInfo<FhirMeta>.toMany(50, object.dbId!),
              store.box<FhirMeta>());
          return object;
        }),
    HumanName: EntityDefinition<HumanName>(
        model: _entities[31],
        toOneRelations: (HumanName object) => [object.id, object.period],
        toManyRelations: (HumanName object) =>
            {RelInfo<HumanName>.toMany(51, object.dbId!): object.extension_},
        getId: (HumanName object) => object.dbId,
        setId: (HumanName object, int id) {
          object.dbId = id;
        },
        objectToFB: (HumanName object, fb.Builder fbb) {
          final useOffset =
              object.use == null ? null : fbb.writeString(object.use!);
          final textOffset =
              object.text == null ? null : fbb.writeString(object.text!);
          final familyOffset =
              object.family == null ? null : fbb.writeString(object.family!);
          final givenOffset = object.given == null
              ? null
              : fbb.writeList(
                  object.given!.map(fbb.writeString).toList(growable: false));
          final prefixOffset = object.prefix == null
              ? null
              : fbb.writeList(
                  object.prefix!.map(fbb.writeString).toList(growable: false));
          final suffixOffset = object.suffix == null
              ? null
              : fbb.writeList(
                  object.suffix!.map(fbb.writeString).toList(growable: false));
          fbb.startTable(10);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addOffset(2, useOffset);
          fbb.addOffset(3, textOffset);
          fbb.addOffset(4, familyOffset);
          fbb.addOffset(5, givenOffset);
          fbb.addOffset(6, prefixOffset);
          fbb.addOffset(7, suffixOffset);
          fbb.addInt64(8, object.period.targetId);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = HumanName(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              use: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              text: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              family: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              given: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 14),
              prefix:
                  const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                      .vTableGetNullable(buffer, rootOffset, 16),
              suffix:
                  const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                      .vTableGetNullable(buffer, rootOffset, 18),
              period: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0)))
            ..dbId = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          object.period.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<HumanName>.toMany(51, object.dbId!),
              store.box<HumanName>());
          return object;
        }),
    Identifier: EntityDefinition<Identifier>(
        model: _entities[32],
        toOneRelations: (Identifier object) =>
            [object.id, object.type, object.period, object.assigner],
        toManyRelations: (Identifier object) =>
            {RelInfo<Identifier>.toMany(52, object.dbId!): object.extension_},
        getId: (Identifier object) => object.dbId,
        setId: (Identifier object, int id) {
          object.dbId = id;
        },
        objectToFB: (Identifier object, fb.Builder fbb) {
          final useOffset =
              object.use == null ? null : fbb.writeString(object.use!);
          final systemOffset =
              object.system == null ? null : fbb.writeString(object.system!);
          final valueOffset =
              object.value == null ? null : fbb.writeString(object.value!);
          fbb.startTable(9);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addOffset(2, useOffset);
          fbb.addInt64(3, object.type.targetId);
          fbb.addOffset(4, systemOffset);
          fbb.addOffset(5, valueOffset);
          fbb.addInt64(6, object.period.targetId);
          fbb.addInt64(7, object.assigner.targetId);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Identifier(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              use: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              type: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 10, 0)),
              system: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              value: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              period: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 16, 0)),
              assigner:
                  ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)))
            ..dbId = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          object.type.attach(store);
          object.period.attach(store);
          object.assigner.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<Identifier>.toMany(52, object.dbId!),
              store.box<Identifier>());
          return object;
        }),
    MarketingStatus: EntityDefinition<MarketingStatus>(
        model: _entities[33],
        toOneRelations: (MarketingStatus object) => [
              object.id,
              object.country,
              object.jurisdiction,
              object.status,
              object.dateRange
            ],
        toManyRelations: (MarketingStatus object) => {
              RelInfo<MarketingStatus>.toMany(53, object.dbId!):
                  object.extension_,
              RelInfo<MarketingStatus>.toMany(54, object.dbId!):
                  object.modifierExtension
            },
        getId: (MarketingStatus object) => object.dbId,
        setId: (MarketingStatus object, int id) {
          object.dbId = id;
        },
        objectToFB: (MarketingStatus object, fb.Builder fbb) {
          final restoreDateOffset = object.restoreDate == null
              ? null
              : fbb.writeString(object.restoreDate!);
          fbb.startTable(8);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addInt64(2, object.country.targetId);
          fbb.addInt64(3, object.jurisdiction.targetId);
          fbb.addInt64(4, object.status.targetId);
          fbb.addInt64(5, object.dateRange.targetId);
          fbb.addOffset(6, restoreDateOffset);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = MarketingStatus(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              modifierExtension: ToMany(),
              country: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 8, 0)),
              jurisdiction: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 10, 0)),
              status: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 12, 0)),
              dateRange: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 14, 0)),
              restoreDate: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16))
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          object.country.attach(store);
          object.jurisdiction.attach(store);
          object.status.attach(store);
          object.dateRange.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<MarketingStatus>.toMany(53, object.dbId!),
              store.box<MarketingStatus>());
          InternalToManyAccess.setRelInfo(
              object.modifierExtension,
              store,
              RelInfo<MarketingStatus>.toMany(54, object.dbId!),
              store.box<MarketingStatus>());
          return object;
        }),
    Money: EntityDefinition<Money>(
        model: _entities[34],
        toOneRelations: (Money object) => [object.id],
        toManyRelations: (Money object) =>
            {RelInfo<Money>.toMany(55, object.dbId!): object.extension_},
        getId: (Money object) => object.dbId,
        setId: (Money object, int id) {
          object.dbId = id;
        },
        objectToFB: (Money object, fb.Builder fbb) {
          final currencyOffset = object.currency == null
              ? null
              : fbb.writeString(object.currency!);
          fbb.startTable(5);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addFloat64(2, object.value);
          fbb.addOffset(3, currencyOffset);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Money(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              value: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 8),
              currency: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10))
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          InternalToManyAccess.setRelInfo(object.extension_, store,
              RelInfo<Money>.toMany(55, object.dbId!), store.box<Money>());
          return object;
        }),
    Narrative: EntityDefinition<Narrative>(
        model: _entities[35],
        toOneRelations: (Narrative object) => [object.id],
        toManyRelations: (Narrative object) =>
            {RelInfo<Narrative>.toMany(56, object.dbId!): object.extension_},
        getId: (Narrative object) => object.dbId,
        setId: (Narrative object, int id) {
          object.dbId = id;
        },
        objectToFB: (Narrative object, fb.Builder fbb) {
          final statusOffset = fbb.writeString(object.status);
          final divOffset = fbb.writeString(object.div);
          fbb.startTable(5);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addOffset(2, statusOffset);
          fbb.addOffset(3, divOffset);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Narrative(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              status: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              div: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''))
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<Narrative>.toMany(56, object.dbId!),
              store.box<Narrative>());
          return object;
        }),
    ParameterDefinition: EntityDefinition<ParameterDefinition>(
        model: _entities[36],
        toOneRelations: (ParameterDefinition object) => [object.id],
        toManyRelations: (ParameterDefinition object) => {
              RelInfo<ParameterDefinition>.toMany(57, object.dbId!):
                  object.extension_
            },
        getId: (ParameterDefinition object) => object.dbId,
        setId: (ParameterDefinition object, int id) {
          object.dbId = id;
        },
        objectToFB: (ParameterDefinition object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final useOffset = fbb.writeString(object.use);
          final maxOffset =
              object.max == null ? null : fbb.writeString(object.max!);
          final documentationOffset = object.documentation == null
              ? null
              : fbb.writeString(object.documentation!);
          final typeOffset = fbb.writeString(object.type);
          final profileOffset =
              object.profile == null ? null : fbb.writeString(object.profile!);
          fbb.startTable(10);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, useOffset);
          fbb.addInt64(4, object.min);
          fbb.addOffset(5, maxOffset);
          fbb.addOffset(6, documentationOffset);
          fbb.addOffset(7, typeOffset);
          fbb.addOffset(8, profileOffset);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ParameterDefinition(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              use: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              min: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 12),
              max: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              documentation: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              type: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              profile: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20))
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<ParameterDefinition>.toMany(57, object.dbId!),
              store.box<ParameterDefinition>());
          return object;
        }),
    Period: EntityDefinition<Period>(
        model: _entities[37],
        toOneRelations: (Period object) => [object.id],
        toManyRelations: (Period object) =>
            {RelInfo<Period>.toMany(58, object.dbId!): object.extension_},
        getId: (Period object) => object.dbId,
        setId: (Period object, int id) {
          object.dbId = id;
        },
        objectToFB: (Period object, fb.Builder fbb) {
          final startOffset =
              object.start == null ? null : fbb.writeString(object.start!);
          final endOffset =
              object.end == null ? null : fbb.writeString(object.end!);
          fbb.startTable(5);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addOffset(2, startOffset);
          fbb.addOffset(3, endOffset);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Period(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              start: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              end: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10))
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          InternalToManyAccess.setRelInfo(object.extension_, store,
              RelInfo<Period>.toMany(58, object.dbId!), store.box<Period>());
          return object;
        }),
    Population: EntityDefinition<Population>(
        model: _entities[38],
        toOneRelations: (Population object) => [
              object.id,
              object.ageRange,
              object.ageCodeableConcept,
              object.gender,
              object.race,
              object.physiologicalCondition
            ],
        toManyRelations: (Population object) => {
              RelInfo<Population>.toMany(59, object.dbId!): object.extension_,
              RelInfo<Population>.toMany(60, object.dbId!):
                  object.modifierExtension
            },
        getId: (Population object) => object.dbId,
        setId: (Population object, int id) {
          object.dbId = id;
        },
        objectToFB: (Population object, fb.Builder fbb) {
          fbb.startTable(8);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addInt64(2, object.ageRange.targetId);
          fbb.addInt64(3, object.ageCodeableConcept.targetId);
          fbb.addInt64(4, object.gender.targetId);
          fbb.addInt64(5, object.race.targetId);
          fbb.addInt64(6, object.physiologicalCondition.targetId);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Population(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              modifierExtension: ToMany(),
              ageRange: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 8, 0)),
              ageCodeableConcept: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 10, 0)),
              gender: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 12, 0)),
              race: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 14, 0)),
              physiologicalCondition: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 16, 0)))
            ..dbId = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          object.ageRange.attach(store);
          object.ageCodeableConcept.attach(store);
          object.gender.attach(store);
          object.race.attach(store);
          object.physiologicalCondition.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<Population>.toMany(59, object.dbId!),
              store.box<Population>());
          InternalToManyAccess.setRelInfo(
              object.modifierExtension,
              store,
              RelInfo<Population>.toMany(60, object.dbId!),
              store.box<Population>());
          return object;
        }),
    ProdCharacteristic: EntityDefinition<ProdCharacteristic>(
        model: _entities[39],
        toOneRelations: (ProdCharacteristic object) => [
              object.id,
              object.height,
              object.width,
              object.depth,
              object.weight,
              object.nominalVolume,
              object.externalDiameter,
              object.scoring
            ],
        toManyRelations: (ProdCharacteristic object) => {
              RelInfo<ProdCharacteristic>.toMany(61, object.dbId!):
                  object.extension_,
              RelInfo<ProdCharacteristic>.toMany(62, object.dbId!):
                  object.modifierExtension,
              RelInfo<ProdCharacteristic>.toMany(63, object.dbId!): object.image
            },
        getId: (ProdCharacteristic object) => object.dbId,
        setId: (ProdCharacteristic object, int id) {
          object.dbId = id;
        },
        objectToFB: (ProdCharacteristic object, fb.Builder fbb) {
          final shapeOffset =
              object.shape == null ? null : fbb.writeString(object.shape!);
          final colorOffset = object.color == null
              ? null
              : fbb.writeList(
                  object.color!.map(fbb.writeString).toList(growable: false));
          final imprintOffset = object.imprint == null
              ? null
              : fbb.writeList(
                  object.imprint!.map(fbb.writeString).toList(growable: false));
          fbb.startTable(13);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addInt64(2, object.height.targetId);
          fbb.addInt64(3, object.width.targetId);
          fbb.addInt64(4, object.depth.targetId);
          fbb.addInt64(5, object.weight.targetId);
          fbb.addInt64(6, object.nominalVolume.targetId);
          fbb.addInt64(7, object.externalDiameter.targetId);
          fbb.addOffset(8, shapeOffset);
          fbb.addOffset(9, colorOffset);
          fbb.addOffset(10, imprintOffset);
          fbb.addInt64(11, object.scoring.targetId);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProdCharacteristic(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              modifierExtension: ToMany(),
              height: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 8, 0)),
              width: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 10, 0)),
              depth: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 12, 0)),
              weight: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 14, 0)),
              nominalVolume: ToOne(
                  targetId:
                      const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)),
              externalDiameter: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)),
              shape: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 20),
              color: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGetNullable(buffer, rootOffset, 22),
              imprint: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGetNullable(buffer, rootOffset, 24),
              image: ToMany(),
              scoring: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0)))
            ..dbId = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          object.height.attach(store);
          object.width.attach(store);
          object.depth.attach(store);
          object.weight.attach(store);
          object.nominalVolume.attach(store);
          object.externalDiameter.attach(store);
          object.scoring.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<ProdCharacteristic>.toMany(61, object.dbId!),
              store.box<ProdCharacteristic>());
          InternalToManyAccess.setRelInfo(
              object.modifierExtension,
              store,
              RelInfo<ProdCharacteristic>.toMany(62, object.dbId!),
              store.box<ProdCharacteristic>());
          InternalToManyAccess.setRelInfo(
              object.image,
              store,
              RelInfo<ProdCharacteristic>.toMany(63, object.dbId!),
              store.box<ProdCharacteristic>());
          return object;
        }),
    ProductShelfLife: EntityDefinition<ProductShelfLife>(
        model: _entities[40],
        toOneRelations: (ProductShelfLife object) =>
            [object.id, object.identifier, object.type, object.period],
        toManyRelations: (ProductShelfLife object) => {
              RelInfo<ProductShelfLife>.toMany(64, object.dbId!):
                  object.extension_,
              RelInfo<ProductShelfLife>.toMany(65, object.dbId!):
                  object.modifierExtension,
              RelInfo<ProductShelfLife>.toMany(66, object.dbId!):
                  object.specialPrecautionsForStorage
            },
        getId: (ProductShelfLife object) => object.dbId,
        setId: (ProductShelfLife object, int id) {
          object.dbId = id;
        },
        objectToFB: (ProductShelfLife object, fb.Builder fbb) {
          fbb.startTable(6);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addInt64(2, object.identifier.targetId);
          fbb.addInt64(3, object.type.targetId);
          fbb.addInt64(4, object.period.targetId);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProductShelfLife(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              modifierExtension: ToMany(),
              identifier: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 8, 0)),
              type: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 10, 0)),
              period: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 12, 0)),
              specialPrecautionsForStorage: ToMany())
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          object.identifier.attach(store);
          object.type.attach(store);
          object.period.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<ProductShelfLife>.toMany(64, object.dbId!),
              store.box<ProductShelfLife>());
          InternalToManyAccess.setRelInfo(
              object.modifierExtension,
              store,
              RelInfo<ProductShelfLife>.toMany(65, object.dbId!),
              store.box<ProductShelfLife>());
          InternalToManyAccess.setRelInfo(
              object.specialPrecautionsForStorage,
              store,
              RelInfo<ProductShelfLife>.toMany(66, object.dbId!),
              store.box<ProductShelfLife>());
          return object;
        }),
    Quantity: EntityDefinition<Quantity>(
        model: _entities[41],
        toOneRelations: (Quantity object) => [object.id],
        toManyRelations: (Quantity object) =>
            {RelInfo<Quantity>.toMany(67, object.dbId!): object.extension_},
        getId: (Quantity object) => object.dbId,
        setId: (Quantity object, int id) {
          object.dbId = id;
        },
        objectToFB: (Quantity object, fb.Builder fbb) {
          final comparatorOffset = object.comparator == null
              ? null
              : fbb.writeString(object.comparator!);
          final unitOffset =
              object.unit == null ? null : fbb.writeString(object.unit!);
          final systemOffset =
              object.system == null ? null : fbb.writeString(object.system!);
          final codeOffset =
              object.code == null ? null : fbb.writeString(object.code!);
          fbb.startTable(8);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addFloat64(2, object.value);
          fbb.addOffset(3, comparatorOffset);
          fbb.addOffset(4, unitOffset);
          fbb.addOffset(5, systemOffset);
          fbb.addOffset(6, codeOffset);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Quantity(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              value: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 8),
              comparator: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              unit: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              system: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              code: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16))
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<Quantity>.toMany(67, object.dbId!),
              store.box<Quantity>());
          return object;
        }),
    Range: EntityDefinition<Range>(
        model: _entities[42],
        toOneRelations: (Range object) => [object.id, object.low, object.high],
        toManyRelations: (Range object) =>
            {RelInfo<Range>.toMany(68, object.dbId!): object.extension_},
        getId: (Range object) => object.dbId,
        setId: (Range object, int id) {
          object.dbId = id;
        },
        objectToFB: (Range object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addInt64(2, object.low.targetId);
          fbb.addInt64(3, object.high.targetId);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Range(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              low: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 8, 0)),
              high: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 10, 0)))
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          object.low.attach(store);
          object.high.attach(store);
          InternalToManyAccess.setRelInfo(object.extension_, store,
              RelInfo<Range>.toMany(68, object.dbId!), store.box<Range>());
          return object;
        }),
    Ratio: EntityDefinition<Ratio>(
        model: _entities[43],
        toOneRelations: (Ratio object) =>
            [object.id, object.numerator, object.denominator],
        toManyRelations: (Ratio object) =>
            {RelInfo<Ratio>.toMany(69, object.dbId!): object.extension_},
        getId: (Ratio object) => object.dbId,
        setId: (Ratio object, int id) {
          object.dbId = id;
        },
        objectToFB: (Ratio object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addInt64(2, object.numerator.targetId);
          fbb.addInt64(3, object.denominator.targetId);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Ratio(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              numerator: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 8, 0)),
              denominator: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 10, 0)))
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          object.numerator.attach(store);
          object.denominator.attach(store);
          InternalToManyAccess.setRelInfo(object.extension_, store,
              RelInfo<Ratio>.toMany(69, object.dbId!), store.box<Ratio>());
          return object;
        }),
    RatioRange: EntityDefinition<RatioRange>(
        model: _entities[44],
        toOneRelations: (RatioRange object) => [
              object.id,
              object.lowNumerator,
              object.highNumerator,
              object.denominator
            ],
        toManyRelations: (RatioRange object) =>
            {RelInfo<RatioRange>.toMany(70, object.dbId!): object.extension_},
        getId: (RatioRange object) => object.dbId,
        setId: (RatioRange object, int id) {
          object.dbId = id;
        },
        objectToFB: (RatioRange object, fb.Builder fbb) {
          fbb.startTable(6);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addInt64(2, object.lowNumerator.targetId);
          fbb.addInt64(3, object.highNumerator.targetId);
          fbb.addInt64(4, object.denominator.targetId);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = RatioRange(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              lowNumerator: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 8, 0)),
              highNumerator: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 10, 0)),
              denominator: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 12, 0)))
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          object.lowNumerator.attach(store);
          object.highNumerator.attach(store);
          object.denominator.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<RatioRange>.toMany(70, object.dbId!),
              store.box<RatioRange>());
          return object;
        }),
    Reference: EntityDefinition<Reference>(
        model: _entities[45],
        toOneRelations: (Reference object) => [object.id, object.identifier],
        toManyRelations: (Reference object) =>
            {RelInfo<Reference>.toMany(71, object.dbId!): object.extension_},
        getId: (Reference object) => object.dbId,
        setId: (Reference object, int id) {
          object.dbId = id;
        },
        objectToFB: (Reference object, fb.Builder fbb) {
          final referenceOffset = object.reference == null
              ? null
              : fbb.writeString(object.reference!);
          final typeOffset =
              object.type == null ? null : fbb.writeString(object.type!);
          final displayOffset =
              object.display == null ? null : fbb.writeString(object.display!);
          fbb.startTable(7);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addOffset(2, referenceOffset);
          fbb.addOffset(3, typeOffset);
          fbb.addInt64(4, object.identifier.targetId);
          fbb.addOffset(5, displayOffset);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Reference(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              reference: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              type: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              identifier: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 12, 0)),
              display: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14))
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          object.identifier.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<Reference>.toMany(71, object.dbId!),
              store.box<Reference>());
          return object;
        }),
    RelatedArtifact: EntityDefinition<RelatedArtifact>(
        model: _entities[46],
        toOneRelations: (RelatedArtifact object) =>
            [object.id, object.document],
        toManyRelations: (RelatedArtifact object) => {
              RelInfo<RelatedArtifact>.toMany(72, object.dbId!):
                  object.extension_
            },
        getId: (RelatedArtifact object) => object.dbId,
        setId: (RelatedArtifact object, int id) {
          object.dbId = id;
        },
        objectToFB: (RelatedArtifact object, fb.Builder fbb) {
          final typeOffset = fbb.writeString(object.type);
          final labelOffset =
              object.label == null ? null : fbb.writeString(object.label!);
          final displayOffset =
              object.display == null ? null : fbb.writeString(object.display!);
          final citationOffset = object.citation == null
              ? null
              : fbb.writeString(object.citation!);
          final urlOffset =
              object.url == null ? null : fbb.writeString(object.url!);
          final resourceOffset = object.resource == null
              ? null
              : fbb.writeString(object.resource!);
          fbb.startTable(10);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addOffset(2, typeOffset);
          fbb.addOffset(3, labelOffset);
          fbb.addOffset(4, displayOffset);
          fbb.addOffset(5, citationOffset);
          fbb.addOffset(6, urlOffset);
          fbb.addInt64(7, object.document.targetId);
          fbb.addOffset(8, resourceOffset);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = RelatedArtifact(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              type: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              label: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              display: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              citation: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              url: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              document: ToOne(
                  targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)),
              resource: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 20))
            ..dbId = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          object.document.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<RelatedArtifact>.toMany(72, object.dbId!),
              store.box<RelatedArtifact>());
          return object;
        }),
    Resource: EntityDefinition<Resource>(
        model: _entities[47],
        toOneRelations: (Resource object) => [],
        toManyRelations: (Resource object) => {},
        getId: (Resource object) => object.dbId,
        setId: (Resource object, int id) {
          object.dbId = id;
        },
        objectToFB: (Resource object, fb.Builder fbb) {
          fbb.startTable(2);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Resource()
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    SampledData: EntityDefinition<SampledData>(
        model: _entities[48],
        toOneRelations: (SampledData object) => [object.id, object.origin],
        toManyRelations: (SampledData object) =>
            {RelInfo<SampledData>.toMany(73, object.dbId!): object.extension_},
        getId: (SampledData object) => object.dbId,
        setId: (SampledData object, int id) {
          object.dbId = id;
        },
        objectToFB: (SampledData object, fb.Builder fbb) {
          final dataOffset =
              object.data == null ? null : fbb.writeString(object.data!);
          fbb.startTable(10);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addInt64(2, object.origin.targetId);
          fbb.addFloat64(3, object.period);
          fbb.addFloat64(4, object.factor);
          fbb.addFloat64(5, object.lowerLimit);
          fbb.addFloat64(6, object.upperLimit);
          fbb.addInt64(7, object.dimensions);
          fbb.addOffset(8, dataOffset);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SampledData(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              origin: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 8, 0)),
              period:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0),
              factor: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 12),
              lowerLimit: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 14),
              upperLimit: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 16),
              dimensions:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
              data: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20))
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          object.origin.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<SampledData>.toMany(73, object.dbId!),
              store.box<SampledData>());
          return object;
        }),
    Signature: EntityDefinition<Signature>(
        model: _entities[49],
        toOneRelations: (Signature object) =>
            [object.id, object.who, object.onBehalfOf],
        toManyRelations: (Signature object) => {
              RelInfo<Signature>.toMany(74, object.dbId!): object.extension_,
              RelInfo<Signature>.toMany(75, object.dbId!): object.type
            },
        getId: (Signature object) => object.dbId,
        setId: (Signature object, int id) {
          object.dbId = id;
        },
        objectToFB: (Signature object, fb.Builder fbb) {
          final whenOffset = fbb.writeString(object.when);
          final targetFormatOffset = object.targetFormat == null
              ? null
              : fbb.writeString(object.targetFormat!);
          final sigFormatOffset = object.sigFormat == null
              ? null
              : fbb.writeString(object.sigFormat!);
          final dataOffset =
              object.data == null ? null : fbb.writeString(object.data!);
          fbb.startTable(9);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addOffset(2, whenOffset);
          fbb.addInt64(3, object.who.targetId);
          fbb.addInt64(4, object.onBehalfOf.targetId);
          fbb.addOffset(5, targetFormatOffset);
          fbb.addOffset(6, sigFormatOffset);
          fbb.addOffset(7, dataOffset);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Signature(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              type: ToMany(),
              when: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              who: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 10, 0)),
              onBehalfOf: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 12, 0)),
              targetFormat: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              sigFormat: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              data: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18))
            ..dbId = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          object.who.attach(store);
          object.onBehalfOf.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<Signature>.toMany(74, object.dbId!),
              store.box<Signature>());
          InternalToManyAccess.setRelInfo(
              object.type,
              store,
              RelInfo<Signature>.toMany(75, object.dbId!),
              store.box<Signature>());
          return object;
        }),
    Timing: EntityDefinition<Timing>(
        model: _entities[50],
        toOneRelations: (Timing object) =>
            [object.id, object.repeat, object.code],
        toManyRelations: (Timing object) => {
              RelInfo<Timing>.toMany(76, object.dbId!): object.extension_,
              RelInfo<Timing>.toMany(77, object.dbId!): object.modifierExtension
            },
        getId: (Timing object) => object.dbId,
        setId: (Timing object, int id) {
          object.dbId = id;
        },
        objectToFB: (Timing object, fb.Builder fbb) {
          final eventOffset = object.event == null
              ? null
              : fbb.writeList(
                  object.event!.map(fbb.writeString).toList(growable: false));
          fbb.startTable(6);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addOffset(2, eventOffset);
          fbb.addInt64(3, object.repeat.targetId);
          fbb.addInt64(4, object.code.targetId);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Timing(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              modifierExtension: ToMany(),
              event: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 8),
              repeat: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 10, 0)),
              code: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 12, 0)))
            ..dbId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          object.repeat.attach(store);
          object.code.attach(store);
          InternalToManyAccess.setRelInfo(object.extension_, store,
              RelInfo<Timing>.toMany(76, object.dbId!), store.box<Timing>());
          InternalToManyAccess.setRelInfo(object.modifierExtension, store,
              RelInfo<Timing>.toMany(77, object.dbId!), store.box<Timing>());
          return object;
        }),
    TimingRepeat: EntityDefinition<TimingRepeat>(
        model: _entities[51],
        toOneRelations: (TimingRepeat object) => [
              object.id,
              object.boundsDuration,
              object.boundsRange,
              object.boundsPeriod
            ],
        toManyRelations: (TimingRepeat object) =>
            {RelInfo<TimingRepeat>.toMany(78, object.dbId!): object.extension_},
        getId: (TimingRepeat object) => object.dbId,
        setId: (TimingRepeat object, int id) {
          object.dbId = id;
        },
        objectToFB: (TimingRepeat object, fb.Builder fbb) {
          final durationUnitOffset = object.durationUnit == null
              ? null
              : fbb.writeString(object.durationUnit!);
          final periodUnitOffset = object.periodUnit == null
              ? null
              : fbb.writeString(object.periodUnit!);
          final dayOfWeekOffset = object.dayOfWeek == null
              ? null
              : fbb.writeList(object.dayOfWeek!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final timeOfDayOffset = object.timeOfDay == null
              ? null
              : fbb.writeList(object.timeOfDay!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final whenOffset = object.when == null
              ? null
              : fbb.writeList(
                  object.when!.map(fbb.writeString).toList(growable: false));
          fbb.startTable(20);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addInt64(2, object.boundsDuration.targetId);
          fbb.addInt64(3, object.boundsRange.targetId);
          fbb.addInt64(4, object.boundsPeriod.targetId);
          fbb.addInt64(5, object.count);
          fbb.addInt64(6, object.countMax);
          fbb.addFloat64(7, object.duration);
          fbb.addFloat64(8, object.durationMax);
          fbb.addOffset(9, durationUnitOffset);
          fbb.addInt64(10, object.frequency);
          fbb.addInt64(11, object.frequencyMax);
          fbb.addFloat64(12, object.period);
          fbb.addFloat64(13, object.periodMax);
          fbb.addOffset(14, periodUnitOffset);
          fbb.addOffset(15, dayOfWeekOffset);
          fbb.addOffset(16, timeOfDayOffset);
          fbb.addOffset(17, whenOffset);
          fbb.addInt64(18, object.offset);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TimingRepeat(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              boundsDuration: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 8, 0)),
              boundsRange: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 10, 0)),
              boundsPeriod: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 12, 0)),
              count: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 14),
              countMax: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 16),
              duration: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 18),
              durationMax: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 20),
              durationUnit: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 22),
              frequency: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 24),
              frequencyMax: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 26),
              period: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 28),
              periodMax: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 30),
              periodUnit: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 32),
              dayOfWeek: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGetNullable(buffer, rootOffset, 34),
              timeOfDay: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGetNullable(buffer, rootOffset, 36),
              when: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGetNullable(buffer, rootOffset, 38),
              offset: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 40))
            ..dbId = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          object.boundsDuration.attach(store);
          object.boundsRange.attach(store);
          object.boundsPeriod.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<TimingRepeat>.toMany(78, object.dbId!),
              store.box<TimingRepeat>());
          return object;
        }),
    TriggerDefinition: EntityDefinition<TriggerDefinition>(
        model: _entities[52],
        toOneRelations: (TriggerDefinition object) => [
              object.id,
              object.timingTiming,
              object.timingReference,
              object.condition
            ],
        toManyRelations: (TriggerDefinition object) => {
              RelInfo<TriggerDefinition>.toMany(79, object.dbId!):
                  object.extension_,
              RelInfo<TriggerDefinition>.toMany(80, object.dbId!): object.data
            },
        getId: (TriggerDefinition object) => object.dbId,
        setId: (TriggerDefinition object, int id) {
          object.dbId = id;
        },
        objectToFB: (TriggerDefinition object, fb.Builder fbb) {
          final typeOffset = fbb.writeString(object.type);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final timingDateOffset = object.timingDate == null
              ? null
              : fbb.writeString(object.timingDate!);
          final timingDateTimeOffset = object.timingDateTime == null
              ? null
              : fbb.writeString(object.timingDateTime!);
          fbb.startTable(10);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addOffset(2, typeOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addInt64(4, object.timingTiming.targetId);
          fbb.addInt64(5, object.timingReference.targetId);
          fbb.addOffset(6, timingDateOffset);
          fbb.addOffset(7, timingDateTimeOffset);
          fbb.addInt64(8, object.condition.targetId);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TriggerDefinition(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              type: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              timingTiming: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 12, 0)),
              timingReference: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 14, 0)),
              timingDate:
                  const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 16),
              timingDateTime: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 18),
              data: ToMany(),
              condition: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0)))
            ..dbId = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          object.timingTiming.attach(store);
          object.timingReference.attach(store);
          object.condition.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<TriggerDefinition>.toMany(79, object.dbId!),
              store.box<TriggerDefinition>());
          InternalToManyAccess.setRelInfo(
              object.data,
              store,
              RelInfo<TriggerDefinition>.toMany(80, object.dbId!),
              store.box<TriggerDefinition>());
          return object;
        }),
    UsageContext: EntityDefinition<UsageContext>(
        model: _entities[53],
        toOneRelations: (UsageContext object) => [
              object.id,
              object.code,
              object.valueCodeableConcept,
              object.valueQuantity,
              object.valueRange,
              object.valueReference
            ],
        toManyRelations: (UsageContext object) =>
            {RelInfo<UsageContext>.toMany(81, object.dbId!): object.extension_},
        getId: (UsageContext object) => object.dbId,
        setId: (UsageContext object, int id) {
          object.dbId = id;
        },
        objectToFB: (UsageContext object, fb.Builder fbb) {
          fbb.startTable(8);
          fbb.addInt64(0, object.dbId ?? 0);
          fbb.addInt64(1, object.id.targetId);
          fbb.addInt64(2, object.code.targetId);
          fbb.addInt64(3, object.valueCodeableConcept.targetId);
          fbb.addInt64(4, object.valueQuantity.targetId);
          fbb.addInt64(5, object.valueRange.targetId);
          fbb.addInt64(6, object.valueReference.targetId);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UsageContext(
              id: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              extension_: ToMany(),
              code: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 8, 0)),
              valueCodeableConcept: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 10, 0)),
              valueQuantity: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 12, 0)),
              valueRange: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 14, 0)),
              valueReference: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 16, 0)))
            ..dbId = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.id.attach(store);
          object.code.attach(store);
          object.valueCodeableConcept.attach(store);
          object.valueQuantity.attach(store);
          object.valueRange.attach(store);
          object.valueReference.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extension_,
              store,
              RelInfo<UsageContext>.toMany(81, object.dbId!),
              store.box<UsageContext>());
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Address] entity fields to define ObjectBox queries.
class Address_ {
  /// see [Address.dbId]
  static final dbId = QueryIntegerProperty<Address>(_entities[0].properties[0]);

  /// see [Address.id]
  static final id =
      QueryRelationToOne<Address, String>(_entities[0].properties[1]);

  /// see [Address.use]
  static final use = QueryStringProperty<Address>(_entities[0].properties[2]);

  /// see [Address.type]
  static final type = QueryStringProperty<Address>(_entities[0].properties[3]);

  /// see [Address.text]
  static final text = QueryStringProperty<Address>(_entities[0].properties[4]);

  /// see [Address.line]
  static final line =
      QueryStringVectorProperty<Address>(_entities[0].properties[5]);

  /// see [Address.city]
  static final city = QueryStringProperty<Address>(_entities[0].properties[6]);

  /// see [Address.district]
  static final district =
      QueryStringProperty<Address>(_entities[0].properties[7]);

  /// see [Address.state]
  static final state = QueryStringProperty<Address>(_entities[0].properties[8]);

  /// see [Address.postalCode]
  static final postalCode =
      QueryStringProperty<Address>(_entities[0].properties[9]);

  /// see [Address.country]
  static final country =
      QueryStringProperty<Address>(_entities[0].properties[10]);

  /// see [Address.period]
  static final period =
      QueryRelationToOne<Address, Period>(_entities[0].properties[11]);

  /// see [Address.extension_]
  static final extension_ =
      QueryRelationToMany<Address, FhirExtension>(_entities[0].relations[0]);
}

/// [Age] entity fields to define ObjectBox queries.
class Age_ {
  /// see [Age.dbId]
  static final dbId = QueryIntegerProperty<Age>(_entities[1].properties[0]);

  /// see [Age.id]
  static final id = QueryRelationToOne<Age, String>(_entities[1].properties[1]);

  /// see [Age.value]
  static final value = QueryDoubleProperty<Age>(_entities[1].properties[2]);

  /// see [Age.comparator]
  static final comparator =
      QueryStringProperty<Age>(_entities[1].properties[3]);

  /// see [Age.unit]
  static final unit = QueryStringProperty<Age>(_entities[1].properties[4]);

  /// see [Age.system]
  static final system = QueryStringProperty<Age>(_entities[1].properties[5]);

  /// see [Age.code]
  static final code = QueryStringProperty<Age>(_entities[1].properties[6]);

  /// see [Age.extension_]
  static final extension_ =
      QueryRelationToMany<Age, FhirExtension>(_entities[1].relations[0]);
}

/// [Annotation] entity fields to define ObjectBox queries.
class Annotation_ {
  /// see [Annotation.dbId]
  static final dbId =
      QueryIntegerProperty<Annotation>(_entities[2].properties[0]);

  /// see [Annotation.id]
  static final id =
      QueryRelationToOne<Annotation, String>(_entities[2].properties[1]);

  /// see [Annotation.authorReference]
  static final authorReference =
      QueryRelationToOne<Annotation, Reference>(_entities[2].properties[2]);

  /// see [Annotation.authorString]
  static final authorString =
      QueryStringProperty<Annotation>(_entities[2].properties[3]);

  /// see [Annotation.time]
  static final time =
      QueryStringProperty<Annotation>(_entities[2].properties[4]);

  /// see [Annotation.text]
  static final text =
      QueryStringProperty<Annotation>(_entities[2].properties[5]);

  /// see [Annotation.extension_]
  static final extension_ =
      QueryRelationToMany<Annotation, FhirExtension>(_entities[2].relations[0]);
}

/// [Attachment] entity fields to define ObjectBox queries.
class Attachment_ {
  /// see [Attachment.dbId]
  static final dbId =
      QueryIntegerProperty<Attachment>(_entities[3].properties[0]);

  /// see [Attachment.id]
  static final id =
      QueryRelationToOne<Attachment, String>(_entities[3].properties[1]);

  /// see [Attachment.contentType]
  static final contentType =
      QueryStringProperty<Attachment>(_entities[3].properties[2]);

  /// see [Attachment.language]
  static final language =
      QueryStringProperty<Attachment>(_entities[3].properties[3]);

  /// see [Attachment.data]
  static final data =
      QueryStringProperty<Attachment>(_entities[3].properties[4]);

  /// see [Attachment.url]
  static final url =
      QueryStringProperty<Attachment>(_entities[3].properties[5]);

  /// see [Attachment.size]
  static final size =
      QueryIntegerProperty<Attachment>(_entities[3].properties[6]);

  /// see [Attachment.hash]
  static final hash =
      QueryStringProperty<Attachment>(_entities[3].properties[7]);

  /// see [Attachment.title]
  static final title =
      QueryStringProperty<Attachment>(_entities[3].properties[8]);

  /// see [Attachment.creation]
  static final creation =
      QueryStringProperty<Attachment>(_entities[3].properties[9]);

  /// see [Attachment.extension_]
  static final extension_ =
      QueryRelationToMany<Attachment, FhirExtension>(_entities[3].relations[0]);
}

/// [CodeableConcept] entity fields to define ObjectBox queries.
class CodeableConcept_ {
  /// see [CodeableConcept.dbId]
  static final dbId =
      QueryIntegerProperty<CodeableConcept>(_entities[4].properties[0]);

  /// see [CodeableConcept.id]
  static final id =
      QueryRelationToOne<CodeableConcept, String>(_entities[4].properties[1]);

  /// see [CodeableConcept.text]
  static final text =
      QueryStringProperty<CodeableConcept>(_entities[4].properties[2]);

  /// see [CodeableConcept.extension_]
  static final extension_ = QueryRelationToMany<CodeableConcept, FhirExtension>(
      _entities[4].relations[0]);

  /// see [CodeableConcept.coding]
  static final coding =
      QueryRelationToMany<CodeableConcept, Coding>(_entities[4].relations[1]);
}

/// [CodeableReference] entity fields to define ObjectBox queries.
class CodeableReference_ {
  /// see [CodeableReference.dbId]
  static final dbId =
      QueryIntegerProperty<CodeableReference>(_entities[5].properties[0]);

  /// see [CodeableReference.id]
  static final id =
      QueryRelationToOne<CodeableReference, String>(_entities[5].properties[1]);

  /// see [CodeableReference.concept]
  static final concept = QueryRelationToOne<CodeableReference, CodeableConcept>(
      _entities[5].properties[2]);

  /// see [CodeableReference.reference]
  static final reference = QueryRelationToOne<CodeableReference, Reference>(
      _entities[5].properties[3]);

  /// see [CodeableReference.extension_]
  static final extension_ =
      QueryRelationToMany<CodeableReference, FhirExtension>(
          _entities[5].relations[0]);
}

/// [Coding] entity fields to define ObjectBox queries.
class Coding_ {
  /// see [Coding.dbId]
  static final dbId = QueryIntegerProperty<Coding>(_entities[6].properties[0]);

  /// see [Coding.id]
  static final id =
      QueryRelationToOne<Coding, String>(_entities[6].properties[1]);

  /// see [Coding.system]
  static final system = QueryStringProperty<Coding>(_entities[6].properties[2]);

  /// see [Coding.version]
  static final version =
      QueryStringProperty<Coding>(_entities[6].properties[3]);

  /// see [Coding.code]
  static final code = QueryStringProperty<Coding>(_entities[6].properties[4]);

  /// see [Coding.display]
  static final display =
      QueryStringProperty<Coding>(_entities[6].properties[5]);

  /// see [Coding.userSelected]
  static final userSelected =
      QueryBooleanProperty<Coding>(_entities[6].properties[6]);

  /// see [Coding.extension_]
  static final extension_ =
      QueryRelationToMany<Coding, FhirExtension>(_entities[6].relations[0]);
}

/// [ContactDetail] entity fields to define ObjectBox queries.
class ContactDetail_ {
  /// see [ContactDetail.dbId]
  static final dbId =
      QueryIntegerProperty<ContactDetail>(_entities[7].properties[0]);

  /// see [ContactDetail.id]
  static final id =
      QueryRelationToOne<ContactDetail, String>(_entities[7].properties[1]);

  /// see [ContactDetail.name]
  static final name =
      QueryStringProperty<ContactDetail>(_entities[7].properties[2]);

  /// see [ContactDetail.extension_]
  static final extension_ = QueryRelationToMany<ContactDetail, FhirExtension>(
      _entities[7].relations[0]);

  /// see [ContactDetail.telecom]
  static final telecom = QueryRelationToMany<ContactDetail, ContactPoint>(
      _entities[7].relations[1]);
}

/// [ContactPoint] entity fields to define ObjectBox queries.
class ContactPoint_ {
  /// see [ContactPoint.dbId]
  static final dbId =
      QueryIntegerProperty<ContactPoint>(_entities[8].properties[0]);

  /// see [ContactPoint.id]
  static final id =
      QueryRelationToOne<ContactPoint, String>(_entities[8].properties[1]);

  /// see [ContactPoint.system]
  static final system =
      QueryStringProperty<ContactPoint>(_entities[8].properties[2]);

  /// see [ContactPoint.value]
  static final value =
      QueryStringProperty<ContactPoint>(_entities[8].properties[3]);

  /// see [ContactPoint.use]
  static final use =
      QueryStringProperty<ContactPoint>(_entities[8].properties[4]);

  /// see [ContactPoint.rank]
  static final rank =
      QueryIntegerProperty<ContactPoint>(_entities[8].properties[5]);

  /// see [ContactPoint.period]
  static final period =
      QueryRelationToOne<ContactPoint, Period>(_entities[8].properties[6]);

  /// see [ContactPoint.extension_]
  static final extension_ = QueryRelationToMany<ContactPoint, FhirExtension>(
      _entities[8].relations[0]);
}

/// [Contributor] entity fields to define ObjectBox queries.
class Contributor_ {
  /// see [Contributor.dbId]
  static final dbId =
      QueryIntegerProperty<Contributor>(_entities[9].properties[0]);

  /// see [Contributor.id]
  static final id =
      QueryRelationToOne<Contributor, String>(_entities[9].properties[1]);

  /// see [Contributor.type]
  static final type =
      QueryStringProperty<Contributor>(_entities[9].properties[2]);

  /// see [Contributor.name]
  static final name =
      QueryStringProperty<Contributor>(_entities[9].properties[3]);

  /// see [Contributor.extension_]
  static final extension_ = QueryRelationToMany<Contributor, FhirExtension>(
      _entities[9].relations[0]);

  /// see [Contributor.contact]
  static final contact = QueryRelationToMany<Contributor, ContactDetail>(
      _entities[9].relations[1]);
}

/// [Count] entity fields to define ObjectBox queries.
class Count_ {
  /// see [Count.dbId]
  static final dbId = QueryIntegerProperty<Count>(_entities[10].properties[0]);

  /// see [Count.id]
  static final id =
      QueryRelationToOne<Count, String>(_entities[10].properties[1]);

  /// see [Count.value]
  static final value = QueryDoubleProperty<Count>(_entities[10].properties[2]);

  /// see [Count.comparator]
  static final comparator =
      QueryStringProperty<Count>(_entities[10].properties[3]);

  /// see [Count.unit]
  static final unit = QueryStringProperty<Count>(_entities[10].properties[4]);

  /// see [Count.system]
  static final system = QueryStringProperty<Count>(_entities[10].properties[5]);

  /// see [Count.code]
  static final code = QueryStringProperty<Count>(_entities[10].properties[6]);

  /// see [Count.extension_]
  static final extension_ =
      QueryRelationToMany<Count, FhirExtension>(_entities[10].relations[0]);
}

/// [DataRequirement] entity fields to define ObjectBox queries.
class DataRequirement_ {
  /// see [DataRequirement.dbId]
  static final dbId =
      QueryIntegerProperty<DataRequirement>(_entities[11].properties[0]);

  /// see [DataRequirement.id]
  static final id =
      QueryRelationToOne<DataRequirement, String>(_entities[11].properties[1]);

  /// see [DataRequirement.type]
  static final type =
      QueryStringProperty<DataRequirement>(_entities[11].properties[2]);

  /// see [DataRequirement.profile]
  static final profile =
      QueryStringVectorProperty<DataRequirement>(_entities[11].properties[3]);

  /// see [DataRequirement.subjectCodeableConcept]
  static final subjectCodeableConcept =
      QueryRelationToOne<DataRequirement, CodeableConcept>(
          _entities[11].properties[4]);

  /// see [DataRequirement.subjectReference]
  static final subjectReference =
      QueryRelationToOne<DataRequirement, Reference>(
          _entities[11].properties[5]);

  /// see [DataRequirement.mustSupport]
  static final mustSupport =
      QueryStringVectorProperty<DataRequirement>(_entities[11].properties[6]);

  /// see [DataRequirement.limit]
  static final limit =
      QueryIntegerProperty<DataRequirement>(_entities[11].properties[7]);

  /// see [DataRequirement.extension_]
  static final extension_ = QueryRelationToMany<DataRequirement, FhirExtension>(
      _entities[11].relations[0]);

  /// see [DataRequirement.codeFilter]
  static final codeFilter =
      QueryRelationToMany<DataRequirement, DataRequirementCodeFilter>(
          _entities[11].relations[1]);

  /// see [DataRequirement.dateFilter]
  static final dateFilter =
      QueryRelationToMany<DataRequirement, DataRequirementDateFilter>(
          _entities[11].relations[2]);

  /// see [DataRequirement.sort]
  static final sort = QueryRelationToMany<DataRequirement, DataRequirementSort>(
      _entities[11].relations[3]);
}

/// [DataRequirementCodeFilter] entity fields to define ObjectBox queries.
class DataRequirementCodeFilter_ {
  /// see [DataRequirementCodeFilter.dbId]
  static final dbId = QueryIntegerProperty<DataRequirementCodeFilter>(
      _entities[12].properties[0]);

  /// see [DataRequirementCodeFilter.id]
  static final id = QueryRelationToOne<DataRequirementCodeFilter, String>(
      _entities[12].properties[1]);

  /// see [DataRequirementCodeFilter.path]
  static final path = QueryStringProperty<DataRequirementCodeFilter>(
      _entities[12].properties[2]);

  /// see [DataRequirementCodeFilter.searchParam]
  static final searchParam = QueryStringProperty<DataRequirementCodeFilter>(
      _entities[12].properties[3]);

  /// see [DataRequirementCodeFilter.valueSet]
  static final valueSet = QueryStringProperty<DataRequirementCodeFilter>(
      _entities[12].properties[4]);

  /// see [DataRequirementCodeFilter.extension_]
  static final extension_ =
      QueryRelationToMany<DataRequirementCodeFilter, FhirExtension>(
          _entities[12].relations[0]);

  /// see [DataRequirementCodeFilter.code]
  static final code = QueryRelationToMany<DataRequirementCodeFilter, Coding>(
      _entities[12].relations[1]);
}

/// [DataRequirementDateFilter] entity fields to define ObjectBox queries.
class DataRequirementDateFilter_ {
  /// see [DataRequirementDateFilter.dbId]
  static final dbId = QueryIntegerProperty<DataRequirementDateFilter>(
      _entities[13].properties[0]);

  /// see [DataRequirementDateFilter.id]
  static final id = QueryRelationToOne<DataRequirementDateFilter, String>(
      _entities[13].properties[1]);

  /// see [DataRequirementDateFilter.path]
  static final path = QueryStringProperty<DataRequirementDateFilter>(
      _entities[13].properties[2]);

  /// see [DataRequirementDateFilter.searchParam]
  static final searchParam = QueryStringProperty<DataRequirementDateFilter>(
      _entities[13].properties[3]);

  /// see [DataRequirementDateFilter.valueDateTime]
  static final valueDateTime = QueryStringProperty<DataRequirementDateFilter>(
      _entities[13].properties[4]);

  /// see [DataRequirementDateFilter.valuePeriod]
  static final valuePeriod =
      QueryRelationToOne<DataRequirementDateFilter, Period>(
          _entities[13].properties[5]);

  /// see [DataRequirementDateFilter.valueDuration]
  static final valueDuration =
      QueryRelationToOne<DataRequirementDateFilter, FhirDuration>(
          _entities[13].properties[6]);

  /// see [DataRequirementDateFilter.extension_]
  static final extension_ =
      QueryRelationToMany<DataRequirementDateFilter, FhirExtension>(
          _entities[13].relations[0]);
}

/// [DataRequirementSort] entity fields to define ObjectBox queries.
class DataRequirementSort_ {
  /// see [DataRequirementSort.dbId]
  static final dbId =
      QueryIntegerProperty<DataRequirementSort>(_entities[14].properties[0]);

  /// see [DataRequirementSort.id]
  static final id = QueryRelationToOne<DataRequirementSort, String>(
      _entities[14].properties[1]);

  /// see [DataRequirementSort.path]
  static final path =
      QueryStringProperty<DataRequirementSort>(_entities[14].properties[2]);

  /// see [DataRequirementSort.direction]
  static final direction =
      QueryStringProperty<DataRequirementSort>(_entities[14].properties[3]);

  /// see [DataRequirementSort.extension_]
  static final extension_ =
      QueryRelationToMany<DataRequirementSort, FhirExtension>(
          _entities[14].relations[0]);
}

/// [Distance] entity fields to define ObjectBox queries.
class Distance_ {
  /// see [Distance.dbId]
  static final dbId =
      QueryIntegerProperty<Distance>(_entities[15].properties[0]);

  /// see [Distance.id]
  static final id =
      QueryRelationToOne<Distance, String>(_entities[15].properties[1]);

  /// see [Distance.value]
  static final value =
      QueryDoubleProperty<Distance>(_entities[15].properties[2]);

  /// see [Distance.comparator]
  static final comparator =
      QueryStringProperty<Distance>(_entities[15].properties[3]);

  /// see [Distance.unit]
  static final unit =
      QueryStringProperty<Distance>(_entities[15].properties[4]);

  /// see [Distance.system]
  static final system =
      QueryStringProperty<Distance>(_entities[15].properties[5]);

  /// see [Distance.code]
  static final code =
      QueryStringProperty<Distance>(_entities[15].properties[6]);

  /// see [Distance.extension_]
  static final extension_ =
      QueryRelationToMany<Distance, FhirExtension>(_entities[15].relations[0]);
}

/// [Dosage] entity fields to define ObjectBox queries.
class Dosage_ {
  /// see [Dosage.dbId]
  static final dbId = QueryIntegerProperty<Dosage>(_entities[16].properties[0]);

  /// see [Dosage.id]
  static final id =
      QueryRelationToOne<Dosage, String>(_entities[16].properties[1]);

  /// see [Dosage.sequence]
  static final sequence =
      QueryIntegerProperty<Dosage>(_entities[16].properties[2]);

  /// see [Dosage.text]
  static final text = QueryStringProperty<Dosage>(_entities[16].properties[3]);

  /// see [Dosage.patientInstruction]
  static final patientInstruction =
      QueryStringProperty<Dosage>(_entities[16].properties[4]);

  /// see [Dosage.timing]
  static final timing =
      QueryRelationToOne<Dosage, Timing>(_entities[16].properties[5]);

  /// see [Dosage.asNeededBoolean]
  static final asNeededBoolean =
      QueryBooleanProperty<Dosage>(_entities[16].properties[6]);

  /// see [Dosage.asNeededCodeableConcept]
  static final asNeededCodeableConcept =
      QueryRelationToOne<Dosage, CodeableConcept>(_entities[16].properties[7]);

  /// see [Dosage.site]
  static final site =
      QueryRelationToOne<Dosage, CodeableConcept>(_entities[16].properties[8]);

  /// see [Dosage.route]
  static final route =
      QueryRelationToOne<Dosage, CodeableConcept>(_entities[16].properties[9]);

  /// see [Dosage.method]
  static final method =
      QueryRelationToOne<Dosage, CodeableConcept>(_entities[16].properties[10]);

  /// see [Dosage.maxDosePerPeriod]
  static final maxDosePerPeriod =
      QueryRelationToOne<Dosage, Ratio>(_entities[16].properties[11]);

  /// see [Dosage.maxDosePerAdministration]
  static final maxDosePerAdministration =
      QueryRelationToOne<Dosage, Quantity>(_entities[16].properties[12]);

  /// see [Dosage.maxDosePerLifetime]
  static final maxDosePerLifetime =
      QueryRelationToOne<Dosage, Quantity>(_entities[16].properties[13]);

  /// see [Dosage.extension_]
  static final extension_ =
      QueryRelationToMany<Dosage, FhirExtension>(_entities[16].relations[0]);

  /// see [Dosage.modifierExtension]
  static final modifierExtension =
      QueryRelationToMany<Dosage, FhirExtension>(_entities[16].relations[1]);

  /// see [Dosage.additionalInstruction]
  static final additionalInstruction =
      QueryRelationToMany<Dosage, CodeableConcept>(_entities[16].relations[2]);

  /// see [Dosage.doseAndRate]
  static final doseAndRate = QueryRelationToMany<Dosage, DosageDoseAndRate>(
      _entities[16].relations[3]);
}

/// [DosageDoseAndRate] entity fields to define ObjectBox queries.
class DosageDoseAndRate_ {
  /// see [DosageDoseAndRate.dbId]
  static final dbId =
      QueryIntegerProperty<DosageDoseAndRate>(_entities[17].properties[0]);

  /// see [DosageDoseAndRate.id]
  static final id = QueryRelationToOne<DosageDoseAndRate, String>(
      _entities[17].properties[1]);

  /// see [DosageDoseAndRate.type]
  static final type = QueryRelationToOne<DosageDoseAndRate, CodeableConcept>(
      _entities[17].properties[2]);

  /// see [DosageDoseAndRate.doseRange]
  static final doseRange =
      QueryRelationToOne<DosageDoseAndRate, Range>(_entities[17].properties[3]);

  /// see [DosageDoseAndRate.doseQuantity]
  static final doseQuantity = QueryRelationToOne<DosageDoseAndRate, Quantity>(
      _entities[17].properties[4]);

  /// see [DosageDoseAndRate.rateRatio]
  static final rateRatio =
      QueryRelationToOne<DosageDoseAndRate, Ratio>(_entities[17].properties[5]);

  /// see [DosageDoseAndRate.rateRange]
  static final rateRange =
      QueryRelationToOne<DosageDoseAndRate, Range>(_entities[17].properties[6]);

  /// see [DosageDoseAndRate.rateQuantity]
  static final rateQuantity = QueryRelationToOne<DosageDoseAndRate, Quantity>(
      _entities[17].properties[7]);

  /// see [DosageDoseAndRate.extension_]
  static final extension_ =
      QueryRelationToMany<DosageDoseAndRate, FhirExtension>(
          _entities[17].relations[0]);
}

/// [ElementDefinition] entity fields to define ObjectBox queries.
class ElementDefinition_ {
  /// see [ElementDefinition.dbId]
  static final dbId =
      QueryIntegerProperty<ElementDefinition>(_entities[18].properties[0]);

  /// see [ElementDefinition.id]
  static final id = QueryRelationToOne<ElementDefinition, String>(
      _entities[18].properties[1]);

  /// see [ElementDefinition.path]
  static final path =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[2]);

  /// see [ElementDefinition.representation]
  static final representation =
      QueryStringVectorProperty<ElementDefinition>(_entities[18].properties[3]);

  /// see [ElementDefinition.sliceName]
  static final sliceName =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[4]);

  /// see [ElementDefinition.sliceIsConstraining]
  static final sliceIsConstraining =
      QueryBooleanProperty<ElementDefinition>(_entities[18].properties[5]);

  /// see [ElementDefinition.label]
  static final label =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[6]);

  /// see [ElementDefinition.slicing]
  static final slicing =
      QueryRelationToOne<ElementDefinition, ElementDefinitionSlicing>(
          _entities[18].properties[7]);

  /// see [ElementDefinition.short]
  static final short =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[8]);

  /// see [ElementDefinition.definition]
  static final definition =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[9]);

  /// see [ElementDefinition.comment]
  static final comment =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[10]);

  /// see [ElementDefinition.requirements]
  static final requirements =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[11]);

  /// see [ElementDefinition.alias]
  static final alias = QueryStringVectorProperty<ElementDefinition>(
      _entities[18].properties[12]);

  /// see [ElementDefinition.min]
  static final min =
      QueryIntegerProperty<ElementDefinition>(_entities[18].properties[13]);

  /// see [ElementDefinition.max]
  static final max =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[14]);

  /// see [ElementDefinition.base]
  static final base =
      QueryRelationToOne<ElementDefinition, ElementDefinitionBase>(
          _entities[18].properties[15]);

  /// see [ElementDefinition.contentReference]
  static final contentReference =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[16]);

  /// see [ElementDefinition.defaultValueBase64Binary]
  static final defaultValueBase64Binary =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[17]);

  /// see [ElementDefinition.defaultValueBoolean]
  static final defaultValueBoolean =
      QueryBooleanProperty<ElementDefinition>(_entities[18].properties[18]);

  /// see [ElementDefinition.defaultValueCanonical]
  static final defaultValueCanonical =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[19]);

  /// see [ElementDefinition.defaultValueCode]
  static final defaultValueCode =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[20]);

  /// see [ElementDefinition.defaultValueDate]
  static final defaultValueDate =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[21]);

  /// see [ElementDefinition.defaultValueDateTime]
  static final defaultValueDateTime =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[22]);

  /// see [ElementDefinition.defaultValueDecimal]
  static final defaultValueDecimal =
      QueryDoubleProperty<ElementDefinition>(_entities[18].properties[23]);

  /// see [ElementDefinition.defaultValueId]
  static final defaultValueId =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[24]);

  /// see [ElementDefinition.defaultValueInstant]
  static final defaultValueInstant =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[25]);

  /// see [ElementDefinition.defaultValueInteger]
  static final defaultValueInteger =
      QueryIntegerProperty<ElementDefinition>(_entities[18].properties[26]);

  /// see [ElementDefinition.defaultValueMarkdown]
  static final defaultValueMarkdown =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[27]);

  /// see [ElementDefinition.defaultValueOid]
  static final defaultValueOid =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[28]);

  /// see [ElementDefinition.defaultValuePositiveInt]
  static final defaultValuePositiveInt =
      QueryIntegerProperty<ElementDefinition>(_entities[18].properties[29]);

  /// see [ElementDefinition.defaultValueString]
  static final defaultValueString =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[30]);

  /// see [ElementDefinition.defaultValueTime]
  static final defaultValueTime =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[31]);

  /// see [ElementDefinition.defaultValueUnsignedInt]
  static final defaultValueUnsignedInt =
      QueryIntegerProperty<ElementDefinition>(_entities[18].properties[32]);

  /// see [ElementDefinition.defaultValueUri]
  static final defaultValueUri =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[33]);

  /// see [ElementDefinition.defaultValueUrl]
  static final defaultValueUrl =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[34]);

  /// see [ElementDefinition.defaultValueUuid]
  static final defaultValueUuid =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[35]);

  /// see [ElementDefinition.defaultValueAddress]
  static final defaultValueAddress =
      QueryRelationToOne<ElementDefinition, Address>(
          _entities[18].properties[36]);

  /// see [ElementDefinition.defaultValueAge]
  static final defaultValueAge =
      QueryRelationToOne<ElementDefinition, Age>(_entities[18].properties[37]);

  /// see [ElementDefinition.defaultValueAnnotation]
  static final defaultValueAnnotation =
      QueryRelationToOne<ElementDefinition, Annotation>(
          _entities[18].properties[38]);

  /// see [ElementDefinition.defaultValueAttachment]
  static final defaultValueAttachment =
      QueryRelationToOne<ElementDefinition, Attachment>(
          _entities[18].properties[39]);

  /// see [ElementDefinition.defaultValueCodeableConcept]
  static final defaultValueCodeableConcept =
      QueryRelationToOne<ElementDefinition, CodeableConcept>(
          _entities[18].properties[40]);

  /// see [ElementDefinition.defaultValueCodeableReference]
  static final defaultValueCodeableReference =
      QueryRelationToOne<ElementDefinition, CodeableReference>(
          _entities[18].properties[41]);

  /// see [ElementDefinition.defaultValueCoding]
  static final defaultValueCoding =
      QueryRelationToOne<ElementDefinition, Coding>(
          _entities[18].properties[42]);

  /// see [ElementDefinition.defaultValueContactPoint]
  static final defaultValueContactPoint =
      QueryRelationToOne<ElementDefinition, ContactPoint>(
          _entities[18].properties[43]);

  /// see [ElementDefinition.defaultValueCount]
  static final defaultValueCount = QueryRelationToOne<ElementDefinition, Count>(
      _entities[18].properties[44]);

  /// see [ElementDefinition.defaultValueDistance]
  static final defaultValueDistance =
      QueryRelationToOne<ElementDefinition, Distance>(
          _entities[18].properties[45]);

  /// see [ElementDefinition.defaultValueDuration]
  static final defaultValueDuration =
      QueryRelationToOne<ElementDefinition, FhirDuration>(
          _entities[18].properties[46]);

  /// see [ElementDefinition.defaultValueHumanName]
  static final defaultValueHumanName =
      QueryRelationToOne<ElementDefinition, HumanName>(
          _entities[18].properties[47]);

  /// see [ElementDefinition.defaultValueIdentifier]
  static final defaultValueIdentifier =
      QueryRelationToOne<ElementDefinition, Identifier>(
          _entities[18].properties[48]);

  /// see [ElementDefinition.defaultValueMoney]
  static final defaultValueMoney = QueryRelationToOne<ElementDefinition, Money>(
      _entities[18].properties[49]);

  /// see [ElementDefinition.defaultValuePeriod]
  static final defaultValuePeriod =
      QueryRelationToOne<ElementDefinition, Period>(
          _entities[18].properties[50]);

  /// see [ElementDefinition.defaultValueQuantity]
  static final defaultValueQuantity =
      QueryRelationToOne<ElementDefinition, Quantity>(
          _entities[18].properties[51]);

  /// see [ElementDefinition.defaultValueRange]
  static final defaultValueRange = QueryRelationToOne<ElementDefinition, Range>(
      _entities[18].properties[52]);

  /// see [ElementDefinition.defaultValueRatio]
  static final defaultValueRatio = QueryRelationToOne<ElementDefinition, Ratio>(
      _entities[18].properties[53]);

  /// see [ElementDefinition.defaultValueRatioRange]
  static final defaultValueRatioRange =
      QueryRelationToOne<ElementDefinition, RatioRange>(
          _entities[18].properties[54]);

  /// see [ElementDefinition.defaultValueReference]
  static final defaultValueReference =
      QueryRelationToOne<ElementDefinition, Reference>(
          _entities[18].properties[55]);

  /// see [ElementDefinition.defaultValueSampledData]
  static final defaultValueSampledData =
      QueryRelationToOne<ElementDefinition, SampledData>(
          _entities[18].properties[56]);

  /// see [ElementDefinition.defaultValueSignature]
  static final defaultValueSignature =
      QueryRelationToOne<ElementDefinition, Signature>(
          _entities[18].properties[57]);

  /// see [ElementDefinition.defaultValueTiming]
  static final defaultValueTiming =
      QueryRelationToOne<ElementDefinition, Timing>(
          _entities[18].properties[58]);

  /// see [ElementDefinition.defaultValueContactDetail]
  static final defaultValueContactDetail =
      QueryRelationToOne<ElementDefinition, ContactDetail>(
          _entities[18].properties[59]);

  /// see [ElementDefinition.defaultValueContributor]
  static final defaultValueContributor =
      QueryRelationToOne<ElementDefinition, Contributor>(
          _entities[18].properties[60]);

  /// see [ElementDefinition.defaultValueDataRequirement]
  static final defaultValueDataRequirement =
      QueryRelationToOne<ElementDefinition, DataRequirement>(
          _entities[18].properties[61]);

  /// see [ElementDefinition.defaultValueExpression]
  static final defaultValueExpression =
      QueryRelationToOne<ElementDefinition, FhirExpression>(
          _entities[18].properties[62]);

  /// see [ElementDefinition.defaultValueParameterDefinition]
  static final defaultValueParameterDefinition =
      QueryRelationToOne<ElementDefinition, ParameterDefinition>(
          _entities[18].properties[63]);

  /// see [ElementDefinition.defaultValueRelatedArtifact]
  static final defaultValueRelatedArtifact =
      QueryRelationToOne<ElementDefinition, RelatedArtifact>(
          _entities[18].properties[64]);

  /// see [ElementDefinition.defaultValueTriggerDefinition]
  static final defaultValueTriggerDefinition =
      QueryRelationToOne<ElementDefinition, TriggerDefinition>(
          _entities[18].properties[65]);

  /// see [ElementDefinition.defaultValueUsageContext]
  static final defaultValueUsageContext =
      QueryRelationToOne<ElementDefinition, UsageContext>(
          _entities[18].properties[66]);

  /// see [ElementDefinition.defaultValueDosage]
  static final defaultValueDosage =
      QueryRelationToOne<ElementDefinition, Dosage>(
          _entities[18].properties[67]);

  /// see [ElementDefinition.meaningWhenMissing]
  static final meaningWhenMissing =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[68]);

  /// see [ElementDefinition.orderMeaning]
  static final orderMeaning =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[69]);

  /// see [ElementDefinition.fixedBase64Binary]
  static final fixedBase64Binary =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[70]);

  /// see [ElementDefinition.fixedBoolean]
  static final fixedBoolean =
      QueryBooleanProperty<ElementDefinition>(_entities[18].properties[71]);

  /// see [ElementDefinition.fixedCanonical]
  static final fixedCanonical =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[72]);

  /// see [ElementDefinition.fixedCode]
  static final fixedCode =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[73]);

  /// see [ElementDefinition.fixedDate]
  static final fixedDate =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[74]);

  /// see [ElementDefinition.fixedDateTime]
  static final fixedDateTime =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[75]);

  /// see [ElementDefinition.fixedDecimal]
  static final fixedDecimal =
      QueryDoubleProperty<ElementDefinition>(_entities[18].properties[76]);

  /// see [ElementDefinition.fixedId]
  static final fixedId =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[77]);

  /// see [ElementDefinition.fixedInstant]
  static final fixedInstant =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[78]);

  /// see [ElementDefinition.fixedInteger]
  static final fixedInteger =
      QueryIntegerProperty<ElementDefinition>(_entities[18].properties[79]);

  /// see [ElementDefinition.fixedMarkdown]
  static final fixedMarkdown =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[80]);

  /// see [ElementDefinition.fixedOid]
  static final fixedOid =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[81]);

  /// see [ElementDefinition.fixedPositiveInt]
  static final fixedPositiveInt =
      QueryIntegerProperty<ElementDefinition>(_entities[18].properties[82]);

  /// see [ElementDefinition.fixedString]
  static final fixedString =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[83]);

  /// see [ElementDefinition.fixedTime]
  static final fixedTime =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[84]);

  /// see [ElementDefinition.fixedUnsignedInt]
  static final fixedUnsignedInt =
      QueryIntegerProperty<ElementDefinition>(_entities[18].properties[85]);

  /// see [ElementDefinition.fixedUri]
  static final fixedUri =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[86]);

  /// see [ElementDefinition.fixedUrl]
  static final fixedUrl =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[87]);

  /// see [ElementDefinition.fixedUuid]
  static final fixedUuid =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[88]);

  /// see [ElementDefinition.fixedAddress]
  static final fixedAddress = QueryRelationToOne<ElementDefinition, Address>(
      _entities[18].properties[89]);

  /// see [ElementDefinition.fixedAge]
  static final fixedAge =
      QueryRelationToOne<ElementDefinition, Age>(_entities[18].properties[90]);

  /// see [ElementDefinition.fixedAnnotation]
  static final fixedAnnotation =
      QueryRelationToOne<ElementDefinition, Annotation>(
          _entities[18].properties[91]);

  /// see [ElementDefinition.fixedAttachment]
  static final fixedAttachment =
      QueryRelationToOne<ElementDefinition, Attachment>(
          _entities[18].properties[92]);

  /// see [ElementDefinition.fixedCodeableConcept]
  static final fixedCodeableConcept =
      QueryRelationToOne<ElementDefinition, CodeableConcept>(
          _entities[18].properties[93]);

  /// see [ElementDefinition.fixedCodeableReference]
  static final fixedCodeableReference =
      QueryRelationToOne<ElementDefinition, CodeableReference>(
          _entities[18].properties[94]);

  /// see [ElementDefinition.fixedCoding]
  static final fixedCoding = QueryRelationToOne<ElementDefinition, Coding>(
      _entities[18].properties[95]);

  /// see [ElementDefinition.fixedContactPoint]
  static final fixedContactPoint =
      QueryRelationToOne<ElementDefinition, ContactPoint>(
          _entities[18].properties[96]);

  /// see [ElementDefinition.fixedCount]
  static final fixedCount = QueryRelationToOne<ElementDefinition, Count>(
      _entities[18].properties[97]);

  /// see [ElementDefinition.fixedDistance]
  static final fixedDistance = QueryRelationToOne<ElementDefinition, Distance>(
      _entities[18].properties[98]);

  /// see [ElementDefinition.fixedDuration]
  static final fixedDuration =
      QueryRelationToOne<ElementDefinition, FhirDuration>(
          _entities[18].properties[99]);

  /// see [ElementDefinition.fixedHumanName]
  static final fixedHumanName =
      QueryRelationToOne<ElementDefinition, HumanName>(
          _entities[18].properties[100]);

  /// see [ElementDefinition.fixedIdentifier]
  static final fixedIdentifier =
      QueryRelationToOne<ElementDefinition, Identifier>(
          _entities[18].properties[101]);

  /// see [ElementDefinition.fixedMoney]
  static final fixedMoney = QueryRelationToOne<ElementDefinition, Money>(
      _entities[18].properties[102]);

  /// see [ElementDefinition.fixedPeriod]
  static final fixedPeriod = QueryRelationToOne<ElementDefinition, Period>(
      _entities[18].properties[103]);

  /// see [ElementDefinition.fixedQuantity]
  static final fixedQuantity = QueryRelationToOne<ElementDefinition, Quantity>(
      _entities[18].properties[104]);

  /// see [ElementDefinition.fixedRange]
  static final fixedRange = QueryRelationToOne<ElementDefinition, Range>(
      _entities[18].properties[105]);

  /// see [ElementDefinition.fixedRatio]
  static final fixedRatio = QueryRelationToOne<ElementDefinition, Ratio>(
      _entities[18].properties[106]);

  /// see [ElementDefinition.fixedRatioRange]
  static final fixedRatioRange =
      QueryRelationToOne<ElementDefinition, RatioRange>(
          _entities[18].properties[107]);

  /// see [ElementDefinition.fixedReference]
  static final fixedReference =
      QueryRelationToOne<ElementDefinition, Reference>(
          _entities[18].properties[108]);

  /// see [ElementDefinition.fixedSampledData]
  static final fixedSampledData =
      QueryRelationToOne<ElementDefinition, SampledData>(
          _entities[18].properties[109]);

  /// see [ElementDefinition.fixedSignature]
  static final fixedSignature =
      QueryRelationToOne<ElementDefinition, Signature>(
          _entities[18].properties[110]);

  /// see [ElementDefinition.fixedTiming]
  static final fixedTiming = QueryRelationToOne<ElementDefinition, Timing>(
      _entities[18].properties[111]);

  /// see [ElementDefinition.fixedContactDetail]
  static final fixedContactDetail =
      QueryRelationToOne<ElementDefinition, ContactDetail>(
          _entities[18].properties[112]);

  /// see [ElementDefinition.fixedContributor]
  static final fixedContributor =
      QueryRelationToOne<ElementDefinition, Contributor>(
          _entities[18].properties[113]);

  /// see [ElementDefinition.fixedDataRequirement]
  static final fixedDataRequirement =
      QueryRelationToOne<ElementDefinition, DataRequirement>(
          _entities[18].properties[114]);

  /// see [ElementDefinition.fixedExpression]
  static final fixedExpression =
      QueryRelationToOne<ElementDefinition, FhirExpression>(
          _entities[18].properties[115]);

  /// see [ElementDefinition.fixedParameterDefinition]
  static final fixedParameterDefinition =
      QueryRelationToOne<ElementDefinition, ParameterDefinition>(
          _entities[18].properties[116]);

  /// see [ElementDefinition.fixedRelatedArtifact]
  static final fixedRelatedArtifact =
      QueryRelationToOne<ElementDefinition, RelatedArtifact>(
          _entities[18].properties[117]);

  /// see [ElementDefinition.fixedTriggerDefinition]
  static final fixedTriggerDefinition =
      QueryRelationToOne<ElementDefinition, TriggerDefinition>(
          _entities[18].properties[118]);

  /// see [ElementDefinition.fixedUsageContext]
  static final fixedUsageContext =
      QueryRelationToOne<ElementDefinition, UsageContext>(
          _entities[18].properties[119]);

  /// see [ElementDefinition.fixedDosage]
  static final fixedDosage = QueryRelationToOne<ElementDefinition, Dosage>(
      _entities[18].properties[120]);

  /// see [ElementDefinition.patternBase64Binary]
  static final patternBase64Binary =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[121]);

  /// see [ElementDefinition.patternBoolean]
  static final patternBoolean =
      QueryBooleanProperty<ElementDefinition>(_entities[18].properties[122]);

  /// see [ElementDefinition.patternCanonical]
  static final patternCanonical =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[123]);

  /// see [ElementDefinition.patternCode]
  static final patternCode =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[124]);

  /// see [ElementDefinition.patternDate]
  static final patternDate =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[125]);

  /// see [ElementDefinition.patternDateTime]
  static final patternDateTime =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[126]);

  /// see [ElementDefinition.patternDecimal]
  static final patternDecimal =
      QueryDoubleProperty<ElementDefinition>(_entities[18].properties[127]);

  /// see [ElementDefinition.patternId]
  static final patternId =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[128]);

  /// see [ElementDefinition.patternInstant]
  static final patternInstant =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[129]);

  /// see [ElementDefinition.patternInteger]
  static final patternInteger =
      QueryIntegerProperty<ElementDefinition>(_entities[18].properties[130]);

  /// see [ElementDefinition.patternMarkdown]
  static final patternMarkdown =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[131]);

  /// see [ElementDefinition.patternOid]
  static final patternOid =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[132]);

  /// see [ElementDefinition.patternPositiveInt]
  static final patternPositiveInt =
      QueryIntegerProperty<ElementDefinition>(_entities[18].properties[133]);

  /// see [ElementDefinition.patternString]
  static final patternString =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[134]);

  /// see [ElementDefinition.patternTime]
  static final patternTime =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[135]);

  /// see [ElementDefinition.patternUnsignedInt]
  static final patternUnsignedInt =
      QueryIntegerProperty<ElementDefinition>(_entities[18].properties[136]);

  /// see [ElementDefinition.patternUri]
  static final patternUri =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[137]);

  /// see [ElementDefinition.patternUrl]
  static final patternUrl =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[138]);

  /// see [ElementDefinition.patternUuid]
  static final patternUuid =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[139]);

  /// see [ElementDefinition.patternAddress]
  static final patternAddress = QueryRelationToOne<ElementDefinition, Address>(
      _entities[18].properties[140]);

  /// see [ElementDefinition.patternAge]
  static final patternAge =
      QueryRelationToOne<ElementDefinition, Age>(_entities[18].properties[141]);

  /// see [ElementDefinition.patternAnnotation]
  static final patternAnnotation =
      QueryRelationToOne<ElementDefinition, Annotation>(
          _entities[18].properties[142]);

  /// see [ElementDefinition.patternAttachment]
  static final patternAttachment =
      QueryRelationToOne<ElementDefinition, Attachment>(
          _entities[18].properties[143]);

  /// see [ElementDefinition.patternCodeableConcept]
  static final patternCodeableConcept =
      QueryRelationToOne<ElementDefinition, CodeableConcept>(
          _entities[18].properties[144]);

  /// see [ElementDefinition.patternCodeableReference]
  static final patternCodeableReference =
      QueryRelationToOne<ElementDefinition, CodeableReference>(
          _entities[18].properties[145]);

  /// see [ElementDefinition.patternCoding]
  static final patternCoding = QueryRelationToOne<ElementDefinition, Coding>(
      _entities[18].properties[146]);

  /// see [ElementDefinition.patternContactPoint]
  static final patternContactPoint =
      QueryRelationToOne<ElementDefinition, ContactPoint>(
          _entities[18].properties[147]);

  /// see [ElementDefinition.patternCount]
  static final patternCount = QueryRelationToOne<ElementDefinition, Count>(
      _entities[18].properties[148]);

  /// see [ElementDefinition.patternDistance]
  static final patternDistance =
      QueryRelationToOne<ElementDefinition, Distance>(
          _entities[18].properties[149]);

  /// see [ElementDefinition.patternDuration]
  static final patternDuration =
      QueryRelationToOne<ElementDefinition, FhirDuration>(
          _entities[18].properties[150]);

  /// see [ElementDefinition.patternHumanName]
  static final patternHumanName =
      QueryRelationToOne<ElementDefinition, HumanName>(
          _entities[18].properties[151]);

  /// see [ElementDefinition.patternIdentifier]
  static final patternIdentifier =
      QueryRelationToOne<ElementDefinition, Identifier>(
          _entities[18].properties[152]);

  /// see [ElementDefinition.patternMoney]
  static final patternMoney = QueryRelationToOne<ElementDefinition, Money>(
      _entities[18].properties[153]);

  /// see [ElementDefinition.patternPeriod]
  static final patternPeriod = QueryRelationToOne<ElementDefinition, Period>(
      _entities[18].properties[154]);

  /// see [ElementDefinition.patternQuantity]
  static final patternQuantity =
      QueryRelationToOne<ElementDefinition, Quantity>(
          _entities[18].properties[155]);

  /// see [ElementDefinition.patternRange]
  static final patternRange = QueryRelationToOne<ElementDefinition, Range>(
      _entities[18].properties[156]);

  /// see [ElementDefinition.patternRatio]
  static final patternRatio = QueryRelationToOne<ElementDefinition, Ratio>(
      _entities[18].properties[157]);

  /// see [ElementDefinition.patternRatioRange]
  static final patternRatioRange =
      QueryRelationToOne<ElementDefinition, RatioRange>(
          _entities[18].properties[158]);

  /// see [ElementDefinition.patternReference]
  static final patternReference =
      QueryRelationToOne<ElementDefinition, Reference>(
          _entities[18].properties[159]);

  /// see [ElementDefinition.patternSampledData]
  static final patternSampledData =
      QueryRelationToOne<ElementDefinition, SampledData>(
          _entities[18].properties[160]);

  /// see [ElementDefinition.patternSignature]
  static final patternSignature =
      QueryRelationToOne<ElementDefinition, Signature>(
          _entities[18].properties[161]);

  /// see [ElementDefinition.patternTiming]
  static final patternTiming = QueryRelationToOne<ElementDefinition, Timing>(
      _entities[18].properties[162]);

  /// see [ElementDefinition.patternContactDetail]
  static final patternContactDetail =
      QueryRelationToOne<ElementDefinition, ContactDetail>(
          _entities[18].properties[163]);

  /// see [ElementDefinition.patternContributor]
  static final patternContributor =
      QueryRelationToOne<ElementDefinition, Contributor>(
          _entities[18].properties[164]);

  /// see [ElementDefinition.patternDataRequirement]
  static final patternDataRequirement =
      QueryRelationToOne<ElementDefinition, DataRequirement>(
          _entities[18].properties[165]);

  /// see [ElementDefinition.patternExpression]
  static final patternExpression =
      QueryRelationToOne<ElementDefinition, FhirExpression>(
          _entities[18].properties[166]);

  /// see [ElementDefinition.patternParameterDefinition]
  static final patternParameterDefinition =
      QueryRelationToOne<ElementDefinition, ParameterDefinition>(
          _entities[18].properties[167]);

  /// see [ElementDefinition.patternRelatedArtifact]
  static final patternRelatedArtifact =
      QueryRelationToOne<ElementDefinition, RelatedArtifact>(
          _entities[18].properties[168]);

  /// see [ElementDefinition.patternTriggerDefinition]
  static final patternTriggerDefinition =
      QueryRelationToOne<ElementDefinition, TriggerDefinition>(
          _entities[18].properties[169]);

  /// see [ElementDefinition.patternUsageContext]
  static final patternUsageContext =
      QueryRelationToOne<ElementDefinition, UsageContext>(
          _entities[18].properties[170]);

  /// see [ElementDefinition.patternDosage]
  static final patternDosage = QueryRelationToOne<ElementDefinition, Dosage>(
      _entities[18].properties[171]);

  /// see [ElementDefinition.minValueDate]
  static final minValueDate =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[172]);

  /// see [ElementDefinition.minValueDateTime]
  static final minValueDateTime =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[173]);

  /// see [ElementDefinition.minValueInstant]
  static final minValueInstant =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[174]);

  /// see [ElementDefinition.minValueTime]
  static final minValueTime =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[175]);

  /// see [ElementDefinition.minValueDecimal]
  static final minValueDecimal =
      QueryDoubleProperty<ElementDefinition>(_entities[18].properties[176]);

  /// see [ElementDefinition.minValueInteger]
  static final minValueInteger =
      QueryIntegerProperty<ElementDefinition>(_entities[18].properties[177]);

  /// see [ElementDefinition.minValuePositiveInt]
  static final minValuePositiveInt =
      QueryIntegerProperty<ElementDefinition>(_entities[18].properties[178]);

  /// see [ElementDefinition.minValueUnsignedInt]
  static final minValueUnsignedInt =
      QueryIntegerProperty<ElementDefinition>(_entities[18].properties[179]);

  /// see [ElementDefinition.minValueQuantity]
  static final minValueQuantity =
      QueryRelationToOne<ElementDefinition, Quantity>(
          _entities[18].properties[180]);

  /// see [ElementDefinition.maxValueDate]
  static final maxValueDate =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[181]);

  /// see [ElementDefinition.maxValueDateTime]
  static final maxValueDateTime =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[182]);

  /// see [ElementDefinition.maxValueInstant]
  static final maxValueInstant =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[183]);

  /// see [ElementDefinition.maxValueTime]
  static final maxValueTime =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[184]);

  /// see [ElementDefinition.maxValueDecimal]
  static final maxValueDecimal =
      QueryDoubleProperty<ElementDefinition>(_entities[18].properties[185]);

  /// see [ElementDefinition.maxValueInteger]
  static final maxValueInteger =
      QueryIntegerProperty<ElementDefinition>(_entities[18].properties[186]);

  /// see [ElementDefinition.maxValuePositiveInt]
  static final maxValuePositiveInt =
      QueryIntegerProperty<ElementDefinition>(_entities[18].properties[187]);

  /// see [ElementDefinition.maxValueUnsignedInt]
  static final maxValueUnsignedInt =
      QueryIntegerProperty<ElementDefinition>(_entities[18].properties[188]);

  /// see [ElementDefinition.maxValueQuantity]
  static final maxValueQuantity =
      QueryRelationToOne<ElementDefinition, Quantity>(
          _entities[18].properties[189]);

  /// see [ElementDefinition.maxLength]
  static final maxLength =
      QueryIntegerProperty<ElementDefinition>(_entities[18].properties[190]);

  /// see [ElementDefinition.condition]
  static final condition = QueryStringVectorProperty<ElementDefinition>(
      _entities[18].properties[191]);

  /// see [ElementDefinition.mustSupport]
  static final mustSupport =
      QueryBooleanProperty<ElementDefinition>(_entities[18].properties[192]);

  /// see [ElementDefinition.isModifier]
  static final isModifier =
      QueryBooleanProperty<ElementDefinition>(_entities[18].properties[193]);

  /// see [ElementDefinition.isModifierReason]
  static final isModifierReason =
      QueryStringProperty<ElementDefinition>(_entities[18].properties[194]);

  /// see [ElementDefinition.isSummary]
  static final isSummary =
      QueryBooleanProperty<ElementDefinition>(_entities[18].properties[195]);

  /// see [ElementDefinition.binding]
  static final binding =
      QueryRelationToOne<ElementDefinition, ElementDefinitionBinding>(
          _entities[18].properties[196]);

  /// see [ElementDefinition.extension_]
  static final extension_ =
      QueryRelationToMany<ElementDefinition, FhirExtension>(
          _entities[18].relations[0]);

  /// see [ElementDefinition.modifierExtension]
  static final modifierExtension =
      QueryRelationToMany<ElementDefinition, FhirExtension>(
          _entities[18].relations[1]);

  /// see [ElementDefinition.code]
  static final code = QueryRelationToMany<ElementDefinition, Coding>(
      _entities[18].relations[2]);

  /// see [ElementDefinition.type]
  static final type =
      QueryRelationToMany<ElementDefinition, ElementDefinitionType>(
          _entities[18].relations[3]);

  /// see [ElementDefinition.example]
  static final example =
      QueryRelationToMany<ElementDefinition, ElementDefinitionExample>(
          _entities[18].relations[4]);

  /// see [ElementDefinition.constraint]
  static final constraint =
      QueryRelationToMany<ElementDefinition, ElementDefinitionConstraint>(
          _entities[18].relations[5]);

  /// see [ElementDefinition.mapping]
  static final mapping =
      QueryRelationToMany<ElementDefinition, ElementDefinitionMapping>(
          _entities[18].relations[6]);
}

/// [ElementDefinitionBase] entity fields to define ObjectBox queries.
class ElementDefinitionBase_ {
  /// see [ElementDefinitionBase.dbId]
  static final dbId =
      QueryIntegerProperty<ElementDefinitionBase>(_entities[19].properties[0]);

  /// see [ElementDefinitionBase.id]
  static final id = QueryRelationToOne<ElementDefinitionBase, String>(
      _entities[19].properties[1]);

  /// see [ElementDefinitionBase.path]
  static final path =
      QueryStringProperty<ElementDefinitionBase>(_entities[19].properties[2]);

  /// see [ElementDefinitionBase.min]
  static final min =
      QueryIntegerProperty<ElementDefinitionBase>(_entities[19].properties[3]);

  /// see [ElementDefinitionBase.max]
  static final max =
      QueryStringProperty<ElementDefinitionBase>(_entities[19].properties[4]);

  /// see [ElementDefinitionBase.extension_]
  static final extension_ =
      QueryRelationToMany<ElementDefinitionBase, FhirExtension>(
          _entities[19].relations[0]);
}

/// [ElementDefinitionBinding] entity fields to define ObjectBox queries.
class ElementDefinitionBinding_ {
  /// see [ElementDefinitionBinding.dbId]
  static final dbId = QueryIntegerProperty<ElementDefinitionBinding>(
      _entities[20].properties[0]);

  /// see [ElementDefinitionBinding.id]
  static final id = QueryRelationToOne<ElementDefinitionBinding, String>(
      _entities[20].properties[1]);

  /// see [ElementDefinitionBinding.strength]
  static final strength = QueryStringProperty<ElementDefinitionBinding>(
      _entities[20].properties[2]);

  /// see [ElementDefinitionBinding.description]
  static final description = QueryStringProperty<ElementDefinitionBinding>(
      _entities[20].properties[3]);

  /// see [ElementDefinitionBinding.valueSet]
  static final valueSet = QueryStringProperty<ElementDefinitionBinding>(
      _entities[20].properties[4]);

  /// see [ElementDefinitionBinding.extension_]
  static final extension_ =
      QueryRelationToMany<ElementDefinitionBinding, FhirExtension>(
          _entities[20].relations[0]);
}

/// [ElementDefinitionConstraint] entity fields to define ObjectBox queries.
class ElementDefinitionConstraint_ {
  /// see [ElementDefinitionConstraint.dbId]
  static final dbId = QueryIntegerProperty<ElementDefinitionConstraint>(
      _entities[21].properties[0]);

  /// see [ElementDefinitionConstraint.id]
  static final id = QueryRelationToOne<ElementDefinitionConstraint, String>(
      _entities[21].properties[1]);

  /// see [ElementDefinitionConstraint.key]
  static final key = QueryStringProperty<ElementDefinitionConstraint>(
      _entities[21].properties[2]);

  /// see [ElementDefinitionConstraint.requirements]
  static final requirements = QueryStringProperty<ElementDefinitionConstraint>(
      _entities[21].properties[3]);

  /// see [ElementDefinitionConstraint.severity]
  static final severity = QueryStringProperty<ElementDefinitionConstraint>(
      _entities[21].properties[4]);

  /// see [ElementDefinitionConstraint.human]
  static final human = QueryStringProperty<ElementDefinitionConstraint>(
      _entities[21].properties[5]);

  /// see [ElementDefinitionConstraint.expression]
  static final expression = QueryStringProperty<ElementDefinitionConstraint>(
      _entities[21].properties[6]);

  /// see [ElementDefinitionConstraint.xpath]
  static final xpath = QueryStringProperty<ElementDefinitionConstraint>(
      _entities[21].properties[7]);

  /// see [ElementDefinitionConstraint.source]
  static final source = QueryStringProperty<ElementDefinitionConstraint>(
      _entities[21].properties[8]);

  /// see [ElementDefinitionConstraint.extension_]
  static final extension_ =
      QueryRelationToMany<ElementDefinitionConstraint, FhirExtension>(
          _entities[21].relations[0]);
}

/// [ElementDefinitionDiscriminator] entity fields to define ObjectBox queries.
class ElementDefinitionDiscriminator_ {
  /// see [ElementDefinitionDiscriminator.dbId]
  static final dbId = QueryIntegerProperty<ElementDefinitionDiscriminator>(
      _entities[22].properties[0]);

  /// see [ElementDefinitionDiscriminator.id]
  static final id = QueryRelationToOne<ElementDefinitionDiscriminator, String>(
      _entities[22].properties[1]);

  /// see [ElementDefinitionDiscriminator.type]
  static final type = QueryStringProperty<ElementDefinitionDiscriminator>(
      _entities[22].properties[2]);

  /// see [ElementDefinitionDiscriminator.path]
  static final path = QueryStringProperty<ElementDefinitionDiscriminator>(
      _entities[22].properties[3]);

  /// see [ElementDefinitionDiscriminator.extension_]
  static final extension_ =
      QueryRelationToMany<ElementDefinitionDiscriminator, FhirExtension>(
          _entities[22].relations[0]);
}

/// [ElementDefinitionExample] entity fields to define ObjectBox queries.
class ElementDefinitionExample_ {
  /// see [ElementDefinitionExample.dbId]
  static final dbId = QueryIntegerProperty<ElementDefinitionExample>(
      _entities[23].properties[0]);

  /// see [ElementDefinitionExample.id]
  static final id = QueryRelationToOne<ElementDefinitionExample, String>(
      _entities[23].properties[1]);

  /// see [ElementDefinitionExample.label]
  static final label = QueryStringProperty<ElementDefinitionExample>(
      _entities[23].properties[2]);

  /// see [ElementDefinitionExample.valueBase64Binary]
  static final valueBase64Binary =
      QueryStringProperty<ElementDefinitionExample>(
          _entities[23].properties[3]);

  /// see [ElementDefinitionExample.valueBoolean]
  static final valueBoolean = QueryBooleanProperty<ElementDefinitionExample>(
      _entities[23].properties[4]);

  /// see [ElementDefinitionExample.valueCanonical]
  static final valueCanonical = QueryStringProperty<ElementDefinitionExample>(
      _entities[23].properties[5]);

  /// see [ElementDefinitionExample.valueCode]
  static final valueCode = QueryStringProperty<ElementDefinitionExample>(
      _entities[23].properties[6]);

  /// see [ElementDefinitionExample.valueDate]
  static final valueDate = QueryStringProperty<ElementDefinitionExample>(
      _entities[23].properties[7]);

  /// see [ElementDefinitionExample.valueDateTime]
  static final valueDateTime = QueryStringProperty<ElementDefinitionExample>(
      _entities[23].properties[8]);

  /// see [ElementDefinitionExample.valueDecimal]
  static final valueDecimal = QueryDoubleProperty<ElementDefinitionExample>(
      _entities[23].properties[9]);

  /// see [ElementDefinitionExample.valueId]
  static final valueId = QueryStringProperty<ElementDefinitionExample>(
      _entities[23].properties[10]);

  /// see [ElementDefinitionExample.valueInstant]
  static final valueInstant = QueryStringProperty<ElementDefinitionExample>(
      _entities[23].properties[11]);

  /// see [ElementDefinitionExample.valueInteger]
  static final valueInteger = QueryIntegerProperty<ElementDefinitionExample>(
      _entities[23].properties[12]);

  /// see [ElementDefinitionExample.valueMarkdown]
  static final valueMarkdown = QueryStringProperty<ElementDefinitionExample>(
      _entities[23].properties[13]);

  /// see [ElementDefinitionExample.valueOid]
  static final valueOid = QueryStringProperty<ElementDefinitionExample>(
      _entities[23].properties[14]);

  /// see [ElementDefinitionExample.valuePositiveInt]
  static final valuePositiveInt =
      QueryIntegerProperty<ElementDefinitionExample>(
          _entities[23].properties[15]);

  /// see [ElementDefinitionExample.valueString]
  static final valueString = QueryStringProperty<ElementDefinitionExample>(
      _entities[23].properties[16]);

  /// see [ElementDefinitionExample.valueTime]
  static final valueTime = QueryStringProperty<ElementDefinitionExample>(
      _entities[23].properties[17]);

  /// see [ElementDefinitionExample.valueUnsignedInt]
  static final valueUnsignedInt =
      QueryIntegerProperty<ElementDefinitionExample>(
          _entities[23].properties[18]);

  /// see [ElementDefinitionExample.valueUri]
  static final valueUri = QueryStringProperty<ElementDefinitionExample>(
      _entities[23].properties[19]);

  /// see [ElementDefinitionExample.valueUrl]
  static final valueUrl = QueryStringProperty<ElementDefinitionExample>(
      _entities[23].properties[20]);

  /// see [ElementDefinitionExample.valueUuid]
  static final valueUuid = QueryStringProperty<ElementDefinitionExample>(
      _entities[23].properties[21]);

  /// see [ElementDefinitionExample.valueAddress]
  static final valueAddress =
      QueryRelationToOne<ElementDefinitionExample, Address>(
          _entities[23].properties[22]);

  /// see [ElementDefinitionExample.valueAge]
  static final valueAge = QueryRelationToOne<ElementDefinitionExample, Age>(
      _entities[23].properties[23]);

  /// see [ElementDefinitionExample.valueAnnotation]
  static final valueAnnotation =
      QueryRelationToOne<ElementDefinitionExample, Annotation>(
          _entities[23].properties[24]);

  /// see [ElementDefinitionExample.valueAttachment]
  static final valueAttachment =
      QueryRelationToOne<ElementDefinitionExample, Attachment>(
          _entities[23].properties[25]);

  /// see [ElementDefinitionExample.valueCodeableConcept]
  static final valueCodeableConcept =
      QueryRelationToOne<ElementDefinitionExample, CodeableConcept>(
          _entities[23].properties[26]);

  /// see [ElementDefinitionExample.valueCodeableReference]
  static final valueCodeableReference =
      QueryRelationToOne<ElementDefinitionExample, CodeableReference>(
          _entities[23].properties[27]);

  /// see [ElementDefinitionExample.valueCoding]
  static final valueCoding =
      QueryRelationToOne<ElementDefinitionExample, Coding>(
          _entities[23].properties[28]);

  /// see [ElementDefinitionExample.valueContactPoint]
  static final valueContactPoint =
      QueryRelationToOne<ElementDefinitionExample, ContactPoint>(
          _entities[23].properties[29]);

  /// see [ElementDefinitionExample.valueCount]
  static final valueCount = QueryRelationToOne<ElementDefinitionExample, Count>(
      _entities[23].properties[30]);

  /// see [ElementDefinitionExample.valueDistance]
  static final valueDistance =
      QueryRelationToOne<ElementDefinitionExample, Distance>(
          _entities[23].properties[31]);

  /// see [ElementDefinitionExample.valueDuration]
  static final valueDuration =
      QueryRelationToOne<ElementDefinitionExample, FhirDuration>(
          _entities[23].properties[32]);

  /// see [ElementDefinitionExample.valueHumanName]
  static final valueHumanName =
      QueryRelationToOne<ElementDefinitionExample, HumanName>(
          _entities[23].properties[33]);

  /// see [ElementDefinitionExample.valueIdentifier]
  static final valueIdentifier =
      QueryRelationToOne<ElementDefinitionExample, Identifier>(
          _entities[23].properties[34]);

  /// see [ElementDefinitionExample.valueMoney]
  static final valueMoney = QueryRelationToOne<ElementDefinitionExample, Money>(
      _entities[23].properties[35]);

  /// see [ElementDefinitionExample.valuePeriod]
  static final valuePeriod =
      QueryRelationToOne<ElementDefinitionExample, Period>(
          _entities[23].properties[36]);

  /// see [ElementDefinitionExample.valueQuantity]
  static final valueQuantity =
      QueryRelationToOne<ElementDefinitionExample, Quantity>(
          _entities[23].properties[37]);

  /// see [ElementDefinitionExample.valueRange]
  static final valueRange = QueryRelationToOne<ElementDefinitionExample, Range>(
      _entities[23].properties[38]);

  /// see [ElementDefinitionExample.valueRatio]
  static final valueRatio = QueryRelationToOne<ElementDefinitionExample, Ratio>(
      _entities[23].properties[39]);

  /// see [ElementDefinitionExample.valueRatioRange]
  static final valueRatioRange =
      QueryRelationToOne<ElementDefinitionExample, RatioRange>(
          _entities[23].properties[40]);

  /// see [ElementDefinitionExample.valueReference]
  static final valueReference =
      QueryRelationToOne<ElementDefinitionExample, Reference>(
          _entities[23].properties[41]);

  /// see [ElementDefinitionExample.valueSampledData]
  static final valueSampledData =
      QueryRelationToOne<ElementDefinitionExample, SampledData>(
          _entities[23].properties[42]);

  /// see [ElementDefinitionExample.valueSignature]
  static final valueSignature =
      QueryRelationToOne<ElementDefinitionExample, Signature>(
          _entities[23].properties[43]);

  /// see [ElementDefinitionExample.valueTiming]
  static final valueTiming =
      QueryRelationToOne<ElementDefinitionExample, Timing>(
          _entities[23].properties[44]);

  /// see [ElementDefinitionExample.valueContactDetail]
  static final valueContactDetail =
      QueryRelationToOne<ElementDefinitionExample, ContactDetail>(
          _entities[23].properties[45]);

  /// see [ElementDefinitionExample.valueContributor]
  static final valueContributor =
      QueryRelationToOne<ElementDefinitionExample, Contributor>(
          _entities[23].properties[46]);

  /// see [ElementDefinitionExample.valueDataRequirement]
  static final valueDataRequirement =
      QueryRelationToOne<ElementDefinitionExample, DataRequirement>(
          _entities[23].properties[47]);

  /// see [ElementDefinitionExample.valueExpression]
  static final valueExpression =
      QueryRelationToOne<ElementDefinitionExample, FhirExpression>(
          _entities[23].properties[48]);

  /// see [ElementDefinitionExample.valueParameterDefinition]
  static final valueParameterDefinition =
      QueryRelationToOne<ElementDefinitionExample, ParameterDefinition>(
          _entities[23].properties[49]);

  /// see [ElementDefinitionExample.valueRelatedArtifact]
  static final valueRelatedArtifact =
      QueryRelationToOne<ElementDefinitionExample, RelatedArtifact>(
          _entities[23].properties[50]);

  /// see [ElementDefinitionExample.valueTriggerDefinition]
  static final valueTriggerDefinition =
      QueryRelationToOne<ElementDefinitionExample, TriggerDefinition>(
          _entities[23].properties[51]);

  /// see [ElementDefinitionExample.valueUsageContext]
  static final valueUsageContext =
      QueryRelationToOne<ElementDefinitionExample, UsageContext>(
          _entities[23].properties[52]);

  /// see [ElementDefinitionExample.valueDosage]
  static final valueDosage =
      QueryRelationToOne<ElementDefinitionExample, Dosage>(
          _entities[23].properties[53]);

  /// see [ElementDefinitionExample.extension_]
  static final extension_ =
      QueryRelationToMany<ElementDefinitionExample, FhirExtension>(
          _entities[23].relations[0]);
}

/// [ElementDefinitionMapping] entity fields to define ObjectBox queries.
class ElementDefinitionMapping_ {
  /// see [ElementDefinitionMapping.dbId]
  static final dbId = QueryIntegerProperty<ElementDefinitionMapping>(
      _entities[24].properties[0]);

  /// see [ElementDefinitionMapping.id]
  static final id = QueryRelationToOne<ElementDefinitionMapping, String>(
      _entities[24].properties[1]);

  /// see [ElementDefinitionMapping.identity]
  static final identity = QueryStringProperty<ElementDefinitionMapping>(
      _entities[24].properties[2]);

  /// see [ElementDefinitionMapping.language]
  static final language = QueryStringProperty<ElementDefinitionMapping>(
      _entities[24].properties[3]);

  /// see [ElementDefinitionMapping.map]
  static final map = QueryStringProperty<ElementDefinitionMapping>(
      _entities[24].properties[4]);

  /// see [ElementDefinitionMapping.comment]
  static final comment = QueryStringProperty<ElementDefinitionMapping>(
      _entities[24].properties[5]);

  /// see [ElementDefinitionMapping.extension_]
  static final extension_ =
      QueryRelationToMany<ElementDefinitionMapping, FhirExtension>(
          _entities[24].relations[0]);
}

/// [ElementDefinitionSlicing] entity fields to define ObjectBox queries.
class ElementDefinitionSlicing_ {
  /// see [ElementDefinitionSlicing.dbId]
  static final dbId = QueryIntegerProperty<ElementDefinitionSlicing>(
      _entities[25].properties[0]);

  /// see [ElementDefinitionSlicing.id]
  static final id = QueryRelationToOne<ElementDefinitionSlicing, String>(
      _entities[25].properties[1]);

  /// see [ElementDefinitionSlicing.description]
  static final description = QueryStringProperty<ElementDefinitionSlicing>(
      _entities[25].properties[2]);

  /// see [ElementDefinitionSlicing.ordered]
  static final ordered = QueryBooleanProperty<ElementDefinitionSlicing>(
      _entities[25].properties[3]);

  /// see [ElementDefinitionSlicing.rules]
  static final rules = QueryStringProperty<ElementDefinitionSlicing>(
      _entities[25].properties[4]);

  /// see [ElementDefinitionSlicing.extension_]
  static final extension_ =
      QueryRelationToMany<ElementDefinitionSlicing, FhirExtension>(
          _entities[25].relations[0]);

  /// see [ElementDefinitionSlicing.discriminator]
  static final discriminator = QueryRelationToMany<ElementDefinitionSlicing,
      ElementDefinitionDiscriminator>(_entities[25].relations[1]);
}

/// [ElementDefinitionType] entity fields to define ObjectBox queries.
class ElementDefinitionType_ {
  /// see [ElementDefinitionType.dbId]
  static final dbId =
      QueryIntegerProperty<ElementDefinitionType>(_entities[26].properties[0]);

  /// see [ElementDefinitionType.id]
  static final id = QueryRelationToOne<ElementDefinitionType, String>(
      _entities[26].properties[1]);

  /// see [ElementDefinitionType.code]
  static final code =
      QueryStringProperty<ElementDefinitionType>(_entities[26].properties[2]);

  /// see [ElementDefinitionType.profile]
  static final profile = QueryStringVectorProperty<ElementDefinitionType>(
      _entities[26].properties[3]);

  /// see [ElementDefinitionType.targetProfile]
  static final targetProfile = QueryStringVectorProperty<ElementDefinitionType>(
      _entities[26].properties[4]);

  /// see [ElementDefinitionType.aggregation]
  static final aggregation = QueryStringVectorProperty<ElementDefinitionType>(
      _entities[26].properties[5]);

  /// see [ElementDefinitionType.versioning]
  static final versioning =
      QueryStringProperty<ElementDefinitionType>(_entities[26].properties[6]);

  /// see [ElementDefinitionType.extension_]
  static final extension_ =
      QueryRelationToMany<ElementDefinitionType, FhirExtension>(
          _entities[26].relations[0]);
}

/// [FhirDuration] entity fields to define ObjectBox queries.
class FhirDuration_ {
  /// see [FhirDuration.dbId]
  static final dbId =
      QueryIntegerProperty<FhirDuration>(_entities[27].properties[0]);

  /// see [FhirDuration.id]
  static final id =
      QueryRelationToOne<FhirDuration, String>(_entities[27].properties[1]);

  /// see [FhirDuration.value]
  static final value =
      QueryDoubleProperty<FhirDuration>(_entities[27].properties[2]);

  /// see [FhirDuration.comparator]
  static final comparator =
      QueryStringProperty<FhirDuration>(_entities[27].properties[3]);

  /// see [FhirDuration.unit]
  static final unit =
      QueryStringProperty<FhirDuration>(_entities[27].properties[4]);

  /// see [FhirDuration.system]
  static final system =
      QueryStringProperty<FhirDuration>(_entities[27].properties[5]);

  /// see [FhirDuration.code]
  static final code =
      QueryStringProperty<FhirDuration>(_entities[27].properties[6]);

  /// see [FhirDuration.extension_]
  static final extension_ = QueryRelationToMany<FhirDuration, FhirExtension>(
      _entities[27].relations[0]);
}

/// [FhirExpression] entity fields to define ObjectBox queries.
class FhirExpression_ {
  /// see [FhirExpression.dbId]
  static final dbId =
      QueryIntegerProperty<FhirExpression>(_entities[28].properties[0]);

  /// see [FhirExpression.id]
  static final id =
      QueryRelationToOne<FhirExpression, String>(_entities[28].properties[1]);

  /// see [FhirExpression.description]
  static final description =
      QueryStringProperty<FhirExpression>(_entities[28].properties[2]);

  /// see [FhirExpression.name]
  static final name =
      QueryStringProperty<FhirExpression>(_entities[28].properties[3]);

  /// see [FhirExpression.language]
  static final language =
      QueryStringProperty<FhirExpression>(_entities[28].properties[4]);

  /// see [FhirExpression.expression]
  static final expression =
      QueryStringProperty<FhirExpression>(_entities[28].properties[5]);

  /// see [FhirExpression.reference]
  static final reference =
      QueryStringProperty<FhirExpression>(_entities[28].properties[6]);

  /// see [FhirExpression.extension_]
  static final extension_ = QueryRelationToMany<FhirExpression, FhirExtension>(
      _entities[28].relations[0]);
}

/// [FhirExtension] entity fields to define ObjectBox queries.
class FhirExtension_ {
  /// see [FhirExtension.dbId]
  static final dbId =
      QueryIntegerProperty<FhirExtension>(_entities[29].properties[0]);

  /// see [FhirExtension.id]
  static final id =
      QueryRelationToOne<FhirExtension, String>(_entities[29].properties[1]);

  /// see [FhirExtension.url]
  static final url =
      QueryRelationToOne<FhirExtension, String>(_entities[29].properties[2]);

  /// see [FhirExtension.valueBase64Binary]
  static final valueBase64Binary =
      QueryStringProperty<FhirExtension>(_entities[29].properties[3]);

  /// see [FhirExtension.valueBoolean]
  static final valueBoolean =
      QueryBooleanProperty<FhirExtension>(_entities[29].properties[4]);

  /// see [FhirExtension.valueCanonical]
  static final valueCanonical =
      QueryStringProperty<FhirExtension>(_entities[29].properties[5]);

  /// see [FhirExtension.valueCode]
  static final valueCode =
      QueryStringProperty<FhirExtension>(_entities[29].properties[6]);

  /// see [FhirExtension.valueDate]
  static final valueDate =
      QueryStringProperty<FhirExtension>(_entities[29].properties[7]);

  /// see [FhirExtension.valueDateTime]
  static final valueDateTime =
      QueryStringProperty<FhirExtension>(_entities[29].properties[8]);

  /// see [FhirExtension.valueDecimal]
  static final valueDecimal =
      QueryDoubleProperty<FhirExtension>(_entities[29].properties[9]);

  /// see [FhirExtension.valueId]
  static final valueId =
      QueryStringProperty<FhirExtension>(_entities[29].properties[10]);

  /// see [FhirExtension.valueInstant]
  static final valueInstant =
      QueryStringProperty<FhirExtension>(_entities[29].properties[11]);

  /// see [FhirExtension.valueInteger]
  static final valueInteger =
      QueryIntegerProperty<FhirExtension>(_entities[29].properties[12]);

  /// see [FhirExtension.valueMarkdown]
  static final valueMarkdown =
      QueryStringProperty<FhirExtension>(_entities[29].properties[13]);

  /// see [FhirExtension.valueOid]
  static final valueOid =
      QueryStringProperty<FhirExtension>(_entities[29].properties[14]);

  /// see [FhirExtension.valuePositiveInt]
  static final valuePositiveInt =
      QueryIntegerProperty<FhirExtension>(_entities[29].properties[15]);

  /// see [FhirExtension.valueString]
  static final valueString =
      QueryStringProperty<FhirExtension>(_entities[29].properties[16]);

  /// see [FhirExtension.valueTime]
  static final valueTime =
      QueryStringProperty<FhirExtension>(_entities[29].properties[17]);

  /// see [FhirExtension.valueUnsignedInt]
  static final valueUnsignedInt =
      QueryIntegerProperty<FhirExtension>(_entities[29].properties[18]);

  /// see [FhirExtension.valueUri]
  static final valueUri =
      QueryStringProperty<FhirExtension>(_entities[29].properties[19]);

  /// see [FhirExtension.valueUrl]
  static final valueUrl =
      QueryStringProperty<FhirExtension>(_entities[29].properties[20]);

  /// see [FhirExtension.valueUuid]
  static final valueUuid =
      QueryStringProperty<FhirExtension>(_entities[29].properties[21]);

  /// see [FhirExtension.valueAddress]
  static final valueAddress =
      QueryRelationToOne<FhirExtension, Address>(_entities[29].properties[22]);

  /// see [FhirExtension.valueAge]
  static final valueAge =
      QueryRelationToOne<FhirExtension, Age>(_entities[29].properties[23]);

  /// see [FhirExtension.valueAnnotation]
  static final valueAnnotation = QueryRelationToOne<FhirExtension, Annotation>(
      _entities[29].properties[24]);

  /// see [FhirExtension.valueAttachment]
  static final valueAttachment = QueryRelationToOne<FhirExtension, Attachment>(
      _entities[29].properties[25]);

  /// see [FhirExtension.valueCodeableConcept]
  static final valueCodeableConcept =
      QueryRelationToOne<FhirExtension, CodeableConcept>(
          _entities[29].properties[26]);

  /// see [FhirExtension.valueCodeableReference]
  static final valueCodeableReference =
      QueryRelationToOne<FhirExtension, CodeableReference>(
          _entities[29].properties[27]);

  /// see [FhirExtension.valueCoding]
  static final valueCoding =
      QueryRelationToOne<FhirExtension, Coding>(_entities[29].properties[28]);

  /// see [FhirExtension.valueContactPoint]
  static final valueContactPoint =
      QueryRelationToOne<FhirExtension, ContactPoint>(
          _entities[29].properties[29]);

  /// see [FhirExtension.valueCount]
  static final valueCount =
      QueryRelationToOne<FhirExtension, Count>(_entities[29].properties[30]);

  /// see [FhirExtension.valueDistance]
  static final valueDistance =
      QueryRelationToOne<FhirExtension, Distance>(_entities[29].properties[31]);

  /// see [FhirExtension.valueDuration]
  static final valueDuration = QueryRelationToOne<FhirExtension, FhirDuration>(
      _entities[29].properties[32]);

  /// see [FhirExtension.valueHumanName]
  static final valueHumanName = QueryRelationToOne<FhirExtension, HumanName>(
      _entities[29].properties[33]);

  /// see [FhirExtension.valueIdentifier]
  static final valueIdentifier = QueryRelationToOne<FhirExtension, Identifier>(
      _entities[29].properties[34]);

  /// see [FhirExtension.valueMoney]
  static final valueMoney =
      QueryRelationToOne<FhirExtension, Money>(_entities[29].properties[35]);

  /// see [FhirExtension.valuePeriod]
  static final valuePeriod =
      QueryRelationToOne<FhirExtension, Period>(_entities[29].properties[36]);

  /// see [FhirExtension.valueQuantity]
  static final valueQuantity =
      QueryRelationToOne<FhirExtension, Quantity>(_entities[29].properties[37]);

  /// see [FhirExtension.valueRange]
  static final valueRange =
      QueryRelationToOne<FhirExtension, Range>(_entities[29].properties[38]);

  /// see [FhirExtension.valueRatio]
  static final valueRatio =
      QueryRelationToOne<FhirExtension, Ratio>(_entities[29].properties[39]);

  /// see [FhirExtension.valueRatioRange]
  static final valueRatioRange = QueryRelationToOne<FhirExtension, RatioRange>(
      _entities[29].properties[40]);

  /// see [FhirExtension.valueReference]
  static final valueReference = QueryRelationToOne<FhirExtension, Reference>(
      _entities[29].properties[41]);

  /// see [FhirExtension.valueSampledData]
  static final valueSampledData =
      QueryRelationToOne<FhirExtension, SampledData>(
          _entities[29].properties[42]);

  /// see [FhirExtension.valueSignature]
  static final valueSignature = QueryRelationToOne<FhirExtension, Signature>(
      _entities[29].properties[43]);

  /// see [FhirExtension.valueTiming]
  static final valueTiming =
      QueryRelationToOne<FhirExtension, Timing>(_entities[29].properties[44]);

  /// see [FhirExtension.valueContactDetail]
  static final valueContactDetail =
      QueryRelationToOne<FhirExtension, ContactDetail>(
          _entities[29].properties[45]);

  /// see [FhirExtension.valueContributor]
  static final valueContributor =
      QueryRelationToOne<FhirExtension, Contributor>(
          _entities[29].properties[46]);

  /// see [FhirExtension.valueDataRequirement]
  static final valueDataRequirement =
      QueryRelationToOne<FhirExtension, DataRequirement>(
          _entities[29].properties[47]);

  /// see [FhirExtension.valueExpression]
  static final valueExpression =
      QueryRelationToOne<FhirExtension, FhirExpression>(
          _entities[29].properties[48]);

  /// see [FhirExtension.valueParameterDefinition]
  static final valueParameterDefinition =
      QueryRelationToOne<FhirExtension, ParameterDefinition>(
          _entities[29].properties[49]);

  /// see [FhirExtension.valueRelatedArtifact]
  static final valueRelatedArtifact =
      QueryRelationToOne<FhirExtension, RelatedArtifact>(
          _entities[29].properties[50]);

  /// see [FhirExtension.valueTriggerDefinition]
  static final valueTriggerDefinition =
      QueryRelationToOne<FhirExtension, TriggerDefinition>(
          _entities[29].properties[51]);

  /// see [FhirExtension.valueUsageContext]
  static final valueUsageContext =
      QueryRelationToOne<FhirExtension, UsageContext>(
          _entities[29].properties[52]);

  /// see [FhirExtension.valueDosage]
  static final valueDosage =
      QueryRelationToOne<FhirExtension, Dosage>(_entities[29].properties[53]);

  /// see [FhirExtension.extension_]
  static final extension_ = QueryRelationToMany<FhirExtension, FhirExtension>(
      _entities[29].relations[0]);
}

/// [FhirMeta] entity fields to define ObjectBox queries.
class FhirMeta_ {
  /// see [FhirMeta.dbId]
  static final dbId =
      QueryIntegerProperty<FhirMeta>(_entities[30].properties[0]);

  /// see [FhirMeta.id]
  static final id =
      QueryRelationToOne<FhirMeta, String>(_entities[30].properties[1]);

  /// see [FhirMeta.versionId]
  static final versionId =
      QueryStringProperty<FhirMeta>(_entities[30].properties[2]);

  /// see [FhirMeta.lastUpdated]
  static final lastUpdated =
      QueryStringProperty<FhirMeta>(_entities[30].properties[3]);

  /// see [FhirMeta.source]
  static final source =
      QueryStringProperty<FhirMeta>(_entities[30].properties[4]);

  /// see [FhirMeta.profile]
  static final profile =
      QueryStringVectorProperty<FhirMeta>(_entities[30].properties[5]);

  /// see [FhirMeta.extension_]
  static final extension_ =
      QueryRelationToMany<FhirMeta, FhirExtension>(_entities[30].relations[0]);

  /// see [FhirMeta.security]
  static final security =
      QueryRelationToMany<FhirMeta, Coding>(_entities[30].relations[1]);

  /// see [FhirMeta.tag]
  static final tag =
      QueryRelationToMany<FhirMeta, Coding>(_entities[30].relations[2]);
}

/// [HumanName] entity fields to define ObjectBox queries.
class HumanName_ {
  /// see [HumanName.dbId]
  static final dbId =
      QueryIntegerProperty<HumanName>(_entities[31].properties[0]);

  /// see [HumanName.id]
  static final id =
      QueryRelationToOne<HumanName, String>(_entities[31].properties[1]);

  /// see [HumanName.use]
  static final use =
      QueryStringProperty<HumanName>(_entities[31].properties[2]);

  /// see [HumanName.text]
  static final text =
      QueryStringProperty<HumanName>(_entities[31].properties[3]);

  /// see [HumanName.family]
  static final family =
      QueryStringProperty<HumanName>(_entities[31].properties[4]);

  /// see [HumanName.given]
  static final given =
      QueryStringVectorProperty<HumanName>(_entities[31].properties[5]);

  /// see [HumanName.prefix]
  static final prefix =
      QueryStringVectorProperty<HumanName>(_entities[31].properties[6]);

  /// see [HumanName.suffix]
  static final suffix =
      QueryStringVectorProperty<HumanName>(_entities[31].properties[7]);

  /// see [HumanName.period]
  static final period =
      QueryRelationToOne<HumanName, Period>(_entities[31].properties[8]);

  /// see [HumanName.extension_]
  static final extension_ =
      QueryRelationToMany<HumanName, FhirExtension>(_entities[31].relations[0]);
}

/// [Identifier] entity fields to define ObjectBox queries.
class Identifier_ {
  /// see [Identifier.dbId]
  static final dbId =
      QueryIntegerProperty<Identifier>(_entities[32].properties[0]);

  /// see [Identifier.id]
  static final id =
      QueryRelationToOne<Identifier, String>(_entities[32].properties[1]);

  /// see [Identifier.use]
  static final use =
      QueryStringProperty<Identifier>(_entities[32].properties[2]);

  /// see [Identifier.type]
  static final type = QueryRelationToOne<Identifier, CodeableConcept>(
      _entities[32].properties[3]);

  /// see [Identifier.system]
  static final system =
      QueryStringProperty<Identifier>(_entities[32].properties[4]);

  /// see [Identifier.value]
  static final value =
      QueryStringProperty<Identifier>(_entities[32].properties[5]);

  /// see [Identifier.period]
  static final period =
      QueryRelationToOne<Identifier, Period>(_entities[32].properties[6]);

  /// see [Identifier.assigner]
  static final assigner =
      QueryRelationToOne<Identifier, Reference>(_entities[32].properties[7]);

  /// see [Identifier.extension_]
  static final extension_ = QueryRelationToMany<Identifier, FhirExtension>(
      _entities[32].relations[0]);
}

/// [MarketingStatus] entity fields to define ObjectBox queries.
class MarketingStatus_ {
  /// see [MarketingStatus.dbId]
  static final dbId =
      QueryIntegerProperty<MarketingStatus>(_entities[33].properties[0]);

  /// see [MarketingStatus.id]
  static final id =
      QueryRelationToOne<MarketingStatus, String>(_entities[33].properties[1]);

  /// see [MarketingStatus.country]
  static final country = QueryRelationToOne<MarketingStatus, CodeableConcept>(
      _entities[33].properties[2]);

  /// see [MarketingStatus.jurisdiction]
  static final jurisdiction =
      QueryRelationToOne<MarketingStatus, CodeableConcept>(
          _entities[33].properties[3]);

  /// see [MarketingStatus.status]
  static final status = QueryRelationToOne<MarketingStatus, CodeableConcept>(
      _entities[33].properties[4]);

  /// see [MarketingStatus.dateRange]
  static final dateRange =
      QueryRelationToOne<MarketingStatus, Period>(_entities[33].properties[5]);

  /// see [MarketingStatus.restoreDate]
  static final restoreDate =
      QueryStringProperty<MarketingStatus>(_entities[33].properties[6]);

  /// see [MarketingStatus.extension_]
  static final extension_ = QueryRelationToMany<MarketingStatus, FhirExtension>(
      _entities[33].relations[0]);

  /// see [MarketingStatus.modifierExtension]
  static final modifierExtension =
      QueryRelationToMany<MarketingStatus, FhirExtension>(
          _entities[33].relations[1]);
}

/// [Money] entity fields to define ObjectBox queries.
class Money_ {
  /// see [Money.dbId]
  static final dbId = QueryIntegerProperty<Money>(_entities[34].properties[0]);

  /// see [Money.id]
  static final id =
      QueryRelationToOne<Money, String>(_entities[34].properties[1]);

  /// see [Money.value]
  static final value = QueryDoubleProperty<Money>(_entities[34].properties[2]);

  /// see [Money.currency]
  static final currency =
      QueryStringProperty<Money>(_entities[34].properties[3]);

  /// see [Money.extension_]
  static final extension_ =
      QueryRelationToMany<Money, FhirExtension>(_entities[34].relations[0]);
}

/// [Narrative] entity fields to define ObjectBox queries.
class Narrative_ {
  /// see [Narrative.dbId]
  static final dbId =
      QueryIntegerProperty<Narrative>(_entities[35].properties[0]);

  /// see [Narrative.id]
  static final id =
      QueryRelationToOne<Narrative, String>(_entities[35].properties[1]);

  /// see [Narrative.status]
  static final status =
      QueryStringProperty<Narrative>(_entities[35].properties[2]);

  /// see [Narrative.div]
  static final div =
      QueryStringProperty<Narrative>(_entities[35].properties[3]);

  /// see [Narrative.extension_]
  static final extension_ =
      QueryRelationToMany<Narrative, FhirExtension>(_entities[35].relations[0]);
}

/// [ParameterDefinition] entity fields to define ObjectBox queries.
class ParameterDefinition_ {
  /// see [ParameterDefinition.dbId]
  static final dbId =
      QueryIntegerProperty<ParameterDefinition>(_entities[36].properties[0]);

  /// see [ParameterDefinition.id]
  static final id = QueryRelationToOne<ParameterDefinition, String>(
      _entities[36].properties[1]);

  /// see [ParameterDefinition.name]
  static final name =
      QueryStringProperty<ParameterDefinition>(_entities[36].properties[2]);

  /// see [ParameterDefinition.use]
  static final use =
      QueryStringProperty<ParameterDefinition>(_entities[36].properties[3]);

  /// see [ParameterDefinition.min]
  static final min =
      QueryIntegerProperty<ParameterDefinition>(_entities[36].properties[4]);

  /// see [ParameterDefinition.max]
  static final max =
      QueryStringProperty<ParameterDefinition>(_entities[36].properties[5]);

  /// see [ParameterDefinition.documentation]
  static final documentation =
      QueryStringProperty<ParameterDefinition>(_entities[36].properties[6]);

  /// see [ParameterDefinition.type]
  static final type =
      QueryStringProperty<ParameterDefinition>(_entities[36].properties[7]);

  /// see [ParameterDefinition.profile]
  static final profile =
      QueryStringProperty<ParameterDefinition>(_entities[36].properties[8]);

  /// see [ParameterDefinition.extension_]
  static final extension_ =
      QueryRelationToMany<ParameterDefinition, FhirExtension>(
          _entities[36].relations[0]);
}

/// [Period] entity fields to define ObjectBox queries.
class Period_ {
  /// see [Period.dbId]
  static final dbId = QueryIntegerProperty<Period>(_entities[37].properties[0]);

  /// see [Period.id]
  static final id =
      QueryRelationToOne<Period, String>(_entities[37].properties[1]);

  /// see [Period.start]
  static final start = QueryStringProperty<Period>(_entities[37].properties[2]);

  /// see [Period.end]
  static final end = QueryStringProperty<Period>(_entities[37].properties[3]);

  /// see [Period.extension_]
  static final extension_ =
      QueryRelationToMany<Period, FhirExtension>(_entities[37].relations[0]);
}

/// [Population] entity fields to define ObjectBox queries.
class Population_ {
  /// see [Population.dbId]
  static final dbId =
      QueryIntegerProperty<Population>(_entities[38].properties[0]);

  /// see [Population.id]
  static final id =
      QueryRelationToOne<Population, String>(_entities[38].properties[1]);

  /// see [Population.ageRange]
  static final ageRange =
      QueryRelationToOne<Population, Range>(_entities[38].properties[2]);

  /// see [Population.ageCodeableConcept]
  static final ageCodeableConcept =
      QueryRelationToOne<Population, CodeableConcept>(
          _entities[38].properties[3]);

  /// see [Population.gender]
  static final gender = QueryRelationToOne<Population, CodeableConcept>(
      _entities[38].properties[4]);

  /// see [Population.race]
  static final race = QueryRelationToOne<Population, CodeableConcept>(
      _entities[38].properties[5]);

  /// see [Population.physiologicalCondition]
  static final physiologicalCondition =
      QueryRelationToOne<Population, CodeableConcept>(
          _entities[38].properties[6]);

  /// see [Population.extension_]
  static final extension_ = QueryRelationToMany<Population, FhirExtension>(
      _entities[38].relations[0]);

  /// see [Population.modifierExtension]
  static final modifierExtension =
      QueryRelationToMany<Population, FhirExtension>(
          _entities[38].relations[1]);
}

/// [ProdCharacteristic] entity fields to define ObjectBox queries.
class ProdCharacteristic_ {
  /// see [ProdCharacteristic.dbId]
  static final dbId =
      QueryIntegerProperty<ProdCharacteristic>(_entities[39].properties[0]);

  /// see [ProdCharacteristic.id]
  static final id = QueryRelationToOne<ProdCharacteristic, String>(
      _entities[39].properties[1]);

  /// see [ProdCharacteristic.height]
  static final height = QueryRelationToOne<ProdCharacteristic, Quantity>(
      _entities[39].properties[2]);

  /// see [ProdCharacteristic.width]
  static final width = QueryRelationToOne<ProdCharacteristic, Quantity>(
      _entities[39].properties[3]);

  /// see [ProdCharacteristic.depth]
  static final depth = QueryRelationToOne<ProdCharacteristic, Quantity>(
      _entities[39].properties[4]);

  /// see [ProdCharacteristic.weight]
  static final weight = QueryRelationToOne<ProdCharacteristic, Quantity>(
      _entities[39].properties[5]);

  /// see [ProdCharacteristic.nominalVolume]
  static final nominalVolume = QueryRelationToOne<ProdCharacteristic, Quantity>(
      _entities[39].properties[6]);

  /// see [ProdCharacteristic.externalDiameter]
  static final externalDiameter =
      QueryRelationToOne<ProdCharacteristic, Quantity>(
          _entities[39].properties[7]);

  /// see [ProdCharacteristic.shape]
  static final shape =
      QueryStringProperty<ProdCharacteristic>(_entities[39].properties[8]);

  /// see [ProdCharacteristic.color]
  static final color = QueryStringVectorProperty<ProdCharacteristic>(
      _entities[39].properties[9]);

  /// see [ProdCharacteristic.imprint]
  static final imprint = QueryStringVectorProperty<ProdCharacteristic>(
      _entities[39].properties[10]);

  /// see [ProdCharacteristic.scoring]
  static final scoring =
      QueryRelationToOne<ProdCharacteristic, CodeableConcept>(
          _entities[39].properties[11]);

  /// see [ProdCharacteristic.extension_]
  static final extension_ =
      QueryRelationToMany<ProdCharacteristic, FhirExtension>(
          _entities[39].relations[0]);

  /// see [ProdCharacteristic.modifierExtension]
  static final modifierExtension =
      QueryRelationToMany<ProdCharacteristic, FhirExtension>(
          _entities[39].relations[1]);

  /// see [ProdCharacteristic.image]
  static final image = QueryRelationToMany<ProdCharacteristic, Attachment>(
      _entities[39].relations[2]);
}

/// [ProductShelfLife] entity fields to define ObjectBox queries.
class ProductShelfLife_ {
  /// see [ProductShelfLife.dbId]
  static final dbId =
      QueryIntegerProperty<ProductShelfLife>(_entities[40].properties[0]);

  /// see [ProductShelfLife.id]
  static final id =
      QueryRelationToOne<ProductShelfLife, String>(_entities[40].properties[1]);

  /// see [ProductShelfLife.identifier]
  static final identifier = QueryRelationToOne<ProductShelfLife, Identifier>(
      _entities[40].properties[2]);

  /// see [ProductShelfLife.type]
  static final type = QueryRelationToOne<ProductShelfLife, CodeableConcept>(
      _entities[40].properties[3]);

  /// see [ProductShelfLife.period]
  static final period = QueryRelationToOne<ProductShelfLife, Quantity>(
      _entities[40].properties[4]);

  /// see [ProductShelfLife.extension_]
  static final extension_ =
      QueryRelationToMany<ProductShelfLife, FhirExtension>(
          _entities[40].relations[0]);

  /// see [ProductShelfLife.modifierExtension]
  static final modifierExtension =
      QueryRelationToMany<ProductShelfLife, FhirExtension>(
          _entities[40].relations[1]);

  /// see [ProductShelfLife.specialPrecautionsForStorage]
  static final specialPrecautionsForStorage =
      QueryRelationToMany<ProductShelfLife, CodeableConcept>(
          _entities[40].relations[2]);
}

/// [Quantity] entity fields to define ObjectBox queries.
class Quantity_ {
  /// see [Quantity.dbId]
  static final dbId =
      QueryIntegerProperty<Quantity>(_entities[41].properties[0]);

  /// see [Quantity.id]
  static final id =
      QueryRelationToOne<Quantity, String>(_entities[41].properties[1]);

  /// see [Quantity.value]
  static final value =
      QueryDoubleProperty<Quantity>(_entities[41].properties[2]);

  /// see [Quantity.comparator]
  static final comparator =
      QueryStringProperty<Quantity>(_entities[41].properties[3]);

  /// see [Quantity.unit]
  static final unit =
      QueryStringProperty<Quantity>(_entities[41].properties[4]);

  /// see [Quantity.system]
  static final system =
      QueryStringProperty<Quantity>(_entities[41].properties[5]);

  /// see [Quantity.code]
  static final code =
      QueryStringProperty<Quantity>(_entities[41].properties[6]);

  /// see [Quantity.extension_]
  static final extension_ =
      QueryRelationToMany<Quantity, FhirExtension>(_entities[41].relations[0]);
}

/// [Range] entity fields to define ObjectBox queries.
class Range_ {
  /// see [Range.dbId]
  static final dbId = QueryIntegerProperty<Range>(_entities[42].properties[0]);

  /// see [Range.id]
  static final id =
      QueryRelationToOne<Range, String>(_entities[42].properties[1]);

  /// see [Range.low]
  static final low =
      QueryRelationToOne<Range, Quantity>(_entities[42].properties[2]);

  /// see [Range.high]
  static final high =
      QueryRelationToOne<Range, Quantity>(_entities[42].properties[3]);

  /// see [Range.extension_]
  static final extension_ =
      QueryRelationToMany<Range, FhirExtension>(_entities[42].relations[0]);
}

/// [Ratio] entity fields to define ObjectBox queries.
class Ratio_ {
  /// see [Ratio.dbId]
  static final dbId = QueryIntegerProperty<Ratio>(_entities[43].properties[0]);

  /// see [Ratio.id]
  static final id =
      QueryRelationToOne<Ratio, String>(_entities[43].properties[1]);

  /// see [Ratio.numerator]
  static final numerator =
      QueryRelationToOne<Ratio, Quantity>(_entities[43].properties[2]);

  /// see [Ratio.denominator]
  static final denominator =
      QueryRelationToOne<Ratio, Quantity>(_entities[43].properties[3]);

  /// see [Ratio.extension_]
  static final extension_ =
      QueryRelationToMany<Ratio, FhirExtension>(_entities[43].relations[0]);
}

/// [RatioRange] entity fields to define ObjectBox queries.
class RatioRange_ {
  /// see [RatioRange.dbId]
  static final dbId =
      QueryIntegerProperty<RatioRange>(_entities[44].properties[0]);

  /// see [RatioRange.id]
  static final id =
      QueryRelationToOne<RatioRange, String>(_entities[44].properties[1]);

  /// see [RatioRange.lowNumerator]
  static final lowNumerator =
      QueryRelationToOne<RatioRange, Quantity>(_entities[44].properties[2]);

  /// see [RatioRange.highNumerator]
  static final highNumerator =
      QueryRelationToOne<RatioRange, Quantity>(_entities[44].properties[3]);

  /// see [RatioRange.denominator]
  static final denominator =
      QueryRelationToOne<RatioRange, Quantity>(_entities[44].properties[4]);

  /// see [RatioRange.extension_]
  static final extension_ = QueryRelationToMany<RatioRange, FhirExtension>(
      _entities[44].relations[0]);
}

/// [Reference] entity fields to define ObjectBox queries.
class Reference_ {
  /// see [Reference.dbId]
  static final dbId =
      QueryIntegerProperty<Reference>(_entities[45].properties[0]);

  /// see [Reference.id]
  static final id =
      QueryRelationToOne<Reference, String>(_entities[45].properties[1]);

  /// see [Reference.reference]
  static final reference =
      QueryStringProperty<Reference>(_entities[45].properties[2]);

  /// see [Reference.type]
  static final type =
      QueryStringProperty<Reference>(_entities[45].properties[3]);

  /// see [Reference.identifier]
  static final identifier =
      QueryRelationToOne<Reference, Identifier>(_entities[45].properties[4]);

  /// see [Reference.display]
  static final display =
      QueryStringProperty<Reference>(_entities[45].properties[5]);

  /// see [Reference.extension_]
  static final extension_ =
      QueryRelationToMany<Reference, FhirExtension>(_entities[45].relations[0]);
}

/// [RelatedArtifact] entity fields to define ObjectBox queries.
class RelatedArtifact_ {
  /// see [RelatedArtifact.dbId]
  static final dbId =
      QueryIntegerProperty<RelatedArtifact>(_entities[46].properties[0]);

  /// see [RelatedArtifact.id]
  static final id =
      QueryRelationToOne<RelatedArtifact, String>(_entities[46].properties[1]);

  /// see [RelatedArtifact.type]
  static final type =
      QueryStringProperty<RelatedArtifact>(_entities[46].properties[2]);

  /// see [RelatedArtifact.label]
  static final label =
      QueryStringProperty<RelatedArtifact>(_entities[46].properties[3]);

  /// see [RelatedArtifact.display]
  static final display =
      QueryStringProperty<RelatedArtifact>(_entities[46].properties[4]);

  /// see [RelatedArtifact.citation]
  static final citation =
      QueryStringProperty<RelatedArtifact>(_entities[46].properties[5]);

  /// see [RelatedArtifact.url]
  static final url =
      QueryStringProperty<RelatedArtifact>(_entities[46].properties[6]);

  /// see [RelatedArtifact.document]
  static final document = QueryRelationToOne<RelatedArtifact, Attachment>(
      _entities[46].properties[7]);

  /// see [RelatedArtifact.resource]
  static final resource =
      QueryStringProperty<RelatedArtifact>(_entities[46].properties[8]);

  /// see [RelatedArtifact.extension_]
  static final extension_ = QueryRelationToMany<RelatedArtifact, FhirExtension>(
      _entities[46].relations[0]);
}

/// [Resource] entity fields to define ObjectBox queries.
class Resource_ {
  /// see [Resource.dbId]
  static final dbId =
      QueryIntegerProperty<Resource>(_entities[47].properties[0]);
}

/// [SampledData] entity fields to define ObjectBox queries.
class SampledData_ {
  /// see [SampledData.dbId]
  static final dbId =
      QueryIntegerProperty<SampledData>(_entities[48].properties[0]);

  /// see [SampledData.id]
  static final id =
      QueryRelationToOne<SampledData, String>(_entities[48].properties[1]);

  /// see [SampledData.origin]
  static final origin =
      QueryRelationToOne<SampledData, Quantity>(_entities[48].properties[2]);

  /// see [SampledData.period]
  static final period =
      QueryDoubleProperty<SampledData>(_entities[48].properties[3]);

  /// see [SampledData.factor]
  static final factor =
      QueryDoubleProperty<SampledData>(_entities[48].properties[4]);

  /// see [SampledData.lowerLimit]
  static final lowerLimit =
      QueryDoubleProperty<SampledData>(_entities[48].properties[5]);

  /// see [SampledData.upperLimit]
  static final upperLimit =
      QueryDoubleProperty<SampledData>(_entities[48].properties[6]);

  /// see [SampledData.dimensions]
  static final dimensions =
      QueryIntegerProperty<SampledData>(_entities[48].properties[7]);

  /// see [SampledData.data]
  static final data =
      QueryStringProperty<SampledData>(_entities[48].properties[8]);

  /// see [SampledData.extension_]
  static final extension_ = QueryRelationToMany<SampledData, FhirExtension>(
      _entities[48].relations[0]);
}

/// [Signature] entity fields to define ObjectBox queries.
class Signature_ {
  /// see [Signature.dbId]
  static final dbId =
      QueryIntegerProperty<Signature>(_entities[49].properties[0]);

  /// see [Signature.id]
  static final id =
      QueryRelationToOne<Signature, String>(_entities[49].properties[1]);

  /// see [Signature.when]
  static final when =
      QueryStringProperty<Signature>(_entities[49].properties[2]);

  /// see [Signature.who]
  static final who =
      QueryRelationToOne<Signature, Reference>(_entities[49].properties[3]);

  /// see [Signature.onBehalfOf]
  static final onBehalfOf =
      QueryRelationToOne<Signature, Reference>(_entities[49].properties[4]);

  /// see [Signature.targetFormat]
  static final targetFormat =
      QueryStringProperty<Signature>(_entities[49].properties[5]);

  /// see [Signature.sigFormat]
  static final sigFormat =
      QueryStringProperty<Signature>(_entities[49].properties[6]);

  /// see [Signature.data]
  static final data =
      QueryStringProperty<Signature>(_entities[49].properties[7]);

  /// see [Signature.extension_]
  static final extension_ =
      QueryRelationToMany<Signature, FhirExtension>(_entities[49].relations[0]);

  /// see [Signature.type]
  static final type =
      QueryRelationToMany<Signature, Coding>(_entities[49].relations[1]);
}

/// [Timing] entity fields to define ObjectBox queries.
class Timing_ {
  /// see [Timing.dbId]
  static final dbId = QueryIntegerProperty<Timing>(_entities[50].properties[0]);

  /// see [Timing.id]
  static final id =
      QueryRelationToOne<Timing, String>(_entities[50].properties[1]);

  /// see [Timing.event]
  static final event =
      QueryStringVectorProperty<Timing>(_entities[50].properties[2]);

  /// see [Timing.repeat]
  static final repeat =
      QueryRelationToOne<Timing, TimingRepeat>(_entities[50].properties[3]);

  /// see [Timing.code]
  static final code =
      QueryRelationToOne<Timing, CodeableConcept>(_entities[50].properties[4]);

  /// see [Timing.extension_]
  static final extension_ =
      QueryRelationToMany<Timing, FhirExtension>(_entities[50].relations[0]);

  /// see [Timing.modifierExtension]
  static final modifierExtension =
      QueryRelationToMany<Timing, FhirExtension>(_entities[50].relations[1]);
}

/// [TimingRepeat] entity fields to define ObjectBox queries.
class TimingRepeat_ {
  /// see [TimingRepeat.dbId]
  static final dbId =
      QueryIntegerProperty<TimingRepeat>(_entities[51].properties[0]);

  /// see [TimingRepeat.id]
  static final id =
      QueryRelationToOne<TimingRepeat, String>(_entities[51].properties[1]);

  /// see [TimingRepeat.boundsDuration]
  static final boundsDuration = QueryRelationToOne<TimingRepeat, FhirDuration>(
      _entities[51].properties[2]);

  /// see [TimingRepeat.boundsRange]
  static final boundsRange =
      QueryRelationToOne<TimingRepeat, Range>(_entities[51].properties[3]);

  /// see [TimingRepeat.boundsPeriod]
  static final boundsPeriod =
      QueryRelationToOne<TimingRepeat, Period>(_entities[51].properties[4]);

  /// see [TimingRepeat.count]
  static final count =
      QueryIntegerProperty<TimingRepeat>(_entities[51].properties[5]);

  /// see [TimingRepeat.countMax]
  static final countMax =
      QueryIntegerProperty<TimingRepeat>(_entities[51].properties[6]);

  /// see [TimingRepeat.duration]
  static final duration =
      QueryDoubleProperty<TimingRepeat>(_entities[51].properties[7]);

  /// see [TimingRepeat.durationMax]
  static final durationMax =
      QueryDoubleProperty<TimingRepeat>(_entities[51].properties[8]);

  /// see [TimingRepeat.durationUnit]
  static final durationUnit =
      QueryStringProperty<TimingRepeat>(_entities[51].properties[9]);

  /// see [TimingRepeat.frequency]
  static final frequency =
      QueryIntegerProperty<TimingRepeat>(_entities[51].properties[10]);

  /// see [TimingRepeat.frequencyMax]
  static final frequencyMax =
      QueryIntegerProperty<TimingRepeat>(_entities[51].properties[11]);

  /// see [TimingRepeat.period]
  static final period =
      QueryDoubleProperty<TimingRepeat>(_entities[51].properties[12]);

  /// see [TimingRepeat.periodMax]
  static final periodMax =
      QueryDoubleProperty<TimingRepeat>(_entities[51].properties[13]);

  /// see [TimingRepeat.periodUnit]
  static final periodUnit =
      QueryStringProperty<TimingRepeat>(_entities[51].properties[14]);

  /// see [TimingRepeat.dayOfWeek]
  static final dayOfWeek =
      QueryStringVectorProperty<TimingRepeat>(_entities[51].properties[15]);

  /// see [TimingRepeat.timeOfDay]
  static final timeOfDay =
      QueryStringVectorProperty<TimingRepeat>(_entities[51].properties[16]);

  /// see [TimingRepeat.when]
  static final when =
      QueryStringVectorProperty<TimingRepeat>(_entities[51].properties[17]);

  /// see [TimingRepeat.offset]
  static final offset =
      QueryIntegerProperty<TimingRepeat>(_entities[51].properties[18]);

  /// see [TimingRepeat.extension_]
  static final extension_ = QueryRelationToMany<TimingRepeat, FhirExtension>(
      _entities[51].relations[0]);
}

/// [TriggerDefinition] entity fields to define ObjectBox queries.
class TriggerDefinition_ {
  /// see [TriggerDefinition.dbId]
  static final dbId =
      QueryIntegerProperty<TriggerDefinition>(_entities[52].properties[0]);

  /// see [TriggerDefinition.id]
  static final id = QueryRelationToOne<TriggerDefinition, String>(
      _entities[52].properties[1]);

  /// see [TriggerDefinition.type]
  static final type =
      QueryStringProperty<TriggerDefinition>(_entities[52].properties[2]);

  /// see [TriggerDefinition.name]
  static final name =
      QueryStringProperty<TriggerDefinition>(_entities[52].properties[3]);

  /// see [TriggerDefinition.timingTiming]
  static final timingTiming = QueryRelationToOne<TriggerDefinition, Timing>(
      _entities[52].properties[4]);

  /// see [TriggerDefinition.timingReference]
  static final timingReference =
      QueryRelationToOne<TriggerDefinition, Reference>(
          _entities[52].properties[5]);

  /// see [TriggerDefinition.timingDate]
  static final timingDate =
      QueryStringProperty<TriggerDefinition>(_entities[52].properties[6]);

  /// see [TriggerDefinition.timingDateTime]
  static final timingDateTime =
      QueryStringProperty<TriggerDefinition>(_entities[52].properties[7]);

  /// see [TriggerDefinition.condition]
  static final condition =
      QueryRelationToOne<TriggerDefinition, FhirExpression>(
          _entities[52].properties[8]);

  /// see [TriggerDefinition.extension_]
  static final extension_ =
      QueryRelationToMany<TriggerDefinition, FhirExtension>(
          _entities[52].relations[0]);

  /// see [TriggerDefinition.data]
  static final data = QueryRelationToMany<TriggerDefinition, DataRequirement>(
      _entities[52].relations[1]);
}

/// [UsageContext] entity fields to define ObjectBox queries.
class UsageContext_ {
  /// see [UsageContext.dbId]
  static final dbId =
      QueryIntegerProperty<UsageContext>(_entities[53].properties[0]);

  /// see [UsageContext.id]
  static final id =
      QueryRelationToOne<UsageContext, String>(_entities[53].properties[1]);

  /// see [UsageContext.code]
  static final code =
      QueryRelationToOne<UsageContext, Coding>(_entities[53].properties[2]);

  /// see [UsageContext.valueCodeableConcept]
  static final valueCodeableConcept =
      QueryRelationToOne<UsageContext, CodeableConcept>(
          _entities[53].properties[3]);

  /// see [UsageContext.valueQuantity]
  static final valueQuantity =
      QueryRelationToOne<UsageContext, Quantity>(_entities[53].properties[4]);

  /// see [UsageContext.valueRange]
  static final valueRange =
      QueryRelationToOne<UsageContext, Range>(_entities[53].properties[5]);

  /// see [UsageContext.valueReference]
  static final valueReference =
      QueryRelationToOne<UsageContext, Reference>(_entities[53].properties[6]);

  /// see [UsageContext.extension_]
  static final extension_ = QueryRelationToMany<UsageContext, FhirExtension>(
      _entities[53].relations[0]);
}
