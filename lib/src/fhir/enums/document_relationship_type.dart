/// The type of relationship between documents.
enum DocumentRelationshipType {
  /// Display: Replaces
  /// Definition: This document logically replaces or supersedes the target document.
  replaces,

  /// Display: Transforms
  /// Definition: This document was generated by transforming the target document (e.g. format or language conversion).
  transforms,

  /// Display: Signs
  /// Definition: This document is a signature of the target document.
  signs,

  /// Display: Appends
  /// Definition: This document adds additional information to the target document.
  appends,
  ;

  @override
  String toString() {
    switch (this) {
      case replaces:
        return 'replaces';
      case transforms:
        return 'transforms';
      case signs:
        return 'signs';
      case appends:
        return 'appends';
    }
  }

  /// Returns a [String] from a [DocumentRelationshipType] enum.
  String toJson() => toString();

  /// Returns a [DocumentRelationshipType] from a [String] enum.
  static DocumentRelationshipType fromString(String str) {
    switch (str) {
      case 'replaces':
        return DocumentRelationshipType.replaces;
      case 'transforms':
        return DocumentRelationshipType.transforms;
      case 'signs':
        return DocumentRelationshipType.signs;
      case 'appends':
        return DocumentRelationshipType.appends;
      default:
        throw ArgumentError('Unknown enum value: $str');
    }
  }

  /// Returns a [DocumentRelationshipType] from a json [String] (although it will accept any dynamic and throw an error if it is not a String due to requirements for serializing/deserializing
  static DocumentRelationshipType fromJson(dynamic jsonValue) {
    if (jsonValue is String) {
      return fromString(jsonValue);
    } else {
      throw ArgumentError('Unknown enum value: $jsonValue');
    }
  }
}
