import 'package:fhir_r4/fhir_r4.dart';

/// If field is a list, how to manage the production.
enum StructureMapTargetListMode {
  /// Display: First
  /// Definition: when the target list is being assembled, the items for this rule go first. If more than one rule defines a first item (for a given instance of mapping) then this is an error.
  first('first'),

  /// Display: Share
  /// Definition: the target instance is shared with the target instances generated by another rule (up to the first common n items, then create new ones).
  share('share'),

  /// Display: Last
  /// Definition: when the target list is being assembled, the items for this rule go last. If more than one rule defines a last item (for a given instance of mapping) then this is an error.
  last('last'),

  /// Display: Collate
  /// Definition: re-use the first item in the list, and keep adding content to it.
  collate('collate'),
  elementOnly('', null),
  ;

  final String fhirCode;
  final Element? element;

  const StructureMapTargetListMode(this.fhirCode, [this.element]);

  Map<String, dynamic> toJson() => {
        'value': fhirCode.isEmpty ? null : fhirCode,
        if (element != null) '_value': element!.toJson(),
      };

  static StructureMapTargetListMode fromJson(Map<String, dynamic> json) {
    final String? value = json['value'] as String?;
    final Map<String, dynamic>? elementJson =
        json['_value'] as Map<String, dynamic>?;
    final Element? element =
        elementJson != null ? Element.fromJson(elementJson) : null;
    if (value == null && element != null) {
      return StructureMapTargetListMode.elementOnly.withElement(element);
    }
    return StructureMapTargetListMode.values.firstWhere(
      (e) => e.fhirCode == value,
    );
  }

  StructureMapTargetListMode withElement(Element? newElement) {
    return StructureMapTargetListMode.fromJson({
      'value': fhirCode,
      '_value': newElement?.toJson(),
    });
  }
}
