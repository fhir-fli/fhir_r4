// ignore_for_file: constant_identifier_names, lines_longer_than_80_chars, unused_element, flutter_style_todos

import 'package:fhir_r4/fhir_r4.dart';

/// The type of relationship between reports.
enum ReportRelationshipType {
  /// Display: Replaces
  /// Definition: This document replaces or supersedes the target document.
  replaces('replaces'),

  /// Display: Amends
  /// Definition: This document notes corrections or changes to replace or supersede parts of the target document.
  amends('amends'),

  /// Display: Appends
  /// Definition: This document adds additional information to the target document.
  appends('appends'),

  /// Display: Transforms
  /// Definition: This document was generated by transforming the target document (eg format or language conversion).
  transforms('transforms'),

  /// Display: Replaced With
  /// Definition: This document was.
  replacedWith('replacedWith'),

  /// Display: Amended With
  /// Definition: This document was.
  amendedWith('amendedWith'),

  /// Display: Appended With
  /// Definition: This document was.
  appendedWith('appendedWith'),

  /// Display: Transformed With
  /// Definition: This document was.
  transformedWith('transformedWith'),

  /// For instances where an Element is present but not value

  elementOnly(''),
  ;

  const ReportRelationshipType(this.fhirCode, [this.element]);

  /// The String value of this enum
  final String fhirCode;

  /// The Element value of this enum
  final Element? element;

  /// Serializes the instance to JSON with standardized keys
  Map<String, dynamic> toJson() => {
        'value': fhirCode.isEmpty ? null : fhirCode,
        if (element != null) '_value': element!.toJson(),
      };

  /// Converts a list of JSON values to a list of [ReportRelationshipType] instances.
  static ReportRelationshipType fromJson(
    Map<String, dynamic> json,
  ) {
    final value = json['value'] as String?;
    final elementJson = json['_value'] as Map<String, dynamic>?;
    final element = elementJson != null ? Element.fromJson(elementJson) : null;
    if (value == null && element != null) {
      return ReportRelationshipType.elementOnly.withElement(element);
    }
    return ReportRelationshipType.values.firstWhere(
      (e) => e.fhirCode == value,
    );
  }

  /// Returns the enum value with an element
  ReportRelationshipType withElement(Element? newElement) {
    return ReportRelationshipType.fromJson({
      'value': fhirCode,
      '_value': newElement?.toJson(),
    });
  }
}
