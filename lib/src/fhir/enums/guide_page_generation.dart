import 'package:fhir_r4/fhir_r4.dart';

/// A code that indicates how the page is generated.
enum GuidePageGeneration {
  /// Display: HTML
  /// Definition: Page is proper xhtml with no templating. Will be brought across unchanged for standard post-processing.
  html('html'),

  /// Display: Markdown
  /// Definition: Page is markdown with templating. Will use the template to create a file that imports the markdown file prior to post-processing.
  markdown('markdown'),

  /// Display: XML
  /// Definition: Page is xml with templating. Will use the template to create a file that imports the source file and run the nominated XSLT transform (see parameters) if present prior to post-processing.
  xml('xml'),

  /// Display: Generated
  /// Definition: Page will be generated by the publication process - no source to bring across.
  generated('generated'),
  elementOnly('', null),
  ;

  final String fhirCode;
  final Element? element;

  const GuidePageGeneration(this.fhirCode, [this.element]);

  Map<String, dynamic> toJson() => {
        'value': fhirCode.isEmpty ? null : fhirCode,
        if (element != null) '_value': element!.toJson(),
      };

  static GuidePageGeneration fromJson(Map<String, dynamic> json) {
    final String? value = json['value'] as String?;
    final Map<String, dynamic>? elementJson =
        json['_value'] as Map<String, dynamic>?;
    final Element? element =
        elementJson != null ? Element.fromJson(elementJson) : null;
    if (value == null && element != null) {
      return GuidePageGeneration.elementOnly.withElement(element);
    }
    return GuidePageGeneration.values.firstWhere(
      (e) => e.fhirCode == value,
    );
  }

  GuidePageGeneration withElement(Element? newElement) {
    return GuidePageGeneration.fromJson({
      'value': fhirCode,
      '_value': newElement?.toJson(),
    });
  }
}
